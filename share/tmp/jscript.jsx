define(function(require) {
	var React = require('react');
	return {
		mem_rows:        function(Data, $mem)  { return (<tr key={$mem.Kind}><td>{$mem.Kind}</td><td className="text-right">{$mem.Free}</td><td className="text-right">{$mem.Used}&nbsp;<sup><span dangerouslySetInnerHTML={{__html: $mem.UsePercentHTML}} /></sup></td><td className="text-right">{$mem.Total}</td></tr>); },
		mem_table:       function(Data, rows)  { return (<table className="table1 stripe-table"><thead><tr><th></th><th className="text-right">Free</th><th className="text-right">Used</th><th className="text-right">Total</th></tr></thead><tbody>{rows}</tbody></table>); },

		ifbytes_rows:    function(Data, $if)   { return (<tr key={$if.NameKey}><td><span dangerouslySetInnerHTML={{__html: $if.NameHTML}} /></td><td className="text-right">{$if.DeltaIn}</td><td className="text-right">{$if.DeltaOut}</td><td className="text-right">{$if.In}</td><td className="text-right">{$if.Out}</td></tr>); },
		ifbytes_table:   function(Data, rows)  { return (<table className="table1 stripe-table"><thead><tr><th>Interface</th><th className="text-right nowrap" title="BITS per second">In<span className="unit"><i>b</i>ps</span></th><th className="text-right nowrap" title="BITS per second">Out<span className="unit"><i>b</i>ps</span></th><th className="text-right nowrap" title="total BYTES modulo 4G">In<span className="unit"><i>B</i>%4G</span></th><th className="text-right nowrap" title="total BYTES modulo 4G">Out<span className="unit"><i>B</i>%4G</span></th></tr></thead><tbody>{rows}</tbody></table>); },
		iferrors_rows:   function(Data, $if)   { return (<tr key={$if.NameKey}><td><span dangerouslySetInnerHTML={{__html: $if.NameHTML}} /></td><td className="text-right">{$if.DeltaIn}</td><td className="text-right">{$if.DeltaOut}</td><td className="text-right">{$if.In}</td><td className="text-right">{$if.Out}</td></tr>); },
		iferrors_table:  function(Data, rows)  { return (<table className="table1 stripe-table"><thead><tr><th>Interface</th><th className="text-right nowrap" title="per second">In&nbsp;<span className="unit">ps</span></th><th className="text-right nowrap" title="per second">Out&nbsp;<span className="unit">ps</span></th><th className="text-right nowrap" title="modulo 4G">In&nbsp;<span className="unit">%4G</span></th><th className="text-right nowrap" title="modulo 4G">Out&nbsp;<span className="unit">%4G</span></th></tr></thead><tbody>{rows}</tbody></table>); },
		ifpackets_rows:  function(Data, $if)   { return (<tr key={$if.NameKey}><td><span dangerouslySetInnerHTML={{__html: $if.NameHTML}} /></td><td className="text-right">{$if.DeltaIn}</td><td className="text-right">{$if.DeltaOut}</td><td className="text-right">{$if.In}</td><td className="text-right">{$if.Out}</td></tr>); },
		ifpackets_table: function(Data, rows)  { return (<table className="table1 stripe-table"><thead><tr><th>Interface</th><th className="text-right nowrap" title="per second">In&nbsp;<span className="unit">ps</span></th><th className="text-right nowrap" title="per second">Out&nbsp;<span className="unit">ps</span></th><th className="text-right nowrap" title="total modulo 4G">In&nbsp;<span className="unit">%4G</span></th><th className="text-right nowrap" title="total modulo 4G">Out&nbsp;<span className="unit">%4G</span></th></tr></thead><tbody>{rows}</tbody></table>); },

		cpu_rows:        function(Data, $core) { return (<tr key={$core.N}><td className="text-right nowrap">{$core.N}</td><td className="text-right"><span className={$core.UserClass}>{$core.User}</span></td><td className="text-right"><span className={$core.SysClass}>{$core.Sys}</span></td><td className="text-right"><span className={$core.IdleClass}>{$core.Idle}</span></td></tr>); },
		cpu_table:       function(Data, rows)  { return (<table className="table1 stripe-table"><thead><tr><th></th><th className="text-right nowrap">User<span className="unit">%</span></th><th className="text-right nowrap">Sys<span className="unit">%</span></th><th className="text-right nowrap">Idle<span className="unit">%</span></th></tr></thead><tbody>{rows}</tbody></table>); },

		dfbytes_rows:    function(Data, $disk) { return (<tr key={$disk.DirNameKey}><td className="nowrap"><span dangerouslySetInnerHTML={{__html: $disk.DiskNameHTML}} /></td><td className="nowrap"><span dangerouslySetInnerHTML={{__html: $disk.DirNameHTML}} /></td><td className="text-right">{$disk.Avail}</td><td className="text-right">{$disk.Used}&nbsp;<sup><span className={$disk.UsePercentClass}>{$disk.UsePercent}%</span></sup></td><td className="text-right">{$disk.Total}</td></tr>); },
		dfbytes_table:   function(Data, rows)  { return (<table className="table1 stripe-table"><thead><tr><th className="header"><a href={Data.Links.DFdiskName.Href} className={Data.Links.DFdiskName.Class}>Device<span  className={Data.Links.DFdiskName.CaretClass} /></a></th><th className="header"><a href={Data.Links.DFdirName.Href}  className={Data.Links.DFdirName.Class} >Mounted<span className={Data.Links.DFdirName.CaretClass}  /></a></th><th className="header text-right"><a href={Data.Links.DFavail.Href} className={Data.Links.DFavail.Class}>Avail<span className={Data.Links.DFavail.CaretClass} /></a></th><th className="header text-right"><a href={Data.Links.DFused.Href}  className={Data.Links.DFused.Class} >Used<span  className={Data.Links.DFused.CaretClass}  /></a></th><th className="header text-right"><a href={Data.Links.DFtotal.Href} className={Data.Links.DFtotal.Class}>Total<span className={Data.Links.DFtotal.CaretClass} /></a></th></tr></thead><tbody>{rows}</tbody></table>); },
		dfinodes_rows:   function(Data, $disk) { return (<tr key={$disk.DirNameKey}><td className="nowrap"><span dangerouslySetInnerHTML={{__html: $disk.DiskNameHTML}} /></td><td className="nowrap"><span dangerouslySetInnerHTML={{__html: $disk.DirNameHTML}} /></td><td className="text-right">{$disk.Ifree}</td><td className="text-right">{$disk.Iused}&nbsp;<sup><span className={$disk.IusePercentClass}>{$disk.IusePercent}%</span></sup></td><td className="text-right">{$disk.Inodes}</td></tr>); },
		dfinodes_table:  function(Data, rows)  { return (<table className="table1 stripe-table"><thead><tr><th className="header">Device</th><th className="header">Mounted</th><th className="header text-right">Avail</th><th className="header text-right">Used</th><th className="header text-right">Total</th></tr></thead><tbody>{rows}</tbody></table>); },

		ps_rows:         function(Data, $proc) { return (<tr key={$proc.PID}><td className="text-right">{$proc.PID}</td><td className="text-right"><span dangerouslySetInnerHTML={{__html: $proc.UserHTML}} /></td><td className="text-right">{$proc.Priority}</td><td className="text-right">{$proc.Nice}</td><td className="text-right">{$proc.Size}</td><td className="text-right">{$proc.Resident}</td><td className="text-center">{$proc.Time}</td><td className="nowrap"><span dangerouslySetInnerHTML={{__html: $proc.NameHTML}} /></td></tr>); },
		ps_table:        function(Data, rows)  { return (<table className="table2 stripe-table"><thead><tr><th className="header text-right"><a href={Data.Links.PSPID.Href}      className={Data.Links.PSPID.Class}     >PID<span  className={Data.Links.PSPID.CaretClass}      /></a></th><th className="header text-right"><a href={Data.Links.PSuser.Href}     className={Data.Links.PSuser.Class}    >USER<span className={Data.Links.PSuser.CaretClass}     /></a></th><th className="header text-right"><a href={Data.Links.PSpriority.Href} className={Data.Links.PSpriority.Class}>PR<span   className={Data.Links.PSpriority.CaretClass} /></a></th><th className="header text-right"><a href={Data.Links.PSnice.Href}     className={Data.Links.PSnice.Class}    >NI<span   className={Data.Links.PSnice.CaretClass}     /></a></th><th className="header text-right"><a href={Data.Links.PSsize.Href}     className={Data.Links.PSsize.Class}    >VIRT<span className={Data.Links.PSsize.CaretClass}     /></a></th><th className="header text-right"><a href={Data.Links.PSresident.Href} className={Data.Links.PSresident.Class}>RES<span  className={Data.Links.PSresident.CaretClass} /></a></th><th className="header text-center"><a href={Data.Links.PStime.Href}     className={Data.Links.PStime.Class}    >TIME<span    className={Data.Links.PStime.CaretClass}    /></a></th><th className="header"><a href={Data.Links.PSname.Href} className={Data.Links.PSname.Class}>COMMAND<span className={Data.Links.PSname.CaretClass} /></a></th></tr></thead><tbody>{rows}</tbody></table>); },

		vagrant_rows:    function(Data, $mach) { return (<tr key={$mach.UUID}><td><span dangerouslySetInnerHTML={{__html: $mach.UUIDHTML}} /></td><td>{$mach.Name}</td><td>{$mach.Provider}</td><td><span dangerouslySetInnerHTML={{__html: $mach.StateHTML}} /></td><td className="nowrap"><span dangerouslySetInnerHTML={{__html: $mach.Vagrantfile_pathHTML}} /></td></tr>); },
		vagrant_error:   function(Data)        { return (<tr key="vgerror"><td colspan="5">{Data.VagrantError}</td></tr>); },
		vagrant_table:   function(Data, rows)  { return (<table className="table1 stripe-table" id="vgtable"><thead><tr><th>id</th><th>name</th><th>provider</th><th>state</th><th>directory</th></tr></thead><tbody>{rows}</tbody></table>); }
	};
});
