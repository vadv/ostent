// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x3d\xe9\x73\xdb\xb6\x97\xdf\xf3\x57\x70\x99\x74\xa7\xe9\x94\xd2\x26\xdb\x6e\x3b\xa9\xad\x19\xc5\x92\x13\x4d\x7d\x68\x2c\xd9\xdd\x7e\xea\x50\x22\x24\x21\xa6\x48\x96\x04\xe5\xb8\x1a\xff\xef\xbf\xf7\x70\xf0\xa6\x44\x52\x47\x8e\xe6\x43\x22\x12\x78\x78\x17\xde\x05\x90\xa0\x4f\xfe\xab\x77\x7d\x36\xfe\x73\xd8\xd7\x16\x6c\x69\x77\x9e\x9d\x88\x1f\x4d\x3b\x59\x10\xd3\xc2\x0b\xb8\x5c\x12\x66\x6a\xd3\x85\xe9\x07\x84\x9d\xea\x21\x9b\x19\xbf\xea\xc9\xae\x05\x63\x9e\x41\xfe\x0e\xe9\xea\x54\xff\x7f\xe3\xb6\x6b\x9c\xb9\x4b\xcf\x64\x74\x62\x13\x5d\x9b\xba\x0e\x23\x0e\x8c\x1b\xf4\x4f\x89\x35\x27\xa9\x91\x8e\xb9\x24\xa7\xfa\x8a\x92\x07\xcf\xf5\x59\x02\xf8\x81\x5a\x6c\x71\x6a\x91\x15\x9d\x12\x83\xdf\xfc\xa8\x51\x87\x32\x6a\xda\x46\x30\x35\x6d\x72\xfa\x4a\x21\x62\x94\xd9\xa4\xb3\x5e\xb7\x7a\x26\x33\x5b\xef\xdd\x80\x21\xd6\xa7\x27\x0d\xae\x00\xd7\x49\x5b\x00\x08\x60\x9b\x3a\xf7\x9a\x4f\xec\x53\x9d\x02\x2d\x5d\x63\x8f\x1e\x30\x40\x97\xe6\x9c\xb4\x3d\x67\xae\x6b\x0b\x9f\xcc\x4e\xf5\xf6\xcc\x5c\x21\x40\x0b\xdb\x72\x43\x03\xf6\x68\x93\x60\x41\x08\x53\x08\x18\xf9\xc8\xda\xd3\x20\x88\xc6\xc3\x75\x9b\x3a\x16\xf9\xd8\xc2\x56\x89\x21\x98\xfa\xd4\x63\xc9\x21\x1f\xcc\x95\x29\x5a\xf5\xac\x82\xb5\xc0\x9f\x02\xa2\x0f\x41\xdb\x47\xd5\xfa\x04\xae\x5e\xb7\x5e\xb5\x5e\xfd\xa2\x1a\x5a\x4b\xea\xb4\x3e\x00\x4d\x0b\x04\x37\x96\x26\x75\x04\xfc\x7a\x4d\x67\x5a\x6b\xdc\x7d\xf7\xae\xdf\x9b\x50\xe7\xe9\x09\xe0\x24\x33\x62\xc4\x7a\x4d\xec\x00\x34\x04\x14\xda\x4b\x6a\xdf\xcb\x4e\xde\xe1\x58\x4f\x4f\x8a\xdf\xb6\x60\x8d\x9b\x43\x5b\xd9\xc3\xc9\xc4\xb5\x1e\x25\x80\x63\xae\xb4\xa9\x6d\x06\xc1\xa9\x0e\x97\x13\xd3\xd7\xc4\x8f\x61\x91\x99\x19\xda\x4c\xdd\xce\xe8\x47\x62\x19\xcc\xf5\x74\xcd\x77\x61\xee\x10\x9a\xce\xc1\x42\x60\x0a\x04\x2a\x40\x66\xd1\x08\x19\x9a\x01\x88\x43\x60\xa4\x1d\x52\x2b\x82\x49\x43\x49\xe4\xc8\x18\xf1\x13\x30\x85\x50\x13\xdf\x74\xac\x14\x10\x80\x99\x1a\xb5\x4e\xf5\x85\x34\x99\x68\xf2\xa4\x46\x3d\xdb\x9c\x92\x25\x37\xc7\x89\xcb\x98\xbb\x94\xed\xcc\x9d\xcf\x51\x08\xcf\xf5\xdc\x15\x50\x96\xad\x3e\x9d\xcf\x89\x8f\xe8\xa0\x51\x9b\xb9\xd3\x50\x4d\x4d\x24\xce\xa9\xfe\xdc\xa2\x01\x40\x4e\x8c\xf4\xe0\xc8\xee\xfd\xd0\x71\xa8\x33\xd7\x94\x39\xf7\x06\xa3\xf1\xcd\xe0\x2d\xce\x49\xde\xc2\x4f\xda\x66\x4a\xea\x36\x88\x9d\x6a\x08\x3c\xd3\xe1\x22\x66\xa9\xa6\x87\x21\x58\x42\xc5\x69\x34\x5c\x97\x88\x43\x2a\x72\xea\xda\xb6\xe9\x05\xe8\xd9\x6a\xb2\x44\x83\x96\x05\xc8\xcd\x08\x62\x09\x3d\x46\x97\xc4\xf0\x4c\x1f\xe4\xcd\xe1\xd0\x3b\xa2\xff\xbf\x9d\x49\xe0\xfd\x16\xf3\x2f\x5a\x63\x1d\xdc\xf2\x7b\xd4\x40\x9a\xf7\x22\x25\x84\x76\xc2\x14\x14\x93\xf0\x93\x35\x06\x9b\x72\x52\xd4\xd3\x33\xa6\x83\x9e\x1a\x93\x1e\x0c\x91\xac\x4d\x8b\x47\xdb\xe6\xe6\xd1\x17\xdd\xfc\xe8\x93\x76\x68\x57\xe2\x58\x5d\x82\xa5\x2d\x58\x01\xfb\x45\x84\x53\x40\x29\xdc\x36\xd8\x84\x41\x1d\x08\x6b\xa4\x5c\x2b\x12\x75\xbe\x91\x7b\x8f\xf0\x97\xe7\xe8\xd8\x1d\xfc\x3f\x63\x90\x4a\xbc\xa2\xf1\x5b\x91\x7a\x10\x36\xe1\xbf\x7d\xa2\x5c\x41\x2c\x7f\xbe\x32\xe7\x10\x0a\x58\x65\xbc\xd9\xd9\x29\x82\x4a\x28\xdf\x9c\x32\xba\x22\x79\xbd\x2b\x26\x30\x57\x06\x6f\xda\xed\x87\x87\x87\x16\x38\xb2\x0f\xff\x5a\x53\x77\xd9\x16\xc9\x0a\x42\xbb\x4d\xcc\x80\x04\x6d\xdb\x64\x24\xc0\xfc\x82\xc9\x0b\x52\x24\xf1\x03\x88\x96\x51\x5c\xb8\xeb\xdf\x8c\x06\xd7\x57\x18\x17\xae\x47\xe3\xfe\xd5\x38\x27\xcf\x66\x2b\x4b\xb9\x49\xe2\xe6\xa4\x0d\x36\x20\x2f\x95\xcb\xf2\xb8\x5d\x1c\x99\x35\xcf\xb4\x2c\x88\x57\x18\xdb\x03\xb2\x02\x09\x1e\x83\x45\x61\x48\xf7\xdd\x87\x92\x30\x3e\xb1\xdd\xe9\x3d\x64\x7e\xdb\x58\x5a\xc6\x6b\x75\xe1\xce\x66\x90\x0c\x8d\x57\xa5\x71\x1d\xfc\x9e\xd8\xaf\x72\x5e\x60\x4e\x88\x9d\x8d\x2a\x86\x68\xe5\x23\x78\xba\xc0\x08\x3b\x61\x8e\xc1\x49\xeb\x10\xab\x21\x32\x5b\xe1\x72\xf9\xb8\x24\x4b\x90\x70\x46\xe7\xd3\x05\x99\xde\x4f\xdc\x8f\xbc\xd3\x08\x30\xeb\x3f\x8f\x3a\x8b\x66\x57\x09\x03\x58\x45\x42\x12\xc8\x79\x2e\x26\x7f\x6b\xfa\xcc\xb4\x31\x66\x7e\xff\x21\x80\x59\x14\x73\x78\x66\x53\x50\x58\xeb\x3d\xb5\x88\xc0\x7b\xd9\xbf\x7c\x09\x75\x8b\x30\x21\x95\x8b\x95\xf1\x02\x75\xbd\x73\x49\x96\xae\xff\x58\x60\xbb\x27\xd4\xf1\x42\x26\x62\x7d\x89\x20\x59\xa5\xc4\x3d\xa2\x20\x89\xef\x4d\x9f\x9a\xc6\x82\x5a\x16\x81\x8a\x82\xf9\x21\x66\x46\x7e\x97\xb3\x30\xd4\x6b\xa6\x51\x30\xb2\x7f\x62\x99\xb0\x9e\xb2\xd0\x78\x66\x14\xe1\x48\xef\x02\x63\x05\xb5\x47\xac\x0a\xea\xe9\x52\x28\x45\x15\x2c\x62\xa9\xe8\x2c\x5c\x9f\xfe\x83\x3e\x61\x1b\xbc\x79\xe2\xfa\x7c\xee\x79\xbd\xc0\x9b\x0a\x30\xa4\x0d\x19\x81\x8c\xb9\xef\x86\x9e\x81\xde\x44\xb2\x55\x4a\xd1\x18\x34\x33\x3e\x44\x8b\xae\x8c\x20\x5b\x9f\x4c\x42\x60\xc2\x09\x4a\xd0\x65\x9d\x05\x10\x71\x64\xaa\x74\x4b\x3b\x4f\xc6\x0f\x4a\x71\x46\x06\x90\x99\xe6\xce\x7b\xae\xd5\x42\x93\xa9\xc8\x11\x9f\x52\xc8\x55\x5b\x5c\x69\xf4\x47\x77\x58\xee\x45\x30\xb9\x24\x78\x30\xbd\x46\x02\x10\x0d\x87\x3e\x7b\xb6\x51\x8a\x5c\x01\xb2\xbd\x63\xb3\x31\xac\xd7\x0f\x94\x2d\xd2\x82\xde\x90\x99\x0f\x2b\x10\xb0\xdc\xa7\xa7\xf5\x9a\x91\xa5\x87\xf9\x42\xd3\x41\x55\x10\x9c\x83\x37\x6f\x7c\x01\xa0\x6b\x2d\x04\xe0\x3a\x28\xa1\x7f\xd2\x46\x9a\xf9\xac\x97\x03\x2e\x6a\xda\xe2\x94\x35\xdd\xb1\xae\x23\x46\xe5\x21\x90\x32\x98\x89\xcb\xcd\x4e\xa1\x36\xc4\xc5\x5f\x00\x26\xa0\x50\x2b\xf9\xd2\xb1\xaa\xdc\xd9\x02\xb9\xa0\x5e\x2e\x4a\x6d\xff\x7b\xdc\x54\x46\x67\xe5\x99\x4c\xf5\x1d\x2a\x91\x0d\xce\xcb\x3d\x90\xce\xe2\x6a\x58\x0e\x1c\x9b\x93\xc1\x79\x6b\x8c\x95\x4e\x6e\x51\xc3\xb9\xca\x24\xb7\xbc\x68\x5f\x71\x6e\x8b\xe6\xaa\x49\x6a\xe3\x13\xb1\x97\xcc\xf6\xa5\xa6\x31\x90\x99\x3a\x79\x43\xcf\x4d\xea\x81\xf2\xd5\x66\x8f\xe9\x7f\x04\x47\xb6\x30\x24\x09\x8f\x81\x65\x3a\xde\x58\x45\x3e\x53\x57\x80\x8c\x8f\x09\x52\xb8\x26\x1c\x9c\x3f\x3d\x7d\x46\x39\x0c\xd9\x39\x48\x0a\x2b\x5a\x48\x63\x96\x28\xb6\xa4\xc4\x12\x8e\xce\x8c\x00\xd8\x9d\x2e\x94\x21\x9a\x13\x74\xc4\x68\x03\xe0\x7c\xdc\x7d\x3b\x6a\xd1\xf3\x61\xf7\xec\xf7\xfe\x78\xd4\xba\xa5\x0e\x2b\xf4\x27\x8e\xd7\x8c\x27\xd1\x33\xa7\xf7\x84\x01\xfd\xa1\xb8\x28\x5c\x83\x96\xad\x6e\x1b\xb1\xd8\xbf\xb9\xb9\xbe\xa9\xc1\x21\xf1\x7d\xd7\x07\x06\xfb\xfc\x77\x0f\xfc\xc9\x24\xb0\x85\xcd\xb7\x7f\x8e\xfb\x35\xb8\x9c\x3c\xc2\xda\x58\xef\xbc\xc5\x9f\x5a\x3c\xe6\xd7\xf2\x7b\xa9\x74\xe2\x99\x4d\xc8\x0f\xb2\xaa\x8a\x35\xe9\xf9\x85\xd6\xf3\xb2\x28\x38\x88\xac\xc8\xbb\x21\x34\x94\x04\x71\xa9\x57\xb1\x49\x50\x6a\xa1\x32\xb5\xee\x6a\xcf\x71\xc1\x15\x49\x5c\xa5\xec\x8a\x80\xff\x6a\x50\x7d\xa5\xd4\x2c\xcd\xb3\x86\x96\x13\x0e\x70\x28\x25\x4b\x12\xd5\x74\xbc\xcd\x21\x93\x2a\x16\xd2\x56\xd3\xb0\x80\xdd\x59\xc1\xc2\xb3\x6a\xe8\x37\xf6\xdc\x43\xa9\x57\x50\xa8\xa6\xdd\x2d\x71\x24\xa9\x5c\x2e\x69\x35\xdd\x72\xd0\x26\xaa\xdd\xd7\xca\xe1\xf5\x71\x57\x0e\x53\x2f\x2c\x5f\x3a\x44\x9d\x87\x5a\x3b\x9c\x0d\x6f\xcb\x17\x0f\x40\x5d\xef\x00\x44\x85\x45\x42\x81\x14\x5f\xf1\x2a\x21\x9e\x96\x26\xcb\x04\xa1\xf3\x6f\x3b\x60\x55\x77\xc0\xb8\x19\x7e\xe6\x2b\x0a\xe9\x47\x65\x4b\x8a\x46\x22\x94\xae\x29\x80\xd8\x67\xb5\xa8\xe0\xfc\x7c\xae\x1b\x63\xa8\xfa\x7a\x5e\x5a\xd7\x3f\xa3\x3c\x07\xa4\xaa\xe4\x38\x00\xfb\xf7\x6c\x8c\x59\x1b\x36\xc6\xac\x03\x6f\x8c\xf5\x36\x6c\x8c\x59\x85\x1b\x63\xbd\x3a\x1b\x63\x79\xd1\xbe\xe2\x94\x67\xed\xb2\x31\xd6\xfb\xb6\x31\xf6\x65\x6c\x8c\xf5\x36\x6e\x8c\x59\xfb\xdc\x18\xeb\x7d\x5e\x1b\x63\xbd\xcf\x6e\x63\xcc\xda\xbc\xeb\xd4\x13\xcb\x30\xeb\x7c\x70\x75\xdd\xab\xbe\x9f\x63\x81\x58\xae\x85\x1b\x3a\x03\xfe\xdb\x7c\xd7\xc9\xaa\xb4\xeb\x14\xb1\x59\x6b\xd7\xc9\xfa\xec\x76\x9d\x22\xbd\x25\xc4\x2f\x59\xae\x17\xcd\x4c\xd9\x7a\xbd\xd7\x6c\xbd\x9e\x25\xb1\x71\xc1\x5e\xd9\x52\x12\x6f\xb0\x49\x69\xab\x94\x33\x0a\x76\xc7\xed\x10\x2b\xb3\x1d\x52\x41\xbf\xdb\xb7\x43\x76\x55\x6f\x85\xed\x90\xaa\x06\x9e\x54\x6e\xe5\xed\x10\xeb\x48\xdb\x21\xa9\x77\x92\xe2\xcb\x0a\x2f\x89\x36\x78\xeb\xe8\xd7\xcc\x5b\x47\x47\xde\x70\xf1\x82\xf2\x8a\x54\xf5\x1d\xaa\x22\x1d\x8e\xca\x2b\x52\x7c\x05\x6f\xe8\xbb\x53\x12\x04\x85\x21\x2f\x5b\x7e\xe6\xe5\xf8\x8a\xcb\xcf\x68\x62\x9a\x94\x9f\x5c\xeb\xcd\xca\x4f\xf1\xc6\x66\xd9\x5e\x8b\x86\x85\x4c\xe1\x0b\xa2\x79\x5b\xae\x57\x8e\x0c\x47\x3b\x97\x23\x5f\x44\x5d\x5c\xbe\xeb\xe3\x95\xa3\xdc\x67\xb5\x6c\x83\xbb\x69\x65\x25\x73\xa9\x6d\x0d\x47\x8e\xcb\x7a\x64\xea\x13\x93\x97\xca\x9b\xaa\x66\x2f\x40\x1a\xf5\x85\x31\x6a\xc9\xb1\x74\x7d\xd2\x50\x8e\xb8\xfc\xdf\x2c\x06\x92\xd8\x79\x01\x30\x1c\x79\x76\x18\x8c\xc1\x6f\xf6\x5e\xfe\x1f\x6c\x0b\xc9\x0b\x6a\x86\x9d\x9a\x01\x27\xaa\x0c\xbc\x4a\x45\x81\x17\x7c\x2b\x07\x12\x00\x3b\x96\x03\xab\x79\x79\x39\xa0\xfa\x0e\x55\x0e\xdc\xbd\x2b\x2f\x07\xf0\xf5\xf9\x3b\xf1\xf6\xbc\x36\xb7\xdd\x09\x1e\xc5\x62\x26\x0b\xab\x94\x06\x79\x99\xbe\xe2\xd2\x20\x9a\xa4\x26\xa5\x01\x9f\x81\x2f\xab\x34\xb8\x7b\xf7\x6f\x2f\x0d\x56\x8d\x37\xd2\xbe\x94\x8c\xb3\xaa\x6b\xcd\x35\xed\x38\xca\x38\xab\x79\x95\x8c\xb3\x9a\x7f\xa2\x8c\xb3\xf1\x0c\x67\xe7\xd9\xca\xf4\x35\xd4\x84\x76\xaa\x8e\xea\x3c\x3d\xfd\xf6\x2c\x7d\x92\x52\x1c\xa0\x3c\x69\x8b\xa3\xb6\xeb\x75\xfb\x87\x67\x3f\xb4\xd1\x41\x84\x6c\x05\x8f\x67\x6c\xea\xe9\x08\xf0\xe2\x4c\x7b\x73\xaa\xb9\xbe\xd6\x3a\xbb\xe8\x8e\x46\x57\xdd\xcb\xbe\xa6\xf3\x59\x81\x6e\x69\x66\x40\x76\xd0\xeb\x32\xe6\x43\x1c\xd7\x70\xc8\xd3\xd3\x8e\x81\x4f\xcd\x37\x50\x17\xc4\xae\xf0\xb0\x24\xea\x9d\x53\xec\x28\xcf\x16\xbe\x03\xf4\xcf\x5d\x5f\x32\x10\xd1\x47\x09\xb0\xeb\xf2\x8f\x11\x1e\x9e\x15\xdd\x58\x89\x89\xba\x2b\xf2\x01\x89\xab\x8a\x52\xbc\x10\xd2\x79\xc0\xf5\x22\x22\xd3\xf5\x5d\xff\xe6\x66\xd0\xeb\x63\x8b\x08\x38\xfc\x94\xeb\x16\xb5\xad\xd7\x90\xd0\xe6\x44\x7b\x41\x7f\xd4\x5e\x4c\xb1\x66\x05\x58\x69\xcd\xc3\xdb\xd6\x05\x0d\x90\x3f\xe6\xaf\xd7\xf7\xe4\x51\xe8\xc0\x0b\x0d\x20\x3d\x79\x34\xae\x74\x31\xa4\x75\x05\xc2\xe0\xdc\x32\x4b\x39\x49\x1c\x6c\x35\xc7\x7d\xf0\xf1\xc4\x01\x30\xa2\x80\x4f\xda\xcc\x2a\x1d\x10\x1d\x17\x46\x97\x90\x1a\x54\x63\x6f\x03\xe2\x9f\xe1\x00\xae\xbd\xb8\x2d\xe9\x05\x8d\x91\x8f\x1e\x03\x89\x5b\xeb\x24\xda\xf6\x82\x7b\x60\xd9\x24\xcb\x38\xb6\xe5\x91\xc3\xff\x7e\x27\xb2\x83\xf4\x4f\x15\xab\x10\x81\x01\xe7\x0c\x2f\x22\x2e\xf1\xe6\x95\x86\xc7\x60\x3d\xa2\x22\x0c\x17\x24\x71\xd0\x1d\x08\x2b\xef\x67\x8b\x38\x10\x24\xae\xc1\xce\xca\x27\x18\x27\x42\x08\x2f\x61\x42\x87\x82\x52\xbe\x4b\x07\xa8\xea\xf8\x40\xf7\xfb\x44\x87\xea\xae\x83\x8f\x4f\x84\x98\x96\xe8\xf0\x37\xe3\xc1\x6b\xcb\xb3\x64\xee\x97\x22\x32\x33\x15\xec\xb8\xc6\xeb\xf8\xb7\xda\x68\xac\xec\xe4\xe7\xca\xc9\xdf\x8f\x2f\x2f\xce\xaf\x6f\x34\x2c\x23\xb6\x87\xcd\xc8\xff\x61\x99\x79\x1f\xfb\x7e\xef\x9c\x93\x2f\xf2\x7f\xb5\x5b\x2a\x62\x80\x45\x7d\x71\x78\x9c\x23\x68\xf5\xa8\x7f\xc5\x0f\x67\x67\xbc\x24\x0e\x02\x1b\x54\xc7\xa3\xe4\xf7\xf8\xa3\x81\x38\x40\xeb\xd5\x6b\x24\x67\x08\x7a\x16\x59\xa5\x28\x91\x15\x52\x7a\x59\x18\x4d\x9a\x91\xfb\xbf\x24\xb5\x42\xb9\x8a\xa9\x25\x43\x00\xa8\x9b\x0f\xe8\xae\x4c\x6a\x57\x86\x06\xd7\x01\xb3\x50\xc7\xbe\x43\x6f\x23\xe3\x61\x40\x3c\xe2\x4f\xf9\x01\xf2\xef\xe3\x1b\x94\x20\xc2\x36\x14\x6d\x9c\x5f\xc4\xb7\x3d\x76\x29\x56\xc6\x2e\x33\x23\xc6\x77\x0a\x46\xe9\xbd\xf2\xed\x09\xbc\x51\xc0\x92\x8e\xf1\xe2\x22\xb6\xdd\x0b\xea\xdc\x63\xd4\x8e\xa3\x81\xfa\x46\x42\xb2\x18\x92\x8f\xb6\x80\xa9\x0b\xb0\xf6\xf3\x51\xeb\x3d\xdc\x62\xd1\xa0\x25\x62\xb7\xec\x52\x69\x41\xd3\x3a\x3d\xfe\x4d\x0e\x11\x47\x0a\x00\x4d\x9f\xb0\x04\x74\xaa\xd8\xca\x7e\x67\xc0\xdc\x12\xc3\xb6\x73\x7d\x39\x2c\xe5\x1a\xba\x12\x7c\x5c\xba\xa1\xc3\x88\x95\x4d\x4d\x0a\x70\xff\x5c\x17\xaf\xb6\x32\xec\x77\xef\xba\x83\x0b\x25\x41\x9a\x2b\xd1\xa5\x32\x26\x77\x26\xa9\xf3\x62\xc0\x84\x04\x47\x63\xff\x76\xd4\xef\x45\xfa\x4f\x73\xc5\xbb\xa2\x62\x02\xbd\x5b\x71\x5f\x08\x98\xd4\xff\xd1\xd8\x1f\x5f\x8f\xbb\x25\xda\x17\x5d\x4a\x9f\x3c\x22\x14\x6b\x5f\x02\x36\xd4\x7e\xb4\x26\x6e\x92\x68\x53\x09\x72\xf7\x6c\x2b\x1f\x99\x7e\xb2\x74\x2b\xe8\x17\xe7\x5b\xf9\xe8\xf7\x78\x09\x57\x12\x3c\x56\xc6\x2d\x21\x57\x37\xe5\x0e\x66\x3e\x21\xd5\xa1\xc3\xbd\xe6\x5c\x44\xd7\x3c\xe9\x8a\x57\x3f\xf6\x94\x75\x53\x4f\xff\x77\x5f\x08\x64\xd3\x91\xcc\x80\x9b\x73\x96\x4a\x38\x95\xa3\x94\x08\xf1\x95\xc1\x79\x48\xad\x0c\x2d\x22\xd8\x8e\x95\x7d\x3a\x46\xec\x1a\x71\xe8\xb1\xeb\x7b\x3a\x8b\xc3\xcd\xa0\xbc\xba\xa7\xa9\xea\x5e\xfa\x23\x9d\xb5\x52\x41\xa6\x41\x54\xa1\xaa\xb0\x4e\xa3\xac\xe4\xdd\x00\xdb\x23\x36\x33\x07\x4e\x1d\xe8\xeb\x90\x55\x04\xaf\x8c\x37\x81\x72\x27\x1f\xa5\x99\xca\x78\xe7\xb5\xfa\x00\x9c\xcd\x9f\x99\xa5\x6e\x99\x5f\x0e\xab\x2f\xeb\xbc\x1d\x8c\x47\x1a\x44\x33\x2d\xc0\x0d\x78\x0b\xdf\x42\x2b\x58\x24\x27\x93\x3a\xed\x4c\x4e\xda\xb4\x83\xdf\x26\x6a\xb4\x10\x2f\xa5\x0c\xda\x3d\x12\x69\x86\xf1\x40\xe3\xef\x07\x69\x4b\xd7\x0a\x6d\x57\xfb\xe9\x5d\x25\xd1\xdf\x22\xfd\xef\x7e\x7a\x77\x18\x06\xaa\x68\x60\x1b\x07\xcd\x82\x1b\xdd\x67\x35\x15\x9d\xc7\xfb\x44\xc1\x4d\x50\x2f\x8e\x6e\xf2\x54\xe1\x01\xc2\x9b\xc4\xfc\x2d\xbe\xe5\x0e\x64\x7e\xd2\x00\x97\x8e\x6d\xc9\x2f\xeb\xa5\x9c\x6c\xe7\x98\x92\x89\x64\x87\x23\x94\x0a\x58\xa5\x64\x76\x8f\x51\xe9\xb8\xd4\x84\x50\xd3\x50\x94\x8c\x1e\xbb\xc7\x22\x75\xfa\xfa\x13\x05\x23\x49\xbe\x38\x1a\xa9\x63\xe4\x07\x08\x47\x0a\xf5\xb7\x78\x94\x3f\x82\xff\x2d\x20\xed\x93\x90\x28\x66\x8e\x15\x96\x72\xd4\x8e\x1c\x9c\x52\xe1\x64\xd7\xe8\xb4\x24\xcb\xfd\x3f\xc5\x05\xa4\x71\x00\xba\xec\x5f\x16\x85\x1e\xfc\x64\x98\x08\x3a\xf7\x14\x0c\x84\x0f\x6a\xfd\x4e\x91\xed\x38\xea\x24\x1a\xb7\xbb\x2b\xc2\x9e\x57\xdc\x80\x41\xd8\xbd\x3d\xf2\x90\xc8\x1a\x6d\xbe\xe0\xd8\xfd\x3d\xf0\x88\x3e\xb0\x76\xc4\xa7\xaf\x7a\x07\x95\x5e\x01\x6c\xc3\x8e\xc9\xde\xb7\x4a\x94\x59\xef\xea\x1e\x5e\x70\xb4\xa4\xed\xf9\xee\x34\xf6\x9a\xe1\x88\xf3\x5a\xe4\x39\x9e\xca\xd6\x1e\x45\xbf\xc1\x71\xad\xe1\xa0\x87\x73\xeb\xcc\x37\xbc\x07\xa1\x77\x70\xef\x5c\x81\x6f\xf5\x92\x08\xf8\x36\x03\x9c\x7c\x1c\xa4\xd5\xaf\x0c\xbc\x00\xdc\xc7\x2f\x64\x5e\xde\xe3\x63\xfc\xed\x65\x42\x2c\x8c\x4f\x5d\x9f\xb2\xc7\xea\x23\xae\xe8\x74\x7b\x94\x88\xa0\x47\xf4\x9f\x1a\xd0\x37\x24\xa0\x16\x71\x36\x54\x22\x18\x24\x70\x87\x52\x8d\x18\xcb\x2f\x69\x97\xee\x68\x37\x50\xf4\x4f\x5c\xd1\x58\x79\x6d\x52\x74\xaa\x1e\xdb\x29\xf0\xa8\x17\x90\x9b\x3c\x63\x7d\xbd\xd7\x67\xac\xa9\x6d\xd7\xf4\x13\xa7\xe1\x08\x14\x50\xf8\xbc\x4c\xf4\x44\x0f\xc0\xe0\x26\x7a\x5a\x56\x04\x77\xd0\xa7\x65\x59\x9e\x6f\x4b\x79\xbe\x4d\xf2\x7c\x5b\xce\xf3\xed\x21\x78\x4e\x3d\x15\xce\xf1\x3c\xea\xdf\x14\x3d\xd8\x93\x3d\xea\x49\x1d\xde\x14\x3e\x96\x54\x70\x87\x7c\xa8\x9a\xb3\x8d\x9b\x41\x99\x6d\x40\x4f\x6c\x1b\x31\xc7\x85\x70\x47\xb5\x8d\xab\xc1\x59\xbf\x58\xcf\xbc\x47\xa9\xee\x6a\x50\xca\xb3\x80\x3b\xa6\x9e\xef\x06\x37\xe3\x62\x9e\x79\x8f\x62\x03\x6f\x4a\x6c\x43\xc0\x1d\x93\xe7\x9b\xfe\xa8\xc4\x36\xb0\x27\x9a\x6e\xb8\x29\xf3\x41\x0e\x77\x18\xdb\x50\xf9\x24\x1e\x9e\x66\x7e\x3c\xb8\x2c\x31\x12\xde\x13\x3d\x64\x87\x9b\x12\x85\x0b\xb8\x3d\x2b\x7c\x63\x00\xc1\xa4\x51\x62\xd8\xdd\x04\xcf\x67\xd7\x97\x97\xdd\xab\x5e\xfe\xad\x12\x05\xf7\x29\xde\x0b\x90\x35\xe3\xae\xa5\x67\x62\xc5\x01\x88\xa4\x84\x42\xf2\xf8\xed\xdd\x3b\xd3\x0e\xa1\x78\x88\x5e\x21\xac\x8e\x7e\x35\xe7\x9b\x5c\x3c\x25\xfb\x1a\xd4\x96\xf8\xe6\xb7\x68\x8a\xca\x10\xd7\x46\xac\xa7\xfa\xcf\xf1\x99\x2d\x79\xfe\x84\x7f\x9f\x32\x55\x39\xd4\x22\x1d\x15\xd5\x3b\x57\xcd\x4b\x73\xba\x88\x8b\x02\xc9\xdd\x25\x34\x22\xc5\xa2\xea\x59\xfe\xf9\x09\x59\x42\x87\x21\xaf\x8e\x10\x4b\xeb\x96\x17\xba\x99\x22\xb7\x5e\xd9\xf5\x4b\x8c\x3f\x8b\xf9\x65\x61\x0d\x8d\x2b\x40\x84\xb8\x32\x33\x35\x60\x16\x60\xe8\xbb\x2b\xa8\x2b\xfd\x12\xa0\x3a\x4c\xfe\x1a\x33\x89\xc7\x87\x48\x92\x4b\x79\x39\xc2\xf6\x32\x8e\xeb\xd0\xfa\xf9\x7f\x62\x62\x33\x6a\x13\xcf\x64\x8b\x02\x7a\x72\xde\x10\xe2\x2f\x04\xd9\x5c\x94\x56\x30\x30\xf9\x99\x8c\x0a\xeb\xb6\xd2\xa3\x14\x49\x4b\xb7\x5e\x96\x1c\xb0\xc9\x38\x93\x96\x42\xbd\x09\x3e\x0a\x11\x4d\x2b\x6e\x75\x00\x23\x2a\xa9\xc5\xd9\x0d\x79\x2a\xa3\xf9\xb2\x9f\x66\xd7\xe8\x1d\x5c\x45\x64\xdb\x3c\x69\x8e\xd9\x76\x6e\x50\xd9\x46\x8b\xfa\x64\xca\xf8\xdf\xcd\xd8\x6d\x55\x1f\xcd\x6b\xe3\xd8\xaa\x0e\x44\xc1\xf0\xc4\xd1\x25\x7e\x8c\x42\x1e\x5e\x4a\x5c\x1b\xc1\x52\x93\x03\x44\x83\xd0\x5d\x72\x93\x2f\x09\x6d\x5a\x16\xfe\x39\x2d\x79\x26\x2b\xf1\x56\x7d\xea\x08\x1c\x3f\x5a\x85\x67\x25\x7d\xd7\x8e\xb0\x73\x88\xe4\xdf\x32\xd3\x35\xfe\xc7\xaf\x16\xae\x6d\xe1\x5f\xad\xc2\xe8\x2b\xce\x40\x49\x93\x4d\x7c\xff\x42\xb4\x47\x9f\xbb\x18\x12\x58\x0e\xa3\xbd\xea\xda\x0a\x93\x03\x1f\x2c\x1a\x23\xf3\xd2\x51\x69\xfc\x48\x8d\x6c\xf8\x4f\x00\x00\x00\xff\xff\x0a\xd7\x03\x02\x86\x6e\x00\x00")

func index_html_bytes() ([]byte, error) {
	return bindata_read(
		_index_html,
		"index.html",
	)
}

func index_html() (*asset, error) {
	bytes, err := index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "index.html", size: 28294, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"index.html": &_bintree_t{index_html, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

