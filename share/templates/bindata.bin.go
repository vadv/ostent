// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x6f\xdb\x48\x92\xff\x3f\x9f\x82\xc7\xd9\x3d\x6c\x16\x2b\xea\x92\x9b\xbd\x0b\x32\xb6\x01\xdb\x92\x13\x61\x62\x5b\x67\xcb\xb9\x9b\xbf\x06\x94\xd8\x92\x3a\xa6\x48\x0e\xbb\x29\xc7\x23\xf8\xbb\x5f\x55\x3f\xf8\x26\x4d\x8a\xb4\xe3\x2c\x12\x20\x10\x1f\xdd\x55\xd5\xd5\xd5\xbf\xaa\x22\xab\xe9\x83\x7f\x1b\x5d\x9e\xce\x7e\x9b\x8e\x8d\x35\xdf\xb8\xaf\x8e\x0e\xc4\x8f\x61\xc0\x01\xb1\x1d\x38\xc0\xc3\x0d\xe1\xb6\xb1\x58\xdb\x21\x23\xfc\xd0\x8c\xf8\x72\xf0\xce\x4c\xdf\x5a\x73\x1e\x0c\xc8\x1f\x11\xdd\x1e\x9a\xff\x37\xb8\x39\x1e\x9c\xfa\x9b\xc0\xe6\x74\xee\x12\xd3\x58\xf8\x1e\x27\x1e\xf4\x9b\x8c\x0f\x89\xb3\x22\x99\x9e\x9e\xbd\x21\x87\xe6\x96\x92\xbb\xc0\x0f\x79\xaa\xf1\x1d\x75\xf8\xfa\xd0\x21\x5b\xba\x20\x03\x71\xf2\x0f\x83\x7a\x94\x53\xdb\x1d\xb0\x85\xed\x92\xc3\x37\x9a\x10\xa7\xdc\x25\xe2\x18\xce\x76\x3b\x6b\x64\x73\xdb\xfa\xe8\x33\x8e\xc4\x1f\x1e\x0c\x38\x02\x92\x07\xc3\xa4\xdd\xd1\x81\x4b\xbd\x5b\x23\x24\xee\xa1\x49\x81\xa5\x69\xf0\xfb\x00\xe4\xa0\x1b\x7b\x45\x86\x81\xb7\x32\x8d\x75\x48\x96\x87\xe6\x70\x69\x6f\xb1\x81\x85\xd7\x0a\x5d\x19\xbf\x77\x09\x5b\x13\xc2\x35\x01\x4e\xbe\xf2\xe1\x82\xb1\xb8\x3f\x1c\x0f\xa9\xe7\x90\xaf\x16\x5e\x55\x14\xd8\x22\xa4\x01\x4f\x77\xf9\x62\x6f\x6d\x79\xd5\xcc\xeb\xd9\x60\xe1\x02\x08\x7d\x61\xc3\x10\x35\x1c\x12\x38\x7a\x6b\xbd\xb1\xde\xbc\xd3\x17\xac\x0d\xf5\xac\x2f\xc0\xd3\x81\x81\x0f\x36\x36\xf5\x64\xfb\xdd\x8e\x2e\x0d\x6b\x76\xfc\xe1\xc3\x78\x34\xa7\xde\xc3\x03\xb4\x53\xc2\xc8\x1e\xbb\x1d\x71\x19\x68\x08\x38\x0c\x37\xd4\xbd\x55\x37\xc5\x0d\xcf\x79\x78\x30\xb5\x52\x0f\x86\x52\x38\x25\xff\x50\x99\xc6\xd1\xc1\xdc\x77\xee\xd5\x45\xcf\xde\x1a\x0b\xd7\x66\xec\xd0\x84\xc3\xb9\x1d\x1a\xf2\x67\xe0\x90\xa5\x1d\xb9\x5c\x9f\x2e\xe9\x57\xe2\x0c\xb8\x1f\x98\x46\xe8\xc3\x34\x62\x6b\xba\x02\x63\x81\x69\x88\xf9\x39\x34\x26\x86\x16\x01\x43\x22\xd0\xd3\x8d\xa8\xa3\xdb\xe4\x5a\x39\xa1\x1f\x38\xfe\x9d\xa7\xb9\xa0\x84\x24\x4c\x1a\x0b\x61\x23\xce\x7d\x2f\x2b\x24\x08\xb2\x5a\xb9\x04\xec\xce\x75\xed\x80\x11\x47\xcf\xa4\x6c\xac\x74\x2a\x1b\xa1\x2c\xb2\x95\xbe\x6c\x87\x2b\x9c\xa8\x9f\x14\xad\xf8\x76\x8a\xad\x98\xef\xc0\x8e\xd9\xb2\x70\xe0\x7b\xee\x7d\xb6\x09\x34\x9a\x49\x39\x12\x65\x80\xce\xa1\x5b\x0d\x25\xb4\xcb\x01\xb0\x2d\x90\x7a\x31\x3d\x87\x52\x89\x99\x49\xb0\x0d\xea\x24\xd3\x35\x0f\x6d\x0f\x54\x9e\x9b\x44\x3d\x29\x4a\xad\xaa\x51\x66\x26\x74\x53\xd3\xb0\x43\x6a\x0f\xc8\x57\xe0\xee\x10\xa0\xcc\xc3\x88\xc4\xab\x2f\x3f\x11\x68\x30\xc8\x7e\xad\xc0\xa1\x30\x8c\x22\x7a\x1c\x0c\xa1\x53\x7e\x5c\x76\x66\x48\x91\x5b\x18\xc0\x86\x78\x91\xb6\x6f\x79\x2c\xc4\x74\xed\x39\x71\x5d\xe2\xcc\xef\xf3\x2a\xc8\x71\x70\x69\x81\xa4\xb2\x68\x45\x34\x08\x09\x03\x50\xcb\x2c\x9b\xb8\x7b\x18\x79\x1e\xf5\x56\x07\x43\x97\x16\xe9\x36\xe8\x0f\x93\x54\x98\x11\x40\xa9\x7c\xbb\x94\xbe\x46\x93\xeb\xd9\xd5\xe4\x04\xd5\x65\x17\x4d\xa3\x20\xc6\x30\x72\x33\x1a\xcc\xe8\x38\x99\xa6\xfc\xb2\x4a\x20\x41\x5e\x30\x6a\xd6\x5d\x7a\x5a\x10\x9a\x54\x53\xf8\x29\xd1\x35\x32\xa3\x81\x99\x87\x86\x92\x31\xc7\x23\x9e\x4c\x71\xb0\x65\x0a\xce\xa9\xae\xa8\x5d\x3d\x3c\xdd\xc2\xb5\xcb\x38\x1b\xb9\xd5\xd0\x6a\x01\x14\x67\x2a\xe6\x0a\xdc\x0a\x77\x53\xe3\xfa\x74\x5c\x66\xf3\x25\xd3\x54\x54\xf3\x3e\xd6\x5f\x26\x4d\x47\xf3\x17\x24\xa2\x80\xd3\x0d\x29\x4c\x50\x4c\xbe\x21\x19\x05\x57\x92\x5a\x09\x4e\x95\xae\x8a\x8c\x3e\x6f\x44\xd7\xb2\x85\xa1\x74\x5a\x2a\x61\x76\x81\x94\xb7\x2c\x2e\xa3\x2a\x8b\xd7\x87\x21\x5d\xad\x79\x35\xd4\xd4\x99\x7d\x8a\xb6\x4b\x19\x1f\x50\x0f\xc2\x20\x52\xb9\xaa\x34\xe9\x0a\x9d\x4a\x78\xfe\x09\x83\x80\x72\xed\xe1\xad\x76\x1a\x7b\x8c\x57\xc0\xaa\x58\x05\xac\x5f\x4e\xdb\x55\x15\xa7\xad\xbd\x02\xb0\xe7\x4f\x61\x0a\xc5\x15\x63\xd8\x0b\x4e\xb7\x45\x17\x97\xf3\xc0\x5b\x12\x32\xb4\xfe\x0a\x1f\xbc\x8f\xdb\xc5\x6c\x80\xbd\x1f\x0e\xef\xee\xee\x2c\xf0\xa3\x21\xfc\xb7\x16\xfe\x66\x28\xe3\x70\x88\x5a\x5d\x62\x33\xc2\x86\xae\xcd\x09\x2b\xf3\x2a\x97\xd7\xb3\xf1\xc5\xac\xcc\x95\x74\x03\x1b\x3d\xd6\x27\x41\x1c\x45\xbc\x0f\xc8\xe9\x47\x8d\x82\x9a\x86\xa1\xcf\xe3\xab\xeb\xc9\xe5\xc5\xf3\xe0\x50\xce\x9d\xa7\x4e\xe1\x04\xb0\x42\x65\x0c\xda\x23\x89\x5c\xa0\x3c\xda\x37\x02\xdb\x71\x20\x94\xc1\x7c\x81\x91\x2d\x8c\xfb\x9e\xad\x4b\xd3\x84\xd0\xbf\xcb\xa7\x06\x48\x7b\x43\x36\x10\xa6\xcb\x3c\x54\x36\x9c\xbb\xfe\xe2\x16\xe3\xfd\xc1\xc6\x19\xbc\xd5\x07\xfe\x72\x09\x39\xd7\xe0\x4d\x26\x84\xd8\xed\x38\xd9\x04\xa8\x5f\xc3\x84\x2c\x06\xc4\x62\xef\xdf\xcb\x83\xdf\xc1\xf0\x89\x0b\xd4\x4d\xc3\xca\x3b\xcc\x8c\x5c\x19\x76\xff\x99\x8d\x50\x52\xcd\x04\xb9\x37\x05\x6c\x46\x23\xce\x47\x3d\xd2\xb4\x0d\xd1\x43\x18\x29\xe8\xc7\x98\x73\x88\xcb\x91\x95\x69\x2c\xfd\x10\xac\x38\xda\x6c\xee\xe9\x12\xd4\xb9\xa4\xab\xc5\x9a\x2c\x6e\xe7\xfe\x57\x71\x6f\xc0\x30\x75\xfd\x49\xdf\xab\x09\xfe\x90\xa6\x5c\x04\x92\xb4\xc8\x27\xc9\x1f\x86\xb9\xb4\x5d\x8c\xc6\xfe\xf6\x85\x41\x3a\x25\xed\xeb\xd4\xa5\x30\x39\xd6\x47\xea\x10\x49\x77\x72\xf6\x1a\x52\x6f\x89\x41\x3a\x9d\xd4\x08\x49\x97\x35\xa1\xa4\xa2\x34\xb3\xe7\x93\x33\x6b\x86\x29\x7b\x79\x54\x49\xbd\x20\xe2\x12\xca\xca\xc7\x9a\x57\x5b\x72\x47\x66\x78\xc9\xb9\x00\x8c\x35\x75\x1c\xe2\xc5\x48\x26\xce\x4a\x6c\x1f\x75\xff\xaa\x4c\x92\xbe\xd9\x09\xf3\xa8\x8c\x1d\xe3\xe9\xd3\x7c\xe3\xc9\x91\x04\x1f\x9f\x9b\x58\x50\xc9\x3b\x97\xf2\xa7\x79\x82\xd1\x6c\x34\x9b\xb5\x1f\xd2\x3f\x71\x8d\xba\x03\xbc\x5c\x8e\x60\x29\xbb\xc6\x46\x83\x55\xe8\x47\xc1\x00\x97\x32\x71\x2a\x70\x2a\xb3\x64\xc0\xee\x44\x17\x23\x3e\x1a\xb0\x4d\xce\x13\xc9\xd4\xb2\xc2\xa9\x17\xd6\x0e\x10\x12\xc4\xf4\xb3\x08\x18\x33\xf5\x2a\xfc\x74\x7a\x52\x73\x53\x57\xdd\xfe\xa3\x50\x62\x99\x7d\x34\x95\xa9\xc1\xea\x1a\x0b\x77\x8b\x68\x26\x57\x97\x43\x19\x9e\x38\x4d\xd6\xd7\xde\x23\xcb\xad\x4b\x29\x03\xc6\x88\x93\x33\x91\x01\xd5\x0e\xb8\x34\x91\xa8\xbd\xb5\x97\xf5\xec\x76\x77\x94\xaf\xb3\xca\xba\x22\x4b\x70\xb5\x6b\x94\xb2\x14\xc7\x43\x79\x5f\xe0\xb7\x52\x60\xb5\x4c\x43\x94\xa4\x64\x69\x14\x22\x6e\x74\x36\xa5\x46\x99\x0e\x31\xe8\x72\xc0\x40\xe0\xc5\x3a\x7e\x8e\x34\xc7\x35\x1d\xa7\x96\x67\xb3\xe3\x93\x6b\x8b\x9e\x4d\x8f\x4f\x7f\x1d\xcf\xae\xad\x1b\xea\xf1\xb2\xa5\x29\xe9\xda\xc9\xb4\x07\xf6\xe2\x96\xf0\xea\x45\x31\x95\xf7\xcb\x63\x80\xaa\x28\x60\x3f\xd9\xc7\x57\x57\x97\x57\x2d\x44\x27\x61\xe8\x87\xd5\x92\x8f\xc5\xed\x5e\x04\xd7\x81\x71\xbd\xfc\x27\xbf\xcd\xc6\x2d\xc4\x9f\xdf\x43\x10\x56\x29\xfd\x09\xde\x6d\x2f\x7c\x31\xfa\xaa\xcc\xc2\x4b\x9e\x52\xd5\xbb\x0f\x6d\x2a\x29\xf5\x80\x2a\x04\x08\x41\x5e\x97\x06\x9f\x52\x73\x7c\x5d\x86\x4f\xd2\x67\x8b\xdb\x80\x4e\x15\x0e\x46\xa9\x1d\x1d\x7b\x8d\xc9\x2b\xc7\xdf\x71\x81\xa8\x87\x97\x99\x11\xab\x70\xb0\xfc\x19\x48\x75\xbc\x17\xf7\xff\x5d\x85\x93\x22\xec\x2b\x3c\xf4\xac\x99\xa2\x44\xf7\xca\xd6\x5b\xa8\x3e\xb5\x9a\x9e\x4a\xf3\x8a\x45\x33\xc5\x3f\xb2\xba\x33\x7a\x97\xa3\xdd\x5b\xed\xb2\x7b\x0f\x5a\x97\x4b\xb4\x85\xd2\x13\x08\x78\x2a\x9d\x4b\x0e\xcd\x54\x5e\x0f\x48\x19\x8d\x8b\x91\xee\xad\x70\xd1\x7b\x6f\x7d\x97\x3d\x2e\xcf\x5e\xaa\x7c\xdc\xbb\x08\xa2\xda\x5c\xad\x5d\x6e\x06\xd4\x5e\x72\x6e\xe6\xd4\xe4\x66\xce\x13\xe7\x66\xa3\x9a\xdc\xcc\x69\x96\x9b\x8d\xda\xe4\x66\xc5\xb1\xfe\x4b\xe7\x66\x4e\x97\xdc\x6c\xf4\x23\x37\xfb\xce\x73\xb3\x51\x6d\x6e\x56\xb6\xbe\xf6\x1e\x59\x65\x6e\x36\xfa\x2e\x72\xb3\xd1\x0b\xcc\xcd\x9c\xfa\xfc\x66\x24\xdd\xb1\x73\x36\xb9\xb8\x1c\x35\x4f\x10\x1c\x18\x98\xef\xd4\x64\x08\x13\x71\xbb\x4b\x7e\xe3\x34\xca\x6f\x62\xf9\x5b\xe5\x37\xce\xf7\x96\xdf\xc4\xfa\x4e\x69\xa7\x22\xdc\x2b\x9b\xd1\xaa\x78\x6f\xb4\x5f\xbc\x97\x67\x51\x1b\xf0\x35\xb5\xb0\x54\xc4\xa7\x47\xbb\x67\xc8\xa7\xbb\x77\x8e\xb1\x9d\x5c\x8c\xdd\x40\xe9\x8f\xc7\xd8\x5d\x75\xde\x20\xc6\x6e\xb8\x28\x32\x1a\xef\x12\x63\x3b\xcf\x1f\x63\x67\xdf\xc1\xe8\x93\x26\x85\x56\x4d\xde\xb2\x04\xac\x2e\x70\x7f\x97\x7b\xc9\xd2\x32\x90\x0f\x58\x69\x1c\xff\xb4\x23\xda\xae\x9e\x70\x44\x55\xa9\x49\xd5\x90\x6a\xeb\x05\x75\x87\xad\x1d\x1a\x68\xcd\xc6\xa1\xa1\xec\xfa\xe1\xe1\x97\x7c\xe1\x9e\xaa\xd7\xc3\x12\x3e\x51\xed\xb9\xdb\x0d\xff\xfe\xea\xef\x43\xf4\xb2\x52\xc0\xa2\xc4\x0b\x97\x06\x26\xc8\x2a\x43\x13\x20\x3d\x19\x1d\x73\x1e\xc2\x72\x84\x13\xa1\x9c\x87\x87\x8e\xa1\x35\x88\xf1\x85\x7d\x3d\x75\x7d\x06\xfc\x05\x1f\x64\x28\x03\x32\x60\x78\xe6\x87\x8a\x63\x9a\x21\x8a\x85\x77\xcf\xff\xf7\x1a\xcb\x30\x65\x8b\x57\x32\x28\x9a\x81\x8e\x92\x00\xe8\x48\x01\x45\x93\xc1\x06\x11\x18\x04\x33\xb1\x8d\x08\x5b\xf0\x0c\x66\x58\x06\x22\x32\x1a\x11\x25\x93\xbb\x5d\x68\x7b\x2b\x62\xfc\x85\xfe\xc3\xf8\xcb\xc2\x0f\x89\xf1\xfe\x50\x43\xd7\xf4\xc6\xfa\x44\x19\x0a\xc0\xc3\xdd\xee\x96\xdc\x1b\x22\xb5\x05\x52\xf3\xfb\xc1\x85\x29\xdb\x5b\x17\x52\xda\x03\xee\x68\x13\xc3\x99\x95\x35\x1a\x86\xe7\xdf\x85\xb6\x2a\x8e\x00\xf1\xe3\x1e\x07\x43\xee\x54\xf6\x8a\xcb\x4b\x11\xa5\x12\x55\xe9\xee\x37\x8c\x84\xa7\xf2\xda\xab\xd8\x52\x93\x5b\x19\x10\x3a\xea\xc2\xe8\xfa\x9e\x29\x3e\x46\x9e\x11\xdc\xea\x8f\xcf\xc4\x71\x49\xc5\x80\xf0\x56\x05\xa3\x21\x0f\x53\x16\x91\xfd\x69\x62\x1f\x12\x16\x70\x72\xf1\x20\x16\x1a\x4f\xde\x18\x8c\xc3\x6a\x23\x89\x5b\x80\x71\xa5\xca\xa8\x81\xb3\x5e\xdd\x7c\x9d\x5e\xf7\xf1\x19\xde\x78\xc4\x1c\x44\x33\x9c\xb0\x4c\x61\x66\xe4\xd1\x4c\x09\xc0\xd1\x5f\x73\x2e\x65\x1f\x2e\x30\x5b\x4f\xcf\x04\xa7\xaa\x0b\x97\xa1\xd2\xaa\xb8\xaa\xeb\x92\x79\x52\x98\x5c\x87\xc6\x7a\xb9\x4b\x30\xe6\x09\x3a\x8a\x09\x6c\x03\x1c\xda\xa5\xb7\x44\x0f\xc8\x12\x6f\x13\xe4\x18\x9d\x09\x22\x05\xf4\xd0\xd1\x86\x44\x10\x87\x86\xa2\x76\x55\xf6\xb6\x46\x34\xbc\x10\x95\xaa\xb9\x65\x94\x83\x90\x1a\x25\x08\x24\xfd\x1b\xfe\x18\x6f\xde\x22\xb7\x81\x64\xe7\x90\x6d\x86\x11\xd9\x22\xa3\xd7\xa5\x28\xb4\x17\xb7\xff\x4a\x33\x2b\x1d\x55\x39\xb3\x02\x42\xc0\xb2\x17\xbd\x8e\xb7\x36\x75\xdb\x75\x81\x95\x04\x33\xfc\xef\xde\x9c\x05\xbf\x1c\xb0\x28\x48\x90\xa4\x7a\x0c\x11\x23\x01\x09\x17\x10\xa0\xc2\x48\x92\x13\x23\xa6\x38\x95\x17\x84\xf4\x9a\x66\x23\xa8\xd3\x52\xcd\x7c\x6e\xa7\x07\xd2\x09\xb4\xb2\xe1\x66\x47\xe4\x2a\xd5\x0b\x5f\x63\xd5\x14\x6e\x8c\x30\x0d\x7d\xa4\x6c\xfa\x13\x1c\x32\x6b\x6a\x87\xf6\x86\x59\xe3\x8b\x9b\x73\xcb\x59\x1a\xe6\xd9\xb5\x69\x98\x66\x45\xf6\xdf\x9a\xda\xf9\xb4\x4f\x6a\xc7\x9f\x8f\x27\x9f\x7a\xa3\x76\x73\x3d\x1e\xf5\x46\x6c\x76\x39\x3b\x46\xd1\x3a\x81\x5e\x06\xaa\xfa\x40\x3e\x95\x3d\x76\x84\x3e\x49\xa5\x04\xfb\x54\x6e\xfb\x6c\xe0\xa7\xf8\x3d\x13\xfa\x55\x70\xdb\x0b\xfe\x26\xcb\x90\x90\x96\x5d\xa2\xde\xf1\x0f\x49\x76\x06\x40\xf9\x3c\xac\x3f\x04\xcc\x3c\xe1\xe8\x1e\xbc\xc5\x8f\xdc\x73\xdb\x8c\x8e\x46\x62\xc3\x5a\x45\x18\x54\x68\x7d\xee\x47\x1e\x27\x4e\x6d\x73\x23\xaf\x23\xd1\x4c\x78\xba\x3d\xfa\xa1\xbb\xdb\xa3\x9b\xf0\x47\xbd\x85\x5d\x59\xc8\xe8\x0e\x41\x74\xbf\xe0\x8b\x2e\x13\xfc\x99\x54\x84\x5e\x34\x13\x7a\xa9\x25\x4a\x97\x56\x06\x75\xda\xc3\x0c\xd5\x61\x4f\x96\x62\xf3\xf5\x0e\x1d\x46\xc4\xe5\xf6\xc4\x6b\xdd\xe5\x32\xe2\x6d\xfa\xb4\xe3\x90\x25\xde\x69\xd1\xd2\x3e\xc3\x96\x4c\xc2\x35\x81\x45\x17\x2e\xed\xca\x75\x5a\x4c\x57\x0c\xf5\x74\xf1\x64\x32\xbb\x36\x00\xee\x0c\x86\xaf\xeb\xd2\x9b\x11\x27\x5e\x7d\x12\x73\x90\x2b\x9a\x9e\x1f\x0c\xd3\x57\x8e\x70\x17\xc2\x9e\xb9\xd4\xe3\xc2\xc1\xac\x7c\x73\xe9\x38\x42\x88\x21\x9e\xb0\x1a\x1b\xdf\x89\x5c\xdf\xf8\xf9\x43\x07\x05\x9e\xe4\x44\xfc\xeb\xcf\x1f\x9e\x5c\xc6\xd6\x7a\x6c\x2b\x64\x17\x54\xa5\xfd\xc6\x75\x71\xe5\x4d\x27\x54\x95\x34\x4a\x60\x55\x55\x05\xf5\x8f\xab\x8a\xf0\x0f\x60\x7d\x7c\x66\x5f\x12\xb2\x56\x80\xaa\x0e\x4c\xeb\x16\x5d\x0f\xe0\x54\x85\x9a\xcf\xc4\xbe\x1c\x0f\x9b\x30\xef\x03\xf5\x2a\x90\xae\x0f\xf6\xdd\xf0\x2c\x0d\x40\x7d\x00\x9a\xae\xe0\xec\x84\x68\x8a\x48\x09\xa4\xe9\x02\xd3\xfe\x31\x4d\x53\xfe\x01\x6a\x0d\x66\xf7\x07\xaa\xbd\x10\x54\x93\xd1\xd4\xb7\xc5\xb6\x6a\x19\x5e\x04\xc2\x65\x10\xa9\x3b\xc4\x6d\xc8\x66\x8f\xd7\x97\xd0\x2b\x01\xb8\xf3\xf1\x79\x01\xda\x70\x13\xa5\x04\xb5\x5b\x8a\x5f\xe2\xc0\x1e\xd6\xaf\x14\x85\xca\xa1\x5a\xea\x4e\x43\x14\xc0\x0e\x67\x6d\x1e\x5b\x61\x87\x5e\x1f\xda\x2b\x82\x5d\x1e\x59\x21\x89\x5e\x1f\xd9\x03\xc1\x6f\xf0\x9e\x31\xb5\x3a\x70\x4a\xda\xb4\xaf\x79\xae\xf4\x0c\x0f\x94\xb4\xdd\x77\x5f\x41\x71\x7d\x06\x10\x2a\x2d\x01\xcf\x15\x8a\x56\x55\x7a\xab\xa1\xd8\x06\x56\x3f\x9d\x4c\xc5\x6b\x6a\x2c\x51\x28\x7b\xbc\x7f\x72\x79\xf9\xc9\x62\x6b\xff\x4e\x55\x49\x07\x91\x51\xa8\xef\x8e\x8b\xfa\x0a\x77\x4c\x51\x17\x21\x4b\x6f\x3f\x86\x64\xd9\x9c\x4b\xf2\xda\xfc\x74\x7a\xa3\xab\xf7\x52\x75\xd4\x49\x89\x5d\xa6\x46\x5f\x17\x37\xef\x39\x32\x18\x42\xae\x8e\xcb\x4c\x04\x91\xf5\xcc\xa9\x32\x8f\x5c\x4d\xb3\x31\xf7\x43\x31\x72\x9f\x73\x7f\x23\xcb\x9c\xa1\x39\xfe\x1e\x2f\x70\x4b\x7d\x95\x24\xff\x13\x91\xf0\x3e\xe6\x23\x32\xf5\x74\x65\xb8\x14\x64\xc0\xa2\xf9\x86\xc6\x1f\xf3\x52\x67\xa9\x3e\x4d\xcb\x5f\x1b\x95\x4c\xcb\xef\x01\x88\xf3\xfc\xde\x82\xe6\x66\xb3\xc6\xc2\x71\x54\x6b\x6c\x1f\xd2\x44\xd2\xd5\xcb\xad\x2c\x44\x11\x4c\xa9\x4a\x09\xa5\xab\xa8\xed\x72\x59\xf3\xa2\x62\x15\x4c\x52\x13\x0d\x67\x42\x32\x5d\x15\xdd\x51\x48\xf9\xdd\x89\x52\x31\xe3\x92\xe8\x98\x3f\xe2\x0f\x9c\x15\x77\x2a\x34\xdb\x99\xd2\x68\xbe\xeb\xc0\x29\x29\x66\x2e\x8e\x66\x3a\xbe\x9a\x5c\x8e\x2c\xd5\x44\x0c\xa8\x50\x14\x96\x2a\x6f\xce\x54\x85\xa9\xc3\xfc\x2a\x6d\x6d\x39\xd5\xab\xf1\x91\xd2\x89\x74\xf9\x62\x89\x58\xe2\xa0\x2d\xf4\xe2\x17\x15\xbe\x1d\xf4\x62\x24\xf4\xf4\xd0\x0b\x5c\x12\x1d\x9f\x93\x8d\x1f\xde\x37\x44\x5f\xe8\xb9\x3f\xfa\x8a\xc1\xfd\x40\xdf\xbe\xd1\x57\xa8\xb5\x4f\xf4\x4d\x9b\x47\x2c\xd4\x23\xe8\xdb\x50\x56\x76\x67\x07\xfd\x0a\x8b\x14\x45\x1f\xba\x1c\x29\x6c\xdf\x7b\x80\xc4\x40\x6a\x2f\x1e\xa5\x85\xf8\xcf\x89\xd2\xc2\xc2\xf6\x43\xe9\x38\x8f\xe8\x17\xa5\x03\xf6\x0d\x41\x3a\x60\xcf\x80\xd1\x41\xaa\xa8\x74\x1a\xfa\x0b\x02\x69\x34\x6b\x88\xd2\x01\xdb\x1f\xa4\x71\x70\xed\x30\x5a\x7e\x89\xad\x0a\x9f\xd3\xaf\xf3\x5f\x22\x54\xf7\xb3\x24\x03\x56\xbb\xcf\xf7\x05\x79\x0b\x9c\xdf\x3e\xf1\x37\x65\xa7\x69\x28\x6d\x13\xa9\x4f\xaf\x05\x44\xc0\xaf\xe7\xf3\x11\x59\x84\xc4\x16\x40\x9e\x89\xd6\xab\x44\x75\x61\x61\xd4\x09\xfa\x69\x72\x3e\x99\x59\x01\xf3\x8a\x62\x0e\xf6\x93\x30\x49\x2a\x1a\x09\x08\xd1\x55\xad\x26\x6b\x04\xd4\xa9\x44\xc2\x3e\x70\x23\xa6\xf7\x16\xb4\xf5\x52\x4f\xe9\x21\xd0\xaa\xf6\x73\x10\x01\x7b\x0a\xff\xb0\x5d\x7d\x43\xff\xb0\x5d\x3d\x83\x7f\xd8\xae\x12\xfd\x7e\x96\x9f\x75\x34\x56\xae\x3f\xc7\xaf\x93\x73\x9b\x47\x4d\x7d\xc5\x76\xb5\xbf\xaf\xc0\x81\xfe\xf0\x15\x6d\x7d\x05\xce\xdc\xf7\xe1\x2b\x70\x7e\xfb\xf4\x15\x29\x9b\x8d\x45\xaa\xf2\x15\xdf\x12\xcd\x70\xdc\xfb\xa1\xd9\x76\xd5\x37\x9a\xb1\x96\xef\x53\x02\x88\x15\x93\x97\x29\xda\x73\xe4\x5f\xa8\x04\xfa\x25\x71\x40\xf1\x75\x0a\x76\xb2\xa6\x93\x11\x3e\xd5\xf7\x56\x35\xfb\xc2\x14\x2c\x82\x36\xe3\x3e\xcd\xde\x9b\xc4\x3d\x6e\x72\x3d\xd4\xed\xd4\xbf\x36\xaf\xa6\x03\x16\x31\xc0\x90\xb2\x51\xa8\x73\xdc\xa8\xd4\xf0\x3d\x75\x32\xaa\x90\xfa\x21\xe5\xf7\x2d\xbb\x5d\xd0\x45\xc3\xb7\x48\x71\x97\x6b\xfa\x67\xdb\x2e\x57\x84\x81\x89\x7a\x35\x2f\xc5\xf1\x2d\x92\xae\xf2\x3d\xd2\xdd\x66\xea\x23\xd0\xf5\xa5\xe3\xad\x26\xe0\x67\x31\x01\x58\x12\x50\x37\x01\xf9\x42\x81\x4e\xaf\xa5\x74\xb4\x50\xfa\x56\xea\xed\x33\xee\x21\xc1\x80\x07\x46\xda\xcb\xc6\x0a\xa4\x75\xd3\x27\xad\xeb\xf1\x55\x5f\xfb\x51\xc4\x38\xaf\x26\xbd\xd1\xba\x98\x9c\x8e\x7b\x23\xf6\x79\x72\x35\xeb\x8d\xd8\xd5\xf8\xba\x37\x5a\xb3\xc9\xf9\x18\x03\x23\xb9\x10\x7b\xd3\xdd\xb1\xa0\xda\x75\xfb\x8d\x72\x29\xdd\x5f\x55\xea\x90\x47\x45\xda\xe0\x82\xe4\x05\xe1\x64\x0d\x4b\xed\xa4\x56\x21\x4a\xea\x18\x82\x14\x43\x35\x95\x17\x4c\xe5\x71\x32\x7f\xe8\x23\xd5\x1e\xc2\x20\xfd\xad\xea\x23\xf5\xe5\x96\xb8\x24\xe2\x28\xde\x17\x1e\x07\x99\x22\x82\xc2\xad\xf7\x10\x08\xc5\x8c\xe4\xae\xee\xd4\x16\x76\xd3\x00\xfd\x2c\xc8\xda\x77\x21\x0a\x3d\x04\x67\x3a\x4d\x4e\x45\x60\x13\x10\x70\x03\x0e\xc2\x97\x0c\x18\x52\x17\x3f\xdb\x6e\x14\x5f\x7d\x25\xf4\x5d\xb2\x7f\xbc\xad\xaf\x4f\x15\x08\x40\x6f\xb5\xe7\xd8\x8a\x43\x96\x78\x73\xb9\xe0\xfe\xf0\xa0\x77\xa5\xb6\xe0\xb0\x5d\x89\x8a\x36\x01\x9f\xa1\x01\x91\x00\xc6\xff\xf2\x52\xec\x15\x7c\x17\xa9\x1e\x9a\xff\x8c\x1d\x88\xfa\x80\xb7\x4c\x32\xc4\x77\x30\x2b\xe1\xbc\x81\x04\x71\x3c\xa3\x02\x96\x8d\xbd\x58\x27\x01\x8b\xe2\x72\x0e\x17\xb1\x5f\x21\x70\x51\x5f\xb0\x57\xd1\x4b\x14\x09\xbf\x83\x24\xac\x1b\x11\x59\x94\x45\x15\x4d\xfd\xd9\x7f\x27\xe4\xf3\x84\x5f\x57\xc7\x2c\x58\x7d\x81\xcd\x2e\xec\x9c\x83\x2d\x6d\x35\x0d\xfd\x2d\x75\x48\x58\xd7\xb2\x99\xb4\xef\x12\x69\x31\xe1\x23\x69\x71\xd5\xe1\x35\x5e\xaf\x15\xbd\x19\xab\x7f\xfe\x47\xc2\x6b\x49\x5d\x12\xd8\x7c\x5d\xc2\x4e\xcd\x1d\xb6\xf8\x1d\x9b\x3c\xea\xf5\x1b\x58\x8b\xfa\x14\x52\x83\xf8\xb7\xf2\x0b\x67\x69\xc3\x75\x5e\x57\x80\x71\x6e\x81\x18\x19\xd2\x75\xed\x63\x2c\xdd\x37\xa4\xd1\x29\x43\x1c\xd2\xc8\xac\x3c\xfb\xf1\x8f\x2e\x55\x37\x34\x5f\x17\x93\xdc\xc2\xd8\xad\xf2\x66\xa0\x4c\xb5\xb2\x81\x30\xbb\xca\xbb\x0e\x0d\xc9\x82\x8b\x57\x8b\x3d\x15\xd9\xc4\xd6\xd0\xc1\x75\xe5\x7c\x56\xd1\xd9\xd4\x3b\xaa\xce\x6e\x2a\x9d\xe4\xb7\x74\x51\xe2\x6b\x41\x32\xf3\x56\xf6\x9e\xfa\xa6\x91\xbc\x1e\x7f\xc2\x68\x2a\xdc\xd4\x6b\xfc\xde\xd0\x16\xbd\x85\xe8\x2c\x2f\xc6\xb6\x69\xb6\x4b\x48\x53\xe1\x0a\x9a\xea\x3a\xf3\x9a\x56\xee\xdc\x03\x1e\xc7\x2e\x5d\x79\xa7\xf2\xba\x64\xa0\xbe\xe1\x05\xf7\xf0\x19\x41\xe6\x1b\x2a\xda\xbb\xa9\xdc\x3a\xf5\xe1\x94\xc2\x07\x37\xac\x53\x3b\x24\x3c\xdd\x5a\x08\x9f\xfe\xbc\x86\xad\x6c\x61\x1d\x0f\xe7\xff\x03\x00\x00\xff\xff\x39\x32\xf3\xac\x5b\x70\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 28763, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

