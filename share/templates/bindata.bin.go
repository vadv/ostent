// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x73\xe3\xb6\x11\xff\xff\x3e\x05\xcb\x26\x9d\x26\x13\x51\x75\xe6\xd2\xa6\x17\xcb\x33\x3e\x4b\x77\xe1\xe4\x6c\xab\xb6\x7c\x6d\xfe\xca\x40\x24\x28\xe1\x4c\x91\x0c\x01\xca\xe7\x6a\xf4\xdd\xbb\x78\xf0\x2d\x4a\x7c\xc9\xe7\x74\x9c\x49\x2c\x12\x8f\xdd\xc5\x62\xf1\xdb\x05\xb9\x44\x4e\xff\x34\xbe\xbe\x98\xfd\x3a\x9d\x68\x4b\xb6\x72\x5f\x9d\x9d\x8a\x1f\x4d\x83\x0b\x8c\x6c\xb8\xe0\x97\x2b\xcc\x90\x66\x2d\x51\x48\x31\x1b\xe9\x11\x73\x06\x3f\xea\xd9\xaa\x25\x63\xc1\x00\xff\x1e\x91\xf5\x48\xff\xcf\xe0\xee\x7c\x70\xe1\xaf\x02\xc4\xc8\xdc\xc5\xba\x66\xf9\x1e\xc3\x1e\xf4\x33\x27\x23\x6c\x2f\x70\xae\xa7\x87\x56\x78\xa4\xaf\x09\x7e\x08\xfc\x90\x65\x1a\x3f\x10\x9b\x2d\x47\x36\x5e\x13\x0b\x0f\xc4\xcd\x77\x1a\xf1\x08\x23\xc8\x1d\x50\x0b\xb9\x78\x74\x12\x13\x62\x84\xb9\x58\x5c\xc3\xdd\x66\x63\x8c\x11\x43\xc6\xcf\x3e\x65\x9c\xf8\x76\xab\xc1\x15\x90\x3c\x1d\xa6\xed\xce\x4e\x5d\xe2\xdd\x6b\x21\x76\x47\x3a\x01\x96\xba\xc6\x1e\x03\x90\x83\xac\xd0\x02\x0f\x03\x6f\xa1\x6b\xcb\x10\x3b\x23\x7d\xe8\xa0\x35\x6f\x60\xf0\xb2\x52\x57\xca\x1e\x5d\x4c\x97\x18\xb3\x98\x00\xc3\x9f\xd9\xd0\xa2\x34\xe9\x0f\xd7\x43\xe2\xd9\xf8\xb3\xc1\x4b\x15\x05\x6a\x85\x24\x60\xd9\x2e\x9f\xd0\x1a\xc9\x52\xbd\xa8\x67\x8d\x86\x16\x10\xfa\x44\x87\x21\xd7\x70\x88\xe1\xea\x7b\xe3\xc4\x38\xf9\x31\x2e\x30\x56\xc4\x33\x3e\x01\x4f\x1b\x06\x3e\x58\x21\xe2\xc9\xf6\x9b\x0d\x71\x34\x63\x76\xfe\xfe\xfd\x64\x3c\x27\xde\x76\x0b\xed\x94\x30\xb2\xc7\x66\x83\x5d\x0a\x1a\x02\x0e\xc3\x15\x71\xef\x55\xa5\xa8\xf0\xec\xed\x56\x8f\x95\x7a\x3a\x94\xc2\x29\xf9\x87\xca\x34\xce\x4e\xe7\xbe\xfd\xa8\x0a\x3d\xb4\xd6\x2c\x17\x51\x3a\xd2\xe1\x72\x8e\x42\x4d\xfe\x0c\x6c\xec\xa0\xc8\x65\xf1\x2d\x65\x60\x18\xd6\x80\xf9\x81\xae\x85\x3e\xcc\x23\x6f\x4e\x16\x50\x08\xf3\x90\x30\xb4\x49\x42\x8d\x9b\x04\x8c\x09\x87\x03\xc7\x8d\x88\x1d\xb7\x29\xb4\x52\xd4\xb9\x64\x38\x04\x33\x72\x07\x2b\x7b\x70\xa2\x05\xc8\xb6\x89\xb7\x18\xb8\xd8\x81\xc9\x8f\xa7\x20\xee\x3f\x8f\x18\xf3\xbd\x02\x09\xe6\x2f\x16\x2e\xe6\x24\x5c\x14\x50\x6c\xc7\x73\x2b\x1b\x2b\x2d\xcb\x46\x5c\x38\xd9\x2a\x2e\x46\xe1\x82\x4f\xdd\x9f\x15\xad\xa4\x3a\xc3\x56\x58\x40\x80\x12\xb6\x34\x1c\xf8\x9e\xfb\x98\x6f\x02\x8d\x66\x52\x8e\x54\x3b\x30\x0b\xd0\x6d\x0f\x25\x6e\xa9\x03\x60\x5b\x22\xf5\x6c\x7a\x0e\xa5\x12\x73\x93\x80\x34\x62\x8f\xf4\x25\x68\x36\x3f\x0f\xf3\x10\x79\x36\x94\x11\x30\x14\xb1\xd2\x46\xfa\x0a\x7d\x96\x58\xf0\x46\x3b\xf9\xde\x5a\x26\xab\xac\xa0\xde\x32\x06\x9c\x0e\x51\x8e\xe7\x10\x2c\xa7\x60\x47\x5c\x88\xe2\xac\xa5\x26\x28\x0b\xb4\x3d\xd3\x7a\x76\x1a\xb9\x99\x11\xc4\x4d\xe1\xa7\x38\xf9\x2e\x89\xdb\x21\x8b\x91\x35\x2e\xab\x0e\xa9\x81\x71\x5c\xa5\x6f\x86\xc3\x87\x87\x07\x03\xc6\x12\xc2\x7f\x86\xe5\xaf\x86\x12\xd1\x60\xfd\xbb\x18\x51\x4c\x87\x2e\x62\x98\x72\x10\xe2\x08\x37\xd2\x6f\x22\xcf\x03\xa3\xd7\xd6\x38\xa4\x60\x37\x5a\xac\x8f\x8f\x93\x9b\x5b\xf3\xfa\x2a\x5d\xd8\x19\x9e\x31\x48\xa2\xf2\x3c\xba\xa4\x72\x00\xf1\x92\x01\x0c\xd3\x32\xd7\x00\x42\xe1\x82\x78\x7c\xc1\x69\x0e\x09\x29\x13\xa5\xe5\x71\x5a\xbe\x8d\x0b\xa4\x78\x11\x20\x6c\x49\x29\x42\xc4\x64\x24\x63\xf3\x76\x76\x63\xbe\xe5\x13\xcb\x3b\xf4\x2c\x73\x57\x41\x49\xf0\x17\x6f\x4e\x83\x9f\xe4\x42\xe1\x86\x05\x36\x5c\x6a\x96\x31\x54\x73\xca\x47\x52\x5a\x2f\x6a\x2c\xcf\x70\x84\x51\x69\x84\xd1\xfe\x11\xde\x05\x8c\xc8\x85\xf8\x07\x1a\xa5\x8b\x8a\xa3\x74\xd1\xde\x51\x7e\x38\xef\x61\x84\xc3\xc8\xdd\x87\x55\x99\x5b\xb8\x81\x41\x28\xff\x7b\xd8\x63\xe6\xda\x84\xfe\x43\xd1\x93\xf2\x01\xae\xf0\x0a\x9c\x98\x8c\xdb\x12\xec\xe3\xae\xf4\x75\xec\x53\x7d\xc7\x81\xe8\x64\x70\x92\xc3\xbe\xcd\x86\xe1\x55\xc0\x61\x48\xd3\xc1\xdf\x03\x6f\xfa\xe6\x8d\xbc\xf8\x0d\xb4\x81\x5d\xa0\xab\x6b\x06\xd7\xce\x6e\xe4\xb5\x9d\xa3\xb0\xb5\x9d\x9d\x5c\x73\x3a\x3c\xac\x14\x2b\x88\x8e\x22\x1d\xd0\xdd\xab\x14\x72\x1c\xa5\x90\x5e\x94\x12\xd0\xdd\xc2\xfd\xb3\x9b\x70\x01\xed\x43\xb8\xf5\xe2\x28\xc2\xad\x17\x87\x85\x4b\x6e\x0e\xc4\xf9\x71\x87\x35\x44\xca\x1c\x3c\xb4\x51\xec\xdd\xb6\xdb\x9f\x8a\x01\xb7\x8a\xb3\x79\xe8\x2d\x76\x69\x9b\xcd\xf0\xdb\x57\xdf\x0e\xb7\xdb\xcd\x46\xca\x57\x16\x58\x04\x4e\x20\x2b\xf1\x82\x88\x71\xd2\xe6\xf8\x9c\xb1\x10\xf6\x43\x70\x23\xb4\xb2\xdd\xa6\x91\xcd\xc0\x5a\x62\xeb\x7e\xee\x7f\x8e\xa3\xdd\xf4\x1e\x85\x04\x0d\x96\xc4\xb6\x31\xec\x2b\x58\x18\x81\x52\xe5\x1d\x17\xe3\x13\xfd\x7c\xe1\xfa\x10\x19\xe9\x82\x0f\x67\xe8\xa2\x39\x76\x39\xc3\x77\x7e\xa8\x38\x66\x19\x8a\x78\x0e\x6a\x2f\xff\x7d\xcb\x83\x3a\xd9\xe2\x95\x04\xd1\x19\xe8\x88\xab\x57\x90\xe0\xe4\xc5\x36\xa4\xce\x60\x83\x08\x2c\x81\xea\xbc\xcd\x03\x61\x4b\x8d\xdf\xc1\x04\xf3\xd9\x02\xba\xfc\x8f\xdc\xea\x6c\x36\x10\x55\x2e\xb0\xf6\x15\xf9\x4e\xfb\xca\xf2\x43\xac\xbd\x19\x69\x12\xbc\x2f\xa6\x77\xc6\x07\x42\xb9\x00\x2c\x04\x09\x45\xb5\x71\x65\xfc\x82\x1f\xb9\x90\x9a\x80\x01\xa0\x3b\x7f\x1c\x5c\xe9\x52\xe4\x53\x66\xc7\x06\x26\x5c\x4f\x48\x16\x4b\x70\x46\xfe\x43\x88\x94\x3b\x3c\x4b\xe8\xf0\x71\x31\xbb\xb2\x57\xb2\x37\xe4\xae\x26\xa3\xaf\x88\xe2\x00\x87\x16\xc4\x66\x32\x86\x92\xfb\x8c\xb4\x74\x14\x33\xb8\xa3\x58\x2a\x32\xc7\x56\x96\x66\x7c\xd2\xd9\x71\xa5\xb8\x7d\xa4\x65\x21\x44\x61\xdf\x32\x0c\x88\xc7\xe3\x5b\x5c\x2d\x8b\x69\xbb\xb8\x2c\x8c\x2c\xdd\x29\xcd\x90\x85\x19\xa3\xcb\xff\xd4\x31\x41\x09\x39\xdc\x7e\xf8\x45\x32\x32\x71\x23\xfe\xc2\xe6\x17\x56\x35\x16\x1e\x19\x06\x9f\x79\xc2\x02\x9c\x63\x00\x61\xcb\x2c\xb4\x24\x77\xbc\xe2\x80\xb1\x89\x66\x7c\xc6\x73\x3b\xb4\xc8\x23\xb9\xd0\xfb\xec\xeb\x42\x88\xd2\x86\x0b\x4c\xe9\xf1\x99\xf0\xa9\xea\xc2\x65\xa8\xb4\x2a\x4a\xe3\x47\x16\x2c\x7d\x66\xb1\x0f\xef\x63\x44\x91\x78\xcf\x52\x00\x16\x13\xd9\x04\x9b\x6c\x67\xfe\x08\xdb\xb3\xdf\x1a\x02\x94\x4d\xe8\x7d\x0a\x4e\xe3\x77\x82\x48\x1e\xa0\x78\x13\x63\x4c\xc2\x2b\xd8\xe3\xa6\x30\xa5\xf8\x29\xa8\xb2\x49\xc8\xb7\xc0\x65\xc0\x2a\xa0\xd4\x1e\x4d\x08\xc4\xfe\xab\xe2\x86\xd7\x82\xdb\x05\x14\x6a\x27\x27\x9c\xdb\x40\xb2\xb3\xf1\x5a\x30\xfa\x66\x27\xd0\xb5\xe4\xa6\xc6\x26\xb8\xfd\x3d\xcb\x4c\x8d\x6a\x37\xb3\x12\x96\xc4\xba\x3a\x5f\x23\xe2\xd6\xed\x52\x2d\x63\x8a\x35\xba\x9c\x27\x0e\xb3\x53\x59\xb2\xdd\xca\x3d\x43\xcc\x12\x6a\xec\x66\x42\xce\x7c\x86\xb2\x42\x76\x42\xa5\xd8\xf8\x7a\x81\xa6\x9d\x3a\x91\x4f\xdc\xb0\x17\xad\xf8\x83\x51\x5d\xd9\xeb\x14\x85\x68\x45\x8d\xc9\xd5\xdd\xa5\x61\x3b\xc6\x04\xaa\x3f\xf0\xe7\xa6\xfa\xbb\x5b\x5d\xd3\xc5\x32\xe8\x4e\xeb\x72\xda\x1f\xad\xf3\x8f\xe7\xe6\x87\x9e\x68\xdd\xdd\x4e\xc6\x3d\x91\x9a\x5d\xcf\xce\xb9\x58\x9d\xb0\x2c\x87\x40\x7d\x00\x1a\xf1\x60\x2b\xdb\x19\xd1\x24\x95\x7a\x90\x26\xdb\x3e\x1d\xa6\x29\x7e\x4f\x04\x6a\xb5\xb8\x55\x02\x86\xe9\x84\x18\x1f\x03\xd5\xcc\xa8\x12\xd6\x78\x55\x43\x5c\x33\xc5\x20\xfb\x03\x36\x65\x84\x7d\x05\x5d\x71\x4f\xb9\x40\x33\x51\xc8\x58\xbc\x83\xaa\x08\x5f\x4a\xad\x2f\xfd\xc8\x63\xd8\xde\xdb\x5c\x2b\xea\x48\x34\x13\xce\xa9\x45\x3f\xee\x61\x5a\x74\x13\x6e\xa6\xb7\x70\x29\x8f\x09\xdd\x31\x86\xb4\x0b\x9a\x88\x93\x02\x8c\xb9\x2b\x64\x22\x8e\x91\x87\x16\x92\x8b\x96\xf2\xb0\x52\x7f\x61\xc7\x64\x13\x08\x21\x71\xa4\xd2\x70\x41\x03\xa1\x31\x76\x19\x32\xbd\xc6\x5d\xae\x23\xd6\xa4\x4f\x33\x0e\x79\xe2\x9d\x56\x2e\xe9\x33\x24\xc9\xed\x96\x4c\x58\x79\xa1\x83\x2a\x17\x6b\x79\xaf\x11\xbf\x31\x79\x6b\xce\x6e\x35\x40\x3f\x8d\x62\xcb\xf7\xb2\xef\x18\x4d\x6f\xff\x0e\xe4\xb4\xf0\xf8\x76\x7e\x3a\xcc\x96\x9c\x05\xb4\xf5\x46\xe8\xb0\x70\x30\x2b\x5f\x5c\x3a\xc6\x71\x44\x7b\xfb\xeb\x6c\x72\xab\xad\x7c\x3b\x72\x7d\xed\xf5\xfb\x0e\x0a\x7c\x5b\x10\xf1\xeb\xd7\xef\x8f\x2e\x63\x63\x3d\x36\x15\xb2\x0b\xb4\x92\x7e\xa3\x37\xe2\xe0\x30\xf4\xc3\x8e\xd0\x2a\x69\x1c\xc4\x56\xd9\xec\x08\xe0\xaa\x08\xbf\xa0\x6b\xe5\xf4\x3e\x27\x78\xad\x40\xd6\xec\xdb\xb5\xaa\x95\xd7\x03\x42\x55\x41\xe7\x13\xb1\xdf\x0d\x8a\x75\x98\xf7\x01\x7d\x15\x70\xd7\x07\xfb\x6e\xa0\x96\x45\xa1\x3e\x50\x2d\x40\xd6\x3d\x66\x1d\x61\x4d\x11\x39\x88\x6b\xaa\xdd\x11\x80\x2d\xa6\xfc\x82\x6c\xd5\x53\xfc\x02\x6d\xcf\x04\xda\x64\x5c\xf5\x65\x01\xae\x5a\x86\x67\x01\x73\x39\x58\xea\x8e\x73\x2b\xbc\x6a\xf1\xa2\x13\x7a\xa5\x28\x77\x39\xb9\xcc\xe3\x1b\xd4\x1a\xbf\x10\xcf\x4e\x01\x8e\x67\x81\x48\x68\xbb\x87\xf2\x32\xb4\x25\x5d\x6a\x43\x01\xef\xf0\xae\xff\xc7\x54\x9c\xec\xce\x67\xef\xaa\xa2\x99\x80\xbd\x3e\x79\x07\x82\x5f\xe0\x7d\x60\xc6\xfc\xb9\xba\x9b\xb4\xdf\xf3\x1c\xe9\x09\x1e\x20\xc5\x86\xdd\x7d\x89\x24\xa9\x35\x40\x48\xe6\x62\x9c\x9d\xa6\x39\x19\x88\xff\xc4\xf9\x5a\xea\xb1\xfb\xdb\xeb\xeb\x0f\x06\x80\xa8\x43\x16\xd0\xcf\x90\x89\xb7\x3f\x87\xd8\x29\xa7\x2f\xcc\x99\x37\x98\xbb\xbe\x75\x9f\x26\x55\xa9\xf7\xd4\xfb\x28\xbe\xf5\x7d\x57\xd4\x5c\x70\x3a\x72\x8d\x2d\x5f\x6b\xf3\xc5\x80\x78\x8e\xaf\xf3\x1b\x3d\x79\x53\x0d\x34\x2f\xa6\x77\x39\x48\x3a\x8b\xf3\x32\x93\xf4\x92\xec\x90\x32\x69\x4a\x92\xa5\xde\x42\x1c\x59\xab\x92\xe7\x44\x72\x76\xa9\x28\x49\x89\x56\xd9\x20\xa9\xc8\x67\xa7\x8e\x1f\xae\xb2\x7a\xe2\xf7\x30\x38\x91\x58\x57\x94\xe6\x5f\x11\x0e\x1f\x79\x76\xc8\xea\xdc\xe2\x79\xcd\x49\x0a\x48\x4c\x4c\xa6\xac\xc4\xcf\x30\x05\xaf\x01\x8d\xe6\x2b\x92\xe4\xd9\xab\xbb\x4c\x9f\x4c\x4e\x10\x9f\x23\x06\x43\x2c\x64\x25\x97\xda\x2c\x42\x3f\x0a\xb4\xe4\x6a\x40\x57\x71\x46\xba\xb8\x2f\xa6\xed\xa2\x9d\x5a\x05\xf1\x70\x95\x4e\x55\x7a\xaf\xa6\xc3\xbf\xc0\x46\xb0\x52\xd9\xf0\xba\x30\xab\x6a\x72\x45\x1b\xcc\xc9\x02\xd2\xfc\x2c\xb4\x52\x4c\xd7\xcd\x0a\xc9\xd3\x59\x26\x9f\xc1\x86\x6c\xbe\x80\xf8\x1d\x17\x31\x23\x1d\x08\x65\x13\xca\x2b\xed\xfa\xf2\x61\x41\xb1\x8e\x84\x65\x39\x38\x8a\xc0\x5d\x31\x1b\x3b\x63\xd5\x3d\x4d\xd5\x3e\x9c\x01\x79\x43\x4c\x97\x85\x17\x6f\xd3\xc9\x8d\x79\x3d\x36\x54\x25\x0c\xaf\x98\xe4\x55\x12\x12\x6e\xb9\x8d\xbf\x2a\x55\x56\x2e\xd1\xa6\xd6\x53\xbd\xda\x0e\xe4\x2d\xa8\xcc\xb7\x5c\xa2\x5a\x46\x2a\x71\xd1\x14\x4f\x6d\xa7\x15\x9c\xda\x4e\xcf\x68\x0a\x04\x9b\x82\x69\x81\x98\x7a\xc7\xca\x8c\x19\x8f\x1f\x0b\xf9\xba\xf5\x80\xd6\x76\x0e\xe3\x6c\x85\xa0\x2f\x30\xdb\x1e\x66\x2b\x54\xda\x12\x65\x77\x98\x66\x73\x90\x4d\x01\x76\xfc\xae\x47\x7c\xad\x21\x5b\x5e\x02\x0e\xad\xe3\x77\xcf\x1f\x59\x6d\xa7\x31\xb0\x96\xbe\xaa\xe1\x99\xbd\x54\x2b\x2d\xa4\x0c\x01\x97\x14\x75\x9b\x2c\x7a\x9e\x59\x91\x99\x23\xf3\xea\x7a\x3c\xe1\x19\x29\xca\x88\x72\x7a\xde\x3d\xda\xfd\xa9\x1b\x2c\x93\xbb\xa1\x88\x8b\x84\x56\xd2\x4a\xbc\xf1\x3b\xf1\xce\xe2\x48\xf2\xc5\xd4\x4b\x02\xa6\x5f\x20\x74\xf1\x6b\x95\x08\x58\x89\x6e\x3b\xa8\x1d\x9c\x38\x7d\x0f\xc5\x03\x06\x5b\x48\x21\x28\x66\x76\x37\x92\x27\x9d\xa9\x4e\x02\x65\xdf\x8c\x96\xe5\xe9\xcd\x9b\x93\x76\xde\x9c\xf4\xed\xcd\x49\x3f\xde\x9c\x74\xf2\xe6\xa4\x86\x37\xaf\x10\xf4\xc5\x9b\xb7\xf7\xe6\x15\x2a\x6d\xe9\xcd\x77\x98\x66\x17\x6f\x6e\xf6\xe9\xcd\x6b\xc8\x56\xf6\xe6\xe6\x1f\xc0\x9b\x93\x2f\xe9\xcd\x49\x19\x84\xa7\xe7\x17\xbf\x4c\x66\xfd\xb9\x4b\x92\x73\x97\x31\xf5\xba\xfe\x7c\x87\x80\x93\x9b\x9b\xeb\x9b\x63\xc9\xa7\x88\x77\x10\xcf\xec\x39\xdc\xc8\xcb\x67\x1e\x37\xdc\xa8\x84\xe8\xc6\xe1\xc6\x5e\xcb\xea\xe0\xde\x8b\x2f\xb0\xea\x07\x1c\xfb\x4c\xa9\x93\x40\xb9\x5c\x81\x4e\xf2\x98\x7d\x04\x40\xe4\xa9\x02\x20\xfe\x39\x6a\x9b\x08\x48\xbe\x25\xe8\x33\x04\xe2\x14\x9b\xc6\x40\x97\x78\xe5\x87\x8f\x2d\x42\x1d\x60\x76\x38\xd6\xa9\x92\xe8\x25\xd8\x69\x1f\xec\x54\xe9\xb4\x65\xb4\xb3\xcb\x0c\x9b\x87\x3b\x45\xaa\xf4\x01\x05\x7d\x4a\x29\xe8\xed\x58\x2d\xd5\x63\x1a\xab\x08\xab\x72\x44\x58\xe3\x44\x9f\x7b\x5c\x04\x43\x79\xc2\xe7\xc7\xd5\xeb\xb5\xcd\xf3\xe3\xe4\xb5\x65\xbf\xcf\x8f\x03\xda\x0a\x6f\x03\xda\x33\xdc\x02\xc1\xa6\x68\x3b\x0d\x7d\x0b\x53\x8a\x69\x0b\xc0\x0d\xe8\x61\xbc\xad\x10\xe9\x78\x70\x9b\xfd\x1e\xe0\xff\x1e\x79\x2b\xb4\xdb\x12\xd2\x76\xd8\x63\x0b\xdc\xbd\x15\x2b\x0c\x7e\x3d\x9f\x8d\xb1\x15\x62\x24\x60\xaf\xb8\xe5\xcc\xec\x37\x6b\x49\xf9\xc1\xbc\x34\x67\x46\x40\x3d\xe3\x03\xd8\x6b\xb5\x84\x83\xda\xc2\xa5\x1b\xe2\xfe\x64\xbb\xf4\xc3\x1a\x1b\xe1\x54\x8c\xc0\x8d\x68\x7c\x2e\xc0\xf3\x86\xfd\x80\x3e\x21\xea\x57\xa2\x46\x1b\xd0\x0f\xe8\x31\x30\x7f\xbd\x68\x85\xf9\xeb\x45\xcf\x98\x0f\x04\x9b\x62\xfe\x47\xb4\x08\x91\xc7\xb4\x85\xeb\xcf\xf9\x81\x83\x0c\xb1\xa8\x0d\xfe\xaf\x17\x87\xf1\xbf\x42\xbc\x97\x70\xbb\x3d\xe8\x57\xa8\xb4\x25\xe8\xef\x30\xc8\xba\xa0\xff\xbc\x00\x6a\xbd\x78\x42\x80\xaa\x34\xeb\x36\x00\xb5\x5e\xf4\x0d\x50\xb4\x61\x1a\x65\x00\x51\x60\x9a\x43\x19\xbb\xa7\x5c\x1e\x25\x6f\x62\x4c\xcd\x31\x4f\xea\xf3\x16\x69\x36\x65\x10\xe7\x89\x07\xc4\xde\x77\x70\x8c\x4a\x46\xcc\x92\xaa\x97\xbe\x98\xf4\xb8\x2b\xf4\x50\xd5\x99\x7f\xea\xa4\xa5\x4b\x52\x14\x87\x69\x62\x7a\x40\x23\xb8\x17\x03\xd0\x0a\xe3\xac\x99\xa3\x9e\x8e\x2a\x24\x7e\x48\xd8\x63\xc3\x6e\x57\xc4\xaa\x99\x3c\x9a\x74\xb9\x25\xff\x6d\xda\xe5\x06\x53\x30\x5d\x6f\x4f\x42\x3c\xcf\x33\x8d\x3f\xf8\x3d\x8b\xbb\xcd\xd4\xd9\x76\xfb\xbf\x10\x6f\x36\x01\xe9\x97\x01\xaf\xbf\xe7\x13\xc0\x3f\x08\x38\x38\x01\x9d\x32\x56\xe3\x28\xa0\x46\xc2\xaa\xba\x5b\xfa\x6b\xa9\x8b\x9e\x4f\x8c\x80\xe0\x26\xf3\xdc\xdd\xec\x70\x98\x42\x8e\xd2\x5d\x7f\x94\x6e\x27\x37\x9d\xce\x9e\xc8\x8f\xf0\xc6\xec\x89\xd2\x95\x79\x31\xe9\x89\xd4\x47\xf3\x66\xd6\x13\xa9\x1b\xf1\xd4\xbf\x0f\x4a\x33\xf3\x72\xc2\x03\x21\xb9\x08\x7b\xd2\xd9\xb9\xa0\xd9\xf5\x90\x0d\xe5\x51\xba\xe7\x2f\xc7\x9e\x5c\xc6\xce\xdc\xbf\xde\xc8\x92\x8c\x17\x15\x01\x99\x8a\x1e\x32\xd7\x10\x3f\x68\xaa\xbb\x2c\x88\xdd\x4d\xee\xc4\xde\x4c\x7b\x64\xdb\xf1\xa9\xcb\x67\x8a\x4b\x12\xe5\x9e\x25\x47\xc7\xe5\x83\x48\x7e\xba\x24\xc4\x28\x09\x23\xd9\x4a\x1c\xcb\x3b\x70\xfc\x28\xe4\x27\x3d\xa6\x47\xde\xe9\x1a\xe8\xcb\xc2\x4b\xdf\x85\x39\x19\xc1\x60\xa6\xe9\xad\x8c\xb9\xa6\x18\x3c\x82\xcd\xe1\x2e\x7d\x42\x28\xcb\x3e\x22\x37\xca\x1d\x10\xb7\xe3\xb4\xb9\xa6\x8e\x3f\xf3\xf9\x00\xf4\x2e\x9e\x31\x26\x0e\x9e\xdb\x75\xa2\x98\x91\x9c\x51\xb7\xdd\xc6\x87\x4e\x35\xe0\xba\x5e\x88\x37\x2d\xba\x8c\x15\xee\xf1\x23\xdf\x1a\xc8\xa2\xd8\x63\x80\x14\xbe\xcb\xe9\x72\x39\x7e\x48\x1c\x8c\x3a\xb9\x57\xee\x47\x26\xbc\x47\x25\xdc\xd7\x90\x22\x09\x7a\x54\x54\xb3\x42\xd6\x32\x8d\x6a\x14\x97\x4b\x28\xe4\xfd\x0a\x5f\x89\x40\xa9\x71\x07\x10\x9a\x06\x36\x6b\xd9\x5e\x45\x37\x51\x44\x4a\x9f\x8a\x34\x88\x3a\x52\xfa\xc2\xe9\xfd\x23\x25\x2f\x08\x7f\x53\x1d\xd8\xc4\xc2\x5d\xa1\x82\x17\xde\xd9\x6a\x1a\xfa\x6b\x62\xe3\x70\x5f\xcb\x9a\xd2\x42\x10\xc8\x94\x8f\xfe\x31\x15\x97\x6f\x16\xb1\xae\xa5\x03\xda\x2b\x7a\x4d\x56\x6a\x6a\x1c\xe2\xf2\xcd\x35\x5b\x4a\xae\x3f\xfc\x2d\x65\xcb\xab\x78\x4d\x15\xe7\x9d\xa1\x41\x0d\x93\xa1\x10\x1f\x5b\xcb\x3a\x91\x32\x71\x34\xfc\xbb\x56\x36\x58\x88\x16\xc2\x08\x57\x80\x75\x61\x81\x68\x39\x8a\xfb\xda\x27\x68\xdb\x36\xdc\x89\xf7\x14\x49\xb8\x23\x37\xec\xf9\x73\x43\xbb\x7c\xac\x43\x8a\x9f\xd3\xa4\x55\x3c\x98\xab\xac\x0c\x94\x85\x56\x36\x10\x16\x56\x59\x6b\x93\x10\x5b\x4c\xbc\x20\xec\xe9\xdb\x9c\xc4\x08\x3a\x38\xb7\xc4\x1d\x03\x05\x75\xbc\x39\x98\x0f\xdf\x51\xf3\xff\x43\x83\x07\xe6\x6c\xdd\x8f\x36\x6c\x49\xa8\xb1\x44\x9e\xed\x62\x51\x52\x3c\x18\x14\xd5\xe2\x55\x08\x00\xf8\x04\x2f\xb3\x28\xaf\x8e\xc5\x01\xba\xe7\x2e\x59\x78\x17\xb2\x5c\xce\x6b\x49\xb6\xb4\x1f\x94\xa9\xa6\x09\x38\x2b\xb9\x0a\x6e\x84\x37\x44\x21\x66\xd9\xd6\x42\x5d\xd9\x33\x27\x91\xd2\xe0\x32\x19\xd2\xff\x02\x00\x00\xff\xff\x2e\x9a\x3b\x62\x8b\x63\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 25483, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

