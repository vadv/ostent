// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x6f\x73\xdb\x36\x93\x7f\x9f\x4f\x81\x53\x9f\xe7\xe6\x49\xa7\x92\x2e\xb9\xf6\xda\x49\x6d\xcf\x38\x96\x9c\x68\x1a\xdb\x3a\x4b\xce\x5d\x5f\x75\x28\x11\x92\x10\x53\x24\x4b\x52\x72\x5c\x8d\xbf\xfb\xed\xe2\x0f\xff\x02\x34\x29\x52\xae\x93\x4b\x67\x3a\x26\x09\x60\x77\xb1\xd8\xfd\xed\x2e\x04\x32\x47\xff\x36\xb8\x3a\x9b\xfe\x3e\x1e\x92\x55\xb4\x76\x5e\x9c\x1c\xf1\x3f\x84\xc0\x05\xb5\x6c\xb8\xc0\xcb\x35\x8d\x2c\x32\x5f\x59\x41\x48\xa3\xe3\xce\x26\x5a\x74\x7f\xe9\xa4\x9b\x56\x51\xe4\x77\xe9\x9f\x1b\xb6\x3d\xee\xfc\x6f\xf7\xe6\xb4\x7b\xe6\xad\x7d\x2b\x62\x33\x87\x76\xc8\xdc\x73\x23\xea\xc2\xb8\xd1\xf0\x98\xda\x4b\x9a\x19\xe9\x5a\x6b\x7a\xdc\xd9\x32\x7a\xe7\x7b\x41\x94\xea\x7c\xc7\xec\x68\x75\x6c\xd3\x2d\x9b\xd3\x2e\xbf\xf9\x81\x30\x97\x45\xcc\x72\xba\xe1\xdc\x72\xe8\xf1\x2b\x45\x28\x62\x91\x43\xf9\x35\xdc\xed\x76\xbd\x81\x15\x59\xbd\xf7\x5e\x18\x21\xf1\x87\x07\x02\x57\x40\xf2\xa8\x9f\xf4\x3b\x39\x72\x98\x7b\x4b\x02\xea\x1c\x77\x18\xb0\xec\x90\xe8\xde\x07\x39\xd8\xda\x5a\xd2\xbe\xef\x2e\x3b\x64\x15\xd0\xc5\x71\xa7\xbf\xb0\xb6\xd8\xa1\x87\xcf\x0a\x43\xc3\xe8\xde\xa1\xe1\x8a\xd2\x48\x11\x88\xe8\xe7\xa8\x3f\x0f\xc3\x78\x3c\x5c\xf7\x99\x6b\xd3\xcf\x3d\x7c\x2a\x29\x84\xf3\x80\xf9\x51\x7a\xc8\x27\x6b\x6b\x89\xa7\x9d\xbc\x9e\x49\x18\xcc\x81\xd0\xa7\xb0\x1f\xa0\x86\x03\x0a\x57\xaf\x7b\xaf\x7a\xaf\x7e\x56\x0f\x7a\x6b\xe6\xf6\x3e\x01\x4f\x1b\x26\xde\x5d\x5b\xcc\x15\xfd\x77\x3b\xb6\x20\xbd\xe9\xe9\xbb\x77\xc3\xc1\x8c\xb9\x0f\x0f\xd0\x4f\x0a\x23\x46\xec\x76\xd4\x09\x41\x43\xc0\xa1\xbf\x66\xce\xad\x6c\xe4\x0d\xae\xfd\xf0\xd0\x51\x4a\x3d\xea\x0b\xe1\xa4\xfc\x7d\x69\x1a\x27\x47\x33\xcf\xbe\x97\x0f\x5d\x6b\x4b\xe6\x8e\x15\x86\xc7\x1d\xb8\x9c\x59\x01\x11\x7f\xba\x36\x5d\x58\x1b\x27\x52\xb7\x0b\xf6\x99\xda\xdd\xc8\xf3\x3b\x24\xf0\x60\x19\xb1\x37\x5b\x82\xb1\xc0\x32\xc4\xfc\x6c\x16\x13\x43\x8b\x80\x29\x51\x18\xe9\x6c\x98\xad\xfa\xe4\x7a\xd9\x81\xe7\xdb\xde\x9d\xab\xb8\xa0\x84\x34\x48\x3a\x73\x61\x37\x51\xe4\xb9\x59\x21\x41\x90\xe5\xd2\xa1\x60\x77\x8e\x63\xf9\x21\xb5\xd5\x4a\x8a\xce\x52\xa7\xa2\x13\xca\x22\x7a\xa9\xc7\x56\xb0\xc4\x85\xfa\x4e\xd2\x8a\x9b\x53\x6c\xf9\x7a\xfb\x56\xcc\x36\x0c\xba\x9e\xeb\xdc\x67\xbb\x40\xa7\xa9\x90\x23\x51\x06\xe8\x1c\x86\x95\x50\x42\xbb\xec\x02\xdb\x02\xa9\x67\x33\xb2\x2f\x94\x98\x59\x04\x8b\x30\x3b\x59\xae\x59\x60\xb9\xa0\xf2\xdc\x22\xaa\x45\x91\x6a\x95\x9d\x32\x2b\xa1\xba\x76\x88\x15\x30\xab\x4b\x3f\x03\x77\x9b\x02\xe5\x28\xd8\xd0\xd8\xfb\xf2\x0b\x81\x06\x83\xec\x57\x12\x1c\x0a\xd3\x28\xa2\xc7\x51\x1f\x06\xe5\xe7\x65\x65\xa6\xb4\x71\x0a\x13\x58\x53\x77\xa3\xec\x5b\x5c\x73\x31\x1d\x6b\x46\x1d\x87\xda\xb3\xfb\xbc\x0a\x72\x1c\x1c\x56\x20\x29\x2d\x5a\x12\xf5\x03\x1a\x02\xa8\x65\xdc\x26\x1e\x1e\x6c\x5c\x97\xb9\xcb\xa3\xbe\xc3\x8a\x74\x2b\x8c\x87\x45\x2a\xac\x08\xa0\x54\xbe\x5f\x4a\x5f\x83\xd1\x64\x7a\x3d\x7a\x8b\xea\xb2\x8a\xa6\x51\x10\xa3\xbf\x71\x32\x1a\xcc\xe8\x38\x59\xa6\xbc\x5b\x25\x90\x20\x1e\x90\x12\xbf\x4b\x2f\x0b\x42\x93\xec\x0a\x7f\x34\xba\x46\x66\xcc\xef\xe4\xa1\x41\x33\xe7\x78\xc6\xa3\x31\x4e\x56\xa7\xe0\x9c\xea\x8a\xda\x55\xd3\x53\x3d\x1c\x4b\xc7\x99\xe4\xbc\xa1\x96\x03\x14\x57\x2a\xe6\x0a\xdc\x0a\xad\xa9\x79\x7d\x38\xd5\xd9\xbc\x66\x99\x8a\x6a\xde\xc7\xfa\x75\xd2\x34\x34\x7f\x4e\x62\xe3\x47\x6c\x4d\x0b\x0b\x14\x93\xaf\x48\x46\xc2\x95\xa0\xa6\xc1\x29\xad\x57\x64\xf4\x79\xc3\x87\xea\x1c\x43\xea\x54\x2b\x61\xd6\x41\xf4\x3d\x8b\x6e\x64\xb2\x78\x75\x19\xb0\xe5\x2a\x32\x43\x4d\x99\xd9\xa7\x68\x3b\x2c\x8c\xba\xcc\x85\x34\x88\x1a\xbd\x4a\x91\x36\xe8\x54\xc0\xf3\x77\x98\x04\xe8\xb5\x87\x4d\xf5\x34\xf6\x18\x2f\x3f\x34\xb1\xf2\xc3\x76\x39\x6d\x97\x26\x4e\x5b\x6b\x09\x60\x1f\x1d\xc2\x14\x8a\x1e\x43\xac\x79\xc4\xb6\xc5\x10\x97\x8b\xc0\x5b\x1a\x84\x68\xfd\x86\x18\xbc\x4f\xd8\xc5\x6a\x20\x7c\xd3\xef\xdf\xdd\xdd\xf5\x20\x8e\x06\xf0\x7f\x6f\xee\xad\xfb\x22\x0f\x87\xac\xd5\xa1\x56\x48\xc3\xbe\x63\x45\x34\xd4\x45\x95\xab\xc9\x74\x78\x39\xd5\x85\x92\x66\x60\xa3\xe6\x7a\x10\xc4\x91\xc4\xdb\x80\x9c\x76\xd4\xc8\xa9\x29\x18\xfa\x38\xbc\x9e\x8c\xae\x2e\x9f\x06\x87\x72\xe1\x3c\x75\x0b\x37\x80\x15\xb2\x62\x50\x11\x89\xd7\x02\xfa\x6c\x9f\xf8\x96\x6d\x43\x2a\x83\xf5\x42\x48\xb7\x30\xef\xfb\x70\xa5\x2d\x13\x02\xef\x2e\x5f\x1a\x20\xed\x35\x5d\x43\x9a\x2e\xea\x50\xd1\x71\xe6\x78\xf3\x5b\xcc\xf7\xbb\x6b\xbb\xfb\x5a\x5d\x78\x8b\x05\xd4\x5c\xdd\x57\x99\x14\x62\xb7\x8b\xe8\xda\x47\xfd\x92\x0e\x54\x31\x20\x56\xf8\xe6\x8d\xb8\xf8\x83\x93\x01\xea\x1d\xd2\xcb\x07\xcc\x8c\x5c\x19\x76\xff\x99\xcd\x50\x52\xdd\xc0\x8f\xa8\xf3\xaa\x80\xcd\x68\xc4\xf9\xac\x47\x98\x36\xe1\x23\xb8\x91\x82\x7e\xc8\x2c\x82\xbc\x1c\x59\x75\xc8\xc2\x0b\xc0\x8a\x37\xeb\xf5\x3d\x5b\x80\x3a\x17\x6c\x39\x5f\xd1\xf9\xed\xcc\xfb\xcc\xdb\xba\x21\x96\xae\xdf\xa9\xb6\x92\xe4\x0f\x69\x0a\x27\x10\xa4\x79\x3d\x49\xff\x24\x9d\x85\xe5\x60\x36\xf6\xaf\x4f\x21\x94\x53\xc2\xbe\xce\x1c\x06\x8b\xd3\x7b\xcf\x6c\x2a\xe8\x8e\xce\x5f\x42\xe9\x2d\x30\x48\x95\x93\x0a\x21\xd9\xa2\x24\x95\x94\x94\xa6\xd6\x6c\x74\xde\x9b\x62\xc9\xae\xcf\x2a\x99\xeb\x6f\x22\x01\x65\xfa\xb9\xe6\xd5\x96\xb4\x88\x0a\x2f\xb9\xe7\x80\xb1\x62\xb6\x4d\xdd\x18\xc9\xf8\x9d\xc6\xf6\x51\xf7\x2f\x74\x92\xb4\xcd\x8e\x9b\x87\x31\x77\x8c\x97\x4f\xf1\x8d\x17\x47\x10\x7c\x7c\x6d\x62\x41\x05\xef\x5c\xc9\x9f\xe6\x09\x46\xb3\x56\x6c\x56\x5e\xc0\xfe\x42\x1f\x75\xba\xf8\x58\x8f\x60\x29\xbb\xc6\x4e\xdd\x65\xe0\x6d\xfc\x2e\xba\x32\xb5\x0d\x38\x95\x71\x19\xb0\x3b\x3e\x84\xc4\x57\xdd\x70\x9d\x8b\x44\xa2\xb4\x34\x04\xf5\x82\xef\x00\x21\x4e\x4c\xed\x45\xc0\x9c\x99\x6b\x88\xd3\xe9\x45\xcd\x2d\x9d\xb9\xff\x7b\xae\x44\x9d\x7d\x54\x95\xa9\x82\x77\x0d\x79\xb8\x45\x34\x13\xde\x65\xb3\x10\x6f\xec\x2a\xfe\xb5\xf7\xcc\x72\x7e\x29\x64\xc0\x1c\x71\x74\xce\x2b\xa0\xd2\x09\x6b\x0b\x89\xd2\xa6\xbd\xac\x67\xb7\xbb\x63\xd1\x2a\xab\xac\x6b\xba\x80\x50\xbb\x42\x29\xb5\x38\x1e\x88\x76\x8e\xdf\x52\x81\x66\x99\xfa\x28\x89\xc6\x35\x0a\x19\x37\x06\x1b\xad\x51\xa6\x53\x0c\xb6\xe8\x86\x20\xf0\x7c\x15\xef\x23\xcd\xd0\xa7\xe3\xd2\xf2\x7c\x7a\xfa\x76\xd2\x63\xe7\xe3\xd3\xb3\xdf\x86\xd3\x49\xef\x86\xb9\x91\xce\x35\x05\x5d\x2b\x59\x76\xdf\x9a\xdf\xd2\xc8\xec\x14\x63\xd1\xae\xcf\x01\x4c\x59\xc0\x7e\xb2\x0f\xaf\xaf\xaf\xae\x6b\x88\x4e\x83\xc0\x0b\xcc\x92\x0f\x79\x73\x2b\x82\xab\xc4\xb8\x5c\xfe\xb7\xbf\x4f\x87\x35\xc4\x9f\xdd\x43\x12\x66\x94\xfe\x2d\xb6\xd6\x17\xbe\x98\x7d\x19\xab\x70\xcd\x2e\x55\x79\xf8\x50\xa6\x92\x52\x0f\xa8\x82\x83\x10\xd4\x75\x69\xf0\xd1\x9a\xe3\x4b\x1d\x3e\x89\x98\xcd\x9b\x01\x9d\x0c\x01\x46\xaa\x1d\x03\x7b\x89\xc9\xcb\xc0\xdf\xd0\x41\xe4\xe6\x65\x66\xc6\x32\x1d\xd4\xef\x81\x98\xf3\xbd\x78\xfc\x1f\x32\x9d\xe4\x69\x5f\x61\xd3\xb3\x64\x89\x12\xdd\x4b\x5b\xaf\xa1\xfa\x94\x37\x1d\x4a\xf3\x92\x45\x35\xc5\x3f\xe2\xdd\x19\xbd\x8b\xd9\xee\xad\x76\x31\xbc\x05\xad\x0b\x17\xad\xa1\xf4\x04\x02\x0e\xa5\x73\xc1\xa1\x9a\xca\xcb\x01\x29\xa3\x71\x3e\xd3\xbd\x15\xce\x47\xef\xad\x6f\xdd\x76\x79\xf6\x91\x76\xbb\x57\x5b\x9c\x3d\x6d\xb5\x34\xf7\x37\xe6\x72\x29\x6e\x3c\x54\xbd\x74\x36\xbe\x31\x17\x4c\xc0\x5d\xb3\xe4\x30\xa4\x42\x61\xa4\x99\xd6\x57\x5d\x19\x25\x2b\xb5\x4f\x69\x24\x96\xa1\x95\xda\x88\xcc\xbc\x80\xdb\x82\x07\x95\xca\xfa\x8b\x2e\x97\xb2\xce\x94\xf3\x8b\x2f\xb7\x8a\x92\x3e\x67\x2a\xa3\xda\x9d\x9b\xb1\x8e\x02\x29\xbe\x84\x42\x8a\x8b\x79\xb8\x4a\xaa\x8d\xac\x16\x17\xac\x9e\xd3\xd7\x75\xf7\x38\xc8\x02\xab\x3d\x03\x2c\x8c\x7c\x06\xb1\xf5\x89\x77\x22\xed\x92\x9d\x48\xfb\xc0\x3b\x91\x83\x92\x9d\x48\xbb\xda\x4e\xe4\xa0\xce\x4e\x64\x71\xae\x5f\x75\xbc\xb5\x9b\xec\x44\x0e\xbe\xed\x44\x7e\xe1\x3b\x91\x83\xd2\x9d\x48\x9d\x7f\xed\x3d\x33\x63\x04\x1d\x7c\x11\x3b\x91\x83\x67\xb8\x13\x69\x97\xef\xe6\x0d\x44\xf1\x69\x9f\x8f\x2e\xaf\x06\xd5\xb7\xc3\x6c\x98\x98\x67\x97\xec\x87\x8d\x78\x73\x93\xdd\x3c\xbb\xd2\x6e\x5e\x2c\x7f\xad\xdd\x3c\xfb\x4b\xdb\xcd\x8b\xf5\x9d\xd2\x8e\x61\x73\x43\xb7\xa2\xa6\xdd\x8d\xc1\x7e\xbb\x1b\x79\x16\xa5\xdb\x1b\x55\x2d\x2c\x95\x7a\xa9\xd9\xee\x99\x7f\xa9\xe1\x8d\x77\x94\xec\xdc\x8e\x52\x05\xa5\x3f\xbe\xa3\xd4\x54\xe7\x15\x76\x94\x2a\x3a\x45\x46\xe3\x4d\x76\x94\xec\xa7\xdf\x51\xca\x9e\x38\x50\x37\x55\x8e\x15\x3f\x76\xa6\x40\x97\x4b\xff\x92\x3b\x44\xf0\xc4\xfb\x56\x7e\x68\xce\xad\x55\xdb\xa1\x72\xeb\xf1\xc4\x9c\x5b\xeb\x4e\x5c\x9d\x8c\x03\x6f\x4e\xc3\x50\x87\x9f\x85\x44\xba\x38\xb1\xaf\x3a\x91\x8e\xd7\x6a\x9f\x44\x9a\x2f\xc4\x7e\x89\xb4\x38\xca\x67\xda\xb2\x22\x98\x60\xe9\x4e\x0e\x6a\xcc\xbb\x85\x24\x69\x3c\x69\x23\x49\x7a\xfe\x69\xbf\x79\x47\xcd\x74\x50\x51\x10\x3d\x7c\x31\xe0\x80\x7b\x12\x53\x45\x60\xb4\xc4\xf1\xc4\xf5\xa2\x01\x9d\x07\xd4\xe2\x95\x40\x59\x51\xe0\x87\xc8\xa3\xc5\x59\x76\x6b\x4d\x70\xed\x05\x74\xcf\x09\x26\x65\x4f\xf9\xfc\x90\xc5\xe1\x0a\x9f\xf1\xc4\x77\x36\xe1\x14\xfc\xf2\x30\x65\xcf\x21\xb7\xe8\xfc\xb0\x26\xbc\xd5\x04\xb6\x38\x67\xf1\xf7\x4d\x57\xfc\xf0\x5b\xa2\x72\x98\x44\x65\xbb\x34\x27\x2a\xaa\xed\x50\x89\xca\xc7\x77\xe6\x44\x45\x77\x60\xfb\xe4\xa3\x38\xab\x4d\x96\x8e\x37\xc3\x57\x0e\x23\x2b\xda\x54\x49\x5a\x8a\x93\xfc\xaa\x93\x96\x78\xdd\xf6\x49\x5a\xf8\xa2\x7c\x05\x49\xcb\xc7\x77\xff\xdf\x93\x16\xd3\x3b\x0f\x82\xe8\x41\x92\x96\xe7\x16\xd9\xb6\x75\x7d\xa0\xa6\xf5\xc7\x91\x6d\xbb\xdc\x33\xb2\x6d\x97\xcf\x20\xb2\x95\xbe\xfb\xac\x06\x6c\xad\x80\xa0\xba\xc8\x31\x91\xb9\xcf\xc3\xc3\xaf\xf9\x97\x90\xe5\xbb\xc7\xf8\x3a\x32\x7f\x73\x7d\xb7\xeb\x7f\xff\xe2\xfb\x3e\x7a\x9a\x98\x70\xc9\xa1\x7d\x50\x80\x36\xda\xe5\x1c\xc0\x14\xd4\xa4\x08\x16\xc1\x95\x3e\xc3\xbe\xa7\x51\x14\xc8\x25\xfe\xc0\xdc\xdb\xb0\x37\xb6\x02\x6b\x1d\xf6\xde\x5e\x5d\x7d\xe8\x85\x2b\xef\x4e\x20\x1e\xf0\x26\x85\x40\x16\x6f\x61\x16\x5a\x40\x4e\x60\x21\x9c\xf7\x3d\x80\x49\x75\x2e\x0f\x0f\x4a\x97\x17\x14\xb2\xd1\x7b\x15\xb9\x52\xa1\x23\x31\xe7\xcc\xeb\x12\x0a\xcf\xf7\x9a\x1a\xcc\x21\x67\xd1\x9d\x44\x12\x01\xe0\xbb\x1d\x57\xee\xc3\x43\xa5\x03\x13\xd0\x1d\xff\x9e\xce\xf1\x7d\x19\x93\x24\xff\xbd\xa1\xc1\x7d\xcc\xc7\x1c\x0a\xa5\x44\xd2\xf8\xc2\xcd\x6c\xcd\x22\x43\xde\x54\x8a\xc0\x95\x70\x57\xbc\xee\xc3\xef\xf3\x79\x54\x55\xbb\x01\x79\x29\x57\x6b\x6c\x20\xc2\x46\xd2\xa0\x5c\xcb\x44\x24\xc1\x94\xaa\xa4\x48\x0a\x72\xad\x06\x92\x86\x77\x96\xdf\xae\xa8\x48\x91\x8f\x61\x8b\x81\xac\xb5\xf6\x9e\x1e\x25\x48\xad\x38\xc3\x1a\x3f\xa0\x97\xdb\x44\x19\xf2\x26\x79\x40\x51\xf2\xf1\xf0\x7a\x74\x35\xe8\xc9\x2e\x5c\xfc\x02\x96\xa6\xc2\x56\x06\x4c\xe5\x65\xde\x93\x6b\x5a\x97\xd9\x63\xcb\xe6\x04\x43\xd3\xe1\x44\x23\x14\xbf\x38\x91\x21\xad\x02\x3a\xcf\x1d\xe6\x23\x32\x0b\xe7\x05\xe0\x1f\x0d\x70\x02\x60\x01\x69\xd0\x68\x94\xd8\x9e\x20\x21\x2f\xa4\x53\x6b\x49\x3a\x9c\x0f\x32\x14\x98\x0f\x0c\xcf\xbd\x40\x72\x4c\x33\x44\xb1\xb0\xf5\xe2\x7f\x26\xf8\xc1\x0f\xd1\xe3\x85\xa8\xcb\xb3\x55\x78\x9d\xc9\xfa\x1b\xa8\xda\xc2\x0e\xf6\xe1\x89\x25\xde\x41\x51\x26\x52\x45\x91\x2f\xf2\x8f\x73\xec\x76\x50\x87\x2c\x29\xf9\x07\xfb\x81\xfc\x63\x8e\x7b\x17\x6f\x8e\x55\x32\x31\xbe\x81\x75\x0d\x51\x80\x28\xd8\xed\x6e\xe9\x3d\xe1\x07\x53\x80\xd4\xec\xbe\x7b\xd9\x11\xfd\x7b\x97\x42\xda\xa3\xc8\x56\x96\x9c\xa4\xc7\xc4\xf5\xee\x02\x4b\x22\x14\x88\x1f\x8f\x38\xea\x47\xb6\x71\x94\x0a\x80\x3c\x27\x49\x54\xa5\x86\xdf\x84\x34\x38\x13\xcf\x12\x4b\x4a\x9a\x32\xd9\xc7\x49\x13\x46\x93\xfb\x50\xf2\x21\x79\x46\xd0\xd4\x1e\x9f\x91\xed\x50\xc3\x84\xb0\xc9\xc0\xa8\x1f\x05\x29\x8b\xc8\xfe\xa9\x62\x1f\xc2\xbd\x70\x71\xf1\x22\x16\x1a\x6f\x5e\x91\x30\x82\x5c\x88\x26\x99\x20\xcc\x2b\xf5\xc1\x1e\xe0\xac\xe0\x22\x5a\xa5\x91\x24\xbe\xc3\x86\x47\xcc\x81\x77\xc3\x05\xcb\x7c\x02\x64\xe3\xb2\x4c\x51\x75\xf2\xcf\x5c\x2e\xb9\x0f\x17\x58\xad\xc3\x33\xc1\xa5\x6a\xc2\xa5\x2f\xb5\xca\x9f\xaa\x2f\xe0\x44\xc9\x27\x70\x1e\x39\xf5\xc5\xdd\x5d\x80\x65\x94\xe4\xae\x7c\x01\xeb\x00\x87\xfa\x39\xad\x26\x7a\xd8\x2c\xbc\x4d\x90\x63\x70\xce\x89\x14\xd0\x43\xfd\xd2\x27\x10\xc4\x66\x01\xff\x4a\x8a\x18\xdd\x1b\xb0\xe0\x92\x7f\x13\x25\xe7\x46\x39\x08\x29\x51\x02\x47\xd2\x7f\xe1\x1f\xf2\xea\x35\x72\xeb\x0a\x76\x36\xdd\x66\x18\xd1\x2d\x32\x7a\xa9\x45\xa1\xbd\xb8\xfd\x57\x9a\x99\x76\x56\x7a\x66\x05\x84\x00\xb7\xe7\xa3\x4e\xb7\x16\x73\xea\x0d\x01\x4f\x82\x15\xfe\x77\x77\x16\xfa\xbf\x1e\x85\x1b\xbf\x4a\x90\xdd\x84\xd4\xa7\xc1\x1c\x4a\x46\x98\x49\x72\x43\x62\x8a\x63\xf1\x80\x4b\xaf\x68\x56\x82\x3a\x25\xd5\xd4\x83\xf4\x3b\x35\x91\x46\xa0\x95\xfd\xa9\xb7\x21\x72\x69\xf5\x12\xad\xf0\xfd\x7c\xfc\x04\x57\x87\xa8\x2b\x5d\x86\x33\xbc\xbc\xb9\xe8\xd9\x0b\xd2\x39\x9f\x60\x2e\x6a\xd8\x9f\xa9\x4d\xed\x62\xdc\x26\xb5\xd3\x8f\xa7\xa3\x0f\xad\x51\xbb\x99\x0c\x07\xad\x11\x9b\x5e\x4d\x4f\x51\xb4\x46\xa0\x97\x81\xaa\x36\x90\x4f\x9e\xdc\x68\x08\x7d\x82\x8a\x06\xfb\xe4\xb9\x92\x27\x03\x3f\xc9\xef\x89\xd0\xcf\xc0\x6d\x2f\xf8\x1b\x41\xb1\x42\x6b\x0e\xd9\xb4\x8e\x7f\x48\xb2\x31\x00\x8a\xb3\x68\xed\x21\x60\xe6\x74\x51\xf3\xe4\x2d\x3e\xee\x9a\xfb\xa0\xdd\xc9\x80\x7f\x1a\xd1\x90\x06\x15\x7a\x5f\x78\x1b\x37\xa2\x76\x69\x77\xed\xae\xf9\x09\x8f\x74\x7b\x8c\xc3\x70\xb7\xc7\x30\x1e\x8f\x5a\x4b\xbb\xb2\x90\xd1\x1c\x82\xd8\x7e\xc9\x17\x5b\x24\xf8\x33\x32\xa4\x5e\x2c\x93\x7a\x49\x17\x65\x8b\x5e\x06\x75\xea\xc3\x0c\x53\x69\x4f\x96\x62\x75\x7f\x87\x01\x03\xea\x44\xd6\xc8\xad\x3d\xe4\x6a\x13\xd5\x19\x53\x8f\x43\x96\x78\x23\xa7\x65\x6d\xa6\x2d\x99\x82\x6b\x04\x4e\x17\x2c\x2c\xa3\x9f\x16\xcb\x15\x22\x4f\xf6\xbd\x1d\x4d\x27\x04\xe0\x8e\x84\xf8\x63\x59\xfa\xb3\x97\x23\xb7\xbc\x88\x39\xca\x7d\x9e\x67\x76\xd4\x4f\x3f\x39\xc1\xef\x5d\xed\x59\x4b\x3d\x2e\x1c\xac\xca\xdf\x2e\x5d\x84\x10\x42\xf8\xe9\x46\xb2\xf6\xec\x8d\xe3\x91\x1f\xdf\x35\x50\xe0\xdb\x9c\x88\xff\xfc\xf1\xdd\xc1\x65\xac\xad\xc7\xba\x42\x36\x41\x55\xd6\x6e\x5e\x17\xbf\xe3\xdd\x08\x55\x05\x0d\x0d\xac\xca\xf7\xcf\xdb\xc7\x55\x49\xf8\x1b\xb0\x3e\xbe\xb2\xcf\x09\x59\x0d\xa0\xaa\x12\xd3\x32\xa7\x6b\x01\x9c\x4c\xa8\xf9\x44\xec\xf5\x78\x58\x85\x79\x1b\xa8\x67\x40\xba\x36\xd8\x37\xc3\xb3\x34\x00\xb5\x01\x68\xea\x5b\x21\x8d\x10\x4d\x12\xd1\x40\x9a\xfa\x94\x49\xfb\x98\xa6\x28\x7f\x03\xb5\x0a\xab\xfb\x0d\xd5\x9e\x09\xaa\x89\x6c\xea\xef\xc5\x36\xb3\x0c\xcf\x02\xe1\x32\x88\xd4\x1c\xe2\xd6\x74\xbd\xc7\xcf\x97\xf8\x73\x73\x0c\x70\x17\xc3\x8b\x02\xb4\xe1\xe7\x3a\x05\xa8\xdd\x32\xfc\xe6\x3b\x8e\xe8\xfd\xc6\x50\xa8\x1c\xaa\xa5\x5a\x2a\xa2\x00\x0e\x38\xaf\xb3\x6d\x85\x03\x5a\xdd\xb4\x97\x04\x9b\x6c\x59\x21\x89\x56\xb7\xec\xe3\x9f\xf1\x9f\xf4\x77\xc6\x94\x77\xe0\x92\xd4\xe9\x5f\xb2\xaf\xf4\x04\x1b\x4a\xca\xee\x9b\x7b\x90\x1f\xd6\x74\x20\x3f\xf0\xe6\x89\xf7\x8c\x27\x9c\x63\xc1\x83\x7c\x95\x15\xf8\x0c\xfd\x07\x07\xf5\xc6\xa3\x01\x2e\xa3\xbb\x2c\x39\x08\x20\x4d\x8c\x80\x8d\xa9\x31\xd5\x1c\x25\x1e\x71\x93\x1b\x21\x9b\x53\xff\xd5\xc9\x45\xfc\x10\x3c\x27\xd0\xce\x42\xde\xe3\x2f\xd3\x15\x13\x93\x64\x56\x01\xf3\x02\x16\xdd\xd7\x1c\x76\xc9\xe6\x15\x61\x23\x1e\x32\x61\x7f\xd5\x1d\x72\x4d\x43\x66\x53\xb7\x24\x0b\x42\xd8\x50\xdb\xba\x27\x6a\xd8\x54\x7e\x5f\xbe\xfc\xb7\x82\x5a\x0b\xf0\x23\x5f\x00\xcc\x01\xcb\x16\x20\x9f\x19\x36\xc2\x21\xf5\xda\x85\x16\x86\x5e\x3f\xe1\x8f\x86\x7e\x48\x3a\x30\xd3\x56\x7e\x49\x43\x5a\x37\x6d\xd2\x9a\x0c\xaf\xdb\xfa\x01\x92\xcf\xf3\x7a\xd4\x1a\xad\xcb\xd1\xd9\xb0\x35\x62\x1f\x47\xd7\xd3\xd6\x88\x5d\x0f\x27\xad\xd1\x9a\x8e\x2e\x86\x78\xc8\x55\x38\x62\x6b\xba\x3b\xe5\x54\x9b\xfe\xde\x2a\x43\x4a\xf3\xd8\xa4\xce\x2b\xca\x63\xd2\x10\x82\xe4\x37\xa0\xd0\x27\x49\x4f\x1e\x9d\x93\xc7\x5e\x53\xd7\xdd\x70\x4d\x64\x57\xf1\xa0\x23\x23\x4e\xe6\xdf\x10\x4a\xf5\xb7\x6c\x5b\x7d\x06\xff\x44\xbe\x4c\x11\xe7\xc0\x27\xf1\x41\xc0\xf8\x28\x1e\x3f\x81\x89\x2f\x44\x05\x9e\x13\x33\x12\xc7\xf8\x52\x27\xca\x3b\x04\xf4\x33\xa7\x2b\xcf\xb1\x69\x70\x0c\xc1\x74\x9c\xdc\xf2\xa3\x7d\x90\x90\x31\xcf\x46\xf8\x12\x07\x24\x53\x0f\x3f\x5a\xce\x26\x7e\xfa\x82\xeb\x5b\x73\x60\xb0\xee\xc9\xc6\x54\x46\x08\xa3\xe5\x21\xb3\x5e\x7c\x44\x33\x3e\x4d\xc8\xb9\x3f\x3c\xa8\x63\x48\x35\x38\x6c\x97\x7c\x0b\x83\xc3\x67\x40\x20\x13\xc0\xf7\x04\xc4\xa3\x38\x2a\x78\x0e\x52\x3d\xee\xfc\x14\x07\x10\xf9\x6f\x03\x88\x57\x9d\xf8\x27\x76\x8d\x70\x5e\x41\x82\x38\x9f\x91\x09\xcb\xda\x9a\xaf\x92\x84\x45\x72\xb9\x80\x87\x38\xae\x90\xb8\xc8\x7f\x1c\x43\x66\x2f\x9b\x0d\x8f\x3b\x48\xa2\x77\xc3\x33\x0b\x5d\x56\x51\x35\x9e\xfd\x9c\x90\xcf\x13\x7e\x69\xce\x59\x30\xdd\xc6\x6e\x97\x56\x2e\xc0\x6a\x7b\x8d\x03\x6f\xcb\x6c\x1a\x94\xf5\xac\x26\xed\x2f\x89\xb4\xf8\xda\x19\x4d\x8b\x2b\x2f\x27\xf8\xbc\x54\xf4\x6a\xac\x7e\xfa\x8f\x84\xd7\x82\x39\xd4\xb7\xa2\x95\x86\x9d\x5c\x3b\xec\xf1\x07\x76\x79\x34\xea\x57\xb0\x16\xf9\xdd\x99\x0a\xf9\xaf\xf1\x65\x9a\xb4\xe1\xda\x2f\x0d\x60\x9c\x73\x10\x92\x21\x5d\xd6\x3f\xc6\xd2\x7d\x53\x1a\xf5\xbe\x4d\x9c\xd2\x88\xb7\x77\xb2\xff\x1c\x45\x93\x32\x8b\xe5\x0b\xa1\xa4\x09\x73\x37\x63\xa3\x2f\x4d\xd5\xd8\x81\x9b\x9d\xb1\xd5\x66\x01\x9d\x47\xfc\xa5\x92\x96\xaa\xaa\xd8\x1a\x1a\x84\xae\x5c\xcc\x2a\x06\x9b\xf2\x40\xd5\x38\x4c\xa5\x5f\x12\xa8\x19\xa2\xf8\xa7\x59\xc4\x3b\x12\xd2\xde\x53\x1f\x90\x11\xcf\xe3\xef\xc5\x8c\x79\x98\x7a\x89\xaf\xaf\x6e\x31\x5a\xf0\xc1\xe2\x61\x6c\x9b\x62\x32\x95\x83\x54\x2a\x5d\x41\x53\x5d\x65\x5e\xd1\x11\x47\x35\x80\xc7\xa9\xc3\x96\xae\x3c\x04\x2d\x18\xc8\x0f\x26\x41\x1b\xbe\xcd\x91\x39\x34\xaf\xa2\x9b\x3c\x2f\x9d\x3a\x29\x5f\x38\x61\xdd\x3b\xb3\x02\x1a\xe5\x4e\x57\x67\xcf\x53\x5b\x2f\xd4\x9e\x82\x9a\xce\xff\x05\x00\x00\xff\xff\xeb\x58\x9f\xfd\xb6\x74\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 29878, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

