// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x6f\x73\xdb\x36\x93\x7f\x9f\x4f\xc1\x53\x9f\xe7\xe6\x49\xa7\x92\x2e\xb9\xf6\xda\x49\x6d\xcf\x38\x96\x9c\x68\x1a\xdb\x3a\x4b\xce\x5d\x5f\x75\x28\x11\x92\x10\x53\x24\x4b\x42\x72\x5c\x8d\xbf\xfb\xed\xe2\x0f\xff\x02\x34\x29\x52\xae\x93\x4b\x67\x3a\x26\x09\x60\x77\xb1\xd8\xfd\xed\x2e\x04\x32\x47\xff\x36\xb8\x3a\x9b\xfe\x3e\x1e\x5a\x2b\xb6\x76\x5f\x9c\x1c\xf1\x3f\x96\x05\x17\xc4\x76\xe0\x02\x2f\xd7\x84\xd9\xd6\x7c\x65\x87\x11\x61\xc7\x9d\x0d\x5b\x74\x7f\xe9\xa4\x9b\x56\x8c\x05\x5d\xf2\xe7\x86\x6e\x8f\x3b\xff\xdb\xbd\x39\xed\x9e\xf9\xeb\xc0\x66\x74\xe6\x92\x8e\x35\xf7\x3d\x46\x3c\x18\x37\x1a\x1e\x13\x67\x49\x32\x23\x3d\x7b\x4d\x8e\x3b\x5b\x4a\xee\x02\x3f\x64\xa9\xce\x77\xd4\x61\xab\x63\x87\x6c\xe9\x9c\x74\xf9\xcd\x0f\x16\xf5\x28\xa3\xb6\xdb\x8d\xe6\xb6\x4b\x8e\x5f\x29\x42\x8c\x32\x97\xf0\x6b\xb8\xdb\xed\x7a\x03\x9b\xd9\xbd\xf7\x7e\xc4\x90\xf8\xc3\x83\x05\x57\x40\xf2\xa8\x9f\xf4\x3b\x39\x72\xa9\x77\x6b\x85\xc4\x3d\xee\x50\x60\xd9\xb1\xd8\x7d\x00\x72\xd0\xb5\xbd\x24\xfd\xc0\x5b\x76\xac\x55\x48\x16\xc7\x9d\xfe\xc2\xde\x62\x87\x1e\x3e\x2b\x0c\x8d\xd8\xbd\x4b\xa2\x15\x21\x4c\x11\x60\xe4\x33\xeb\xcf\xa3\x28\x1e\x0f\xd7\x7d\xea\x39\xe4\x73\x0f\x9f\x4a\x0a\xd1\x3c\xa4\x01\x4b\x0f\xf9\x64\x6f\x6d\xf1\xb4\x93\xd7\xb3\x15\x85\x73\x20\xf4\x29\xea\x87\xa8\xe1\x90\xc0\xd5\xeb\xde\xab\xde\xab\x9f\xd5\x83\xde\x9a\x7a\xbd\x4f\xc0\xd3\x81\x89\x77\xd7\x36\xf5\x44\xff\xdd\x8e\x2e\xac\xde\xf4\xf4\xdd\xbb\xe1\x60\x46\xbd\x87\x07\xe8\x27\x85\x11\x23\x76\x3b\xe2\x46\xa0\x21\xe0\xd0\x5f\x53\xf7\x56\x36\xf2\x06\xcf\x79\x78\xe8\x28\xa5\x1e\xf5\x85\x70\x52\xfe\xbe\x34\x8d\x93\xa3\x99\xef\xdc\xcb\x87\x9e\xbd\xb5\xe6\xae\x1d\x45\xc7\x1d\xb8\x9c\xd9\xa1\x25\xfe\x74\x1d\xb2\xb0\x37\x2e\x53\xb7\x0b\xfa\x99\x38\x5d\xe6\x07\x1d\x2b\xf4\x61\x19\xb1\x37\x5d\x82\xb1\xc0\x32\xc4\xfc\x1c\x1a\x13\x43\x8b\x80\x29\x11\x18\xe9\x6e\xa8\xa3\xfa\xe4\x7a\x39\xa1\x1f\x38\xfe\x9d\xa7\xb8\xa0\x84\x24\x4c\x3a\x73\x61\x37\x8c\xf9\x5e\x56\x48\x10\x64\xb9\x74\x09\xd8\x9d\xeb\xda\x41\x44\x1c\xb5\x92\xa2\xb3\xd4\xa9\xe8\x84\xb2\x88\x5e\xea\xb1\x1d\x2e\x71\xa1\xbe\x93\xb4\xe2\xe6\x14\x5b\xbe\xde\x81\x1d\xb3\x8d\xc2\xae\xef\xb9\xf7\xd9\x2e\xd0\x69\x2a\xe4\x48\x94\x01\x3a\x87\x61\x25\x94\xd0\x2e\xbb\xc0\xb6\x40\xea\xd9\x8c\xec\x0b\x25\x66\x16\xc1\xb6\xa8\x93\x2c\xd7\x2c\xb4\x3d\x50\x79\x6e\x11\xd5\xa2\x48\xb5\xca\x4e\x99\x95\x50\x5d\x3b\x96\x1d\x52\xbb\x4b\x3e\x03\x77\x87\x00\x65\x16\x6e\x48\xec\x7d\xf9\x85\x40\x83\x41\xf6\x2b\x09\x0e\x85\x69\x14\xd1\xe3\xa8\x0f\x83\xf2\xf3\xb2\x33\x53\xda\xb8\x85\x09\xac\x89\xb7\x51\xf6\x2d\xae\xb9\x98\xae\x3d\x23\xae\x4b\x9c\xd9\x7d\x5e\x05\x39\x0e\x2e\x2d\x90\x94\x16\x2d\x89\x06\x21\x89\x00\xd4\x32\x6e\x13\x0f\x0f\x37\x9e\x47\xbd\xe5\x51\xdf\xa5\x45\xba\x15\xc6\xc3\x22\x15\x56\x04\x50\x2a\xdf\x2f\xa5\xaf\xc1\x68\x32\xbd\x1e\xbd\x45\x75\xd9\x45\xd3\x28\x88\xd1\xdf\xb8\x19\x0d\x66\x74\x9c\x2c\x53\xde\xad\x12\x48\x10\x0f\xac\x12\xbf\x4b\x2f\x0b\x42\x93\xec\x0a\x7f\x34\xba\x46\x66\x34\xe8\xe4\xa1\x41\x33\xe7\x78\xc6\xa3\x31\x4e\x56\xa7\xe0\x9c\xea\x8a\xda\x55\xd3\x53\x3d\x5c\x5b\xc7\xd9\xca\x79\x43\x2d\x07\x28\xae\x54\xcc\x15\xb8\x15\x5a\x53\xf3\xfa\x70\xaa\xb3\x79\xcd\x32\x15\xd5\xbc\x8f\xf5\xeb\xa4\x69\x68\xfe\x9c\xc4\x26\x60\x74\x4d\x0a\x0b\x14\x93\xaf\x48\x46\xc2\x95\xa0\xa6\xc1\x29\xad\x57\x64\xf4\x79\xc3\x87\xea\x1c\x43\xea\x54\x2b\x61\xd6\x41\xf4\x3d\x8b\x6e\x64\xb2\x78\x75\x19\xd2\xe5\x8a\x99\xa1\xa6\xcc\xec\x53\xb4\x5d\x1a\xb1\x2e\xf5\x20\x0d\x22\x46\xaf\x52\xa4\x0d\x3a\x15\xf0\xfc\x1d\x26\x01\x7a\xed\x61\x53\x3d\x8d\x3d\xc6\x2b\x88\x4c\xac\x82\xa8\x5d\x4e\xdb\xa5\x89\xd3\xd6\x5e\x02\xd8\xb3\x43\x98\x42\xd1\x63\x2c\x7b\xce\xe8\xb6\x18\xe2\x72\x11\x78\x4b\xc2\x08\xad\xdf\x10\x83\xf7\x09\xbb\x58\x0d\x44\x6f\xfa\xfd\xbb\xbb\xbb\x1e\xc4\xd1\x10\xfe\xef\xcd\xfd\x75\x5f\xe4\xe1\x90\xb5\xba\xc4\x8e\x48\xd4\x77\x6d\x46\x22\x5d\x54\xb9\x9a\x4c\x87\x97\x53\x5d\x28\x69\x06\x36\x6a\xae\x07\x41\x1c\x49\xbc\x0d\xc8\x69\x47\x8d\x9c\x9a\x82\xa1\x8f\xc3\xeb\xc9\xe8\xea\xf2\x69\x70\x28\x17\xce\x53\xb7\x70\x03\x58\x21\x2b\x06\x15\x91\x78\x2d\xa0\xcf\xf6\xad\xc0\x76\x1c\x48\x65\xb0\x5e\x88\xc8\x16\xe6\x7d\x1f\xad\xb4\x65\x42\xe8\xdf\xe5\x4b\x03\xa4\xbd\x26\x6b\x48\xd3\x45\x1d\x2a\x3a\xce\x5c\x7f\x7e\x8b\xf9\x7e\x77\xed\x74\x5f\xab\x0b\x7f\xb1\x80\x9a\xab\xfb\x2a\x93\x42\xec\x76\x8c\xac\x03\xd4\xaf\xd5\x81\x2a\x06\xc4\x8a\xde\xbc\x11\x17\x7f\x70\x32\x40\xbd\x63\xf5\xf2\x01\x33\x23\x57\x86\xdd\x7f\x66\x33\x94\x54\x37\xf0\x23\xe2\xbe\x2a\x60\x33\x1a\x71\x3e\xeb\x11\xa6\x6d\xf1\x11\xdc\x48\x41\x3f\xd6\x8c\x41\x5e\x8e\xac\x3a\xd6\xc2\x0f\xc1\x8a\x37\xeb\xf5\x3d\x5d\x80\x3a\x17\x74\x39\x5f\x91\xf9\xed\xcc\xff\xcc\xdb\xba\x11\x96\xae\xdf\xa9\xb6\x92\xe4\x0f\x69\x0a\x27\x10\xa4\x79\x3d\x49\xfe\xb4\x3a\x0b\xdb\xc5\x6c\xec\x5f\x9f\x22\x28\xa7\x84\x7d\x9d\xb9\x14\x16\xa7\xf7\x9e\x3a\x44\xd0\x1d\x9d\xbf\x84\xd2\x5b\x60\x90\x2a\x27\x15\x42\xd2\x45\x49\x2a\x29\x29\x4d\xed\xd9\xe8\xbc\x37\xc5\x92\x5d\x9f\x55\x52\x2f\xd8\x30\x01\x65\xfa\xb9\xe6\xd5\x96\xb4\x88\x0a\x2f\xb9\xe7\x80\xb1\xa2\x8e\x43\xbc\x18\xc9\xf8\x9d\xc6\xf6\x51\xf7\x2f\x74\x92\xb4\xcd\x8e\x9b\x87\x31\x77\x8c\x97\x4f\xf1\x8d\x17\x47\x10\x7c\x7c\x6d\x62\x41\x05\xef\x5c\xc9\x9f\xe6\x09\x46\xb3\x56\x6c\x56\x7e\x48\xff\x42\x1f\x75\xbb\xf8\x58\x8f\x60\x29\xbb\xc6\x4e\xdd\x65\xe8\x6f\x82\x2e\xba\x32\x71\x0c\x38\x95\x71\x19\xb0\x3b\x3e\xc4\x8a\xaf\xba\xd1\x3a\x17\x89\x44\x69\x69\x08\xea\x05\xdf\x01\x42\x9c\x98\xda\x8b\x80\x39\x53\xcf\x10\xa7\xd3\x8b\x9a\x5b\x3a\x73\xff\xf7\x5c\x89\x3a\xfb\xa8\x2a\x53\x05\xef\x1a\xf2\x70\x8b\x68\x26\xbc\xcb\xa1\x11\xde\x38\x55\xfc\x6b\xef\x99\xe5\xfc\x52\xc8\x80\x39\xe2\xe8\x9c\x57\x40\xa5\x13\xd6\x16\x12\xa5\x4d\x7b\x59\xcf\x6e\x77\x47\xd9\x2a\xab\xac\x6b\xb2\x80\x50\xbb\x42\x29\xb5\x38\x1e\x8a\x76\x8e\xdf\x52\x81\x66\x99\xfa\x28\x89\xc6\x35\x0a\x19\x37\x06\x1b\xad\x51\xa6\x53\x0c\xba\xe8\x46\x20\xf0\x7c\x15\xef\x23\xcd\xd0\xa7\xe3\xd2\xf2\x7c\x7a\xfa\x76\xd2\xa3\xe7\xe3\xd3\xb3\xdf\x86\xd3\x49\xef\x86\x7a\x4c\xe7\x9a\x82\xae\x9d\x2c\x7b\x60\xcf\x6f\x09\x33\x3b\xc5\x58\xb4\xeb\x73\x00\x53\x16\xb0\x9f\xec\xc3\xeb\xeb\xab\xeb\x1a\xa2\x93\x30\xf4\x43\xb3\xe4\x43\xde\xdc\x8a\xe0\x2a\x31\x2e\x97\xff\xed\xef\xd3\x61\x0d\xf1\x67\xf7\x90\x84\x19\xa5\x7f\x8b\xad\xf5\x85\x2f\x66\x5f\xc6\x2a\x5c\xb3\x4b\x55\x1e\x3e\x94\xa9\xa4\xd4\x03\xaa\xe0\x20\x04\x75\x5d\x1a\x7c\xb4\xe6\xf8\x52\x87\x4f\x22\x66\xf3\x66\x40\x27\x43\x80\x91\x6a\xc7\xc0\x5e\x62\xf2\x32\xf0\x37\x74\x10\xb9\x79\x99\x99\xb1\x4c\x07\xf5\x7b\x20\xe6\x7c\x2f\x1e\xff\x87\x4c\x27\x79\xda\x57\xd8\xf4\x2c\x59\xa2\x44\xf7\xd2\xd6\x6b\xa8\x3e\xe5\x4d\x87\xd2\xbc\x64\x51\x4d\xf1\x8f\x78\x77\x46\xef\x62\xb6\x7b\xab\x5d\x0c\x6f\x41\xeb\xc2\x45\x6b\x28\x3d\x81\x80\x43\xe9\x5c\x70\xa8\xa6\xf2\x72\x40\xca\x68\x9c\xcf\x74\x6f\x85\xf3\xd1\x7b\xeb\x5b\xb7\x5d\x9e\x7d\xa4\xdd\xee\xd5\x16\x67\x4f\x5b\x2d\xcd\x83\x8d\xb9\x5c\x8a\x1b\x0f\x55\x2f\x9d\x8d\x6f\xcc\x05\x13\x70\xd7\x2c\x39\x0c\xa9\x50\x18\x69\xa6\xf5\x55\x57\x46\xc9\x4a\xed\x53\x1a\x89\x65\x68\xa5\x36\xb2\x66\x7e\xc8\x6d\xc1\x87\x4a\x65\xfd\x45\x97\x4b\x59\x67\xca\xf9\xc5\x97\x5b\x45\x49\x9f\x33\x95\x51\xed\xce\xcd\x58\x47\x81\x14\x5f\x42\x21\xc5\xc5\x3c\x5c\x25\xd5\x46\x56\x8b\x0b\x56\xcf\xe9\xeb\xba\x7b\x1c\x64\x81\xd5\x9e\x01\x16\x46\x3e\x83\xd8\xfa\xc4\x3b\x91\x4e\xc9\x4e\xa4\x73\xe0\x9d\xc8\x41\xc9\x4e\xa4\x53\x6d\x27\x72\x50\x67\x27\xb2\x38\xd7\xaf\x3a\xde\x3a\x4d\x76\x22\x07\xdf\x76\x22\xbf\xf0\x9d\xc8\x41\xe9\x4e\xa4\xce\xbf\xf6\x9e\x99\x31\x82\x0e\xbe\x88\x9d\xc8\xc1\x33\xdc\x89\x74\xca\x77\xf3\x06\xa2\xf8\x74\xce\x47\x97\x57\x83\xea\xdb\x61\x0e\x4c\xcc\x77\x4a\xf6\xc3\x46\xbc\xb9\xc9\x6e\x9e\x53\x69\x37\x2f\x96\xbf\xd6\x6e\x9e\xf3\xa5\xed\xe6\xc5\xfa\x4e\x69\xc7\xb0\xb9\xa1\x5b\x51\xd3\xee\xc6\x60\xbf\xdd\x8d\x3c\x8b\xd2\xed\x8d\xaa\x16\x96\x4a\xbd\xd4\x6c\xf7\xcc\xbf\xd4\xf0\xc6\x3b\x4a\x4e\x6e\x47\xa9\x82\xd2\x1f\xdf\x51\x6a\xaa\xf3\x0a\x3b\x4a\x15\x9d\x22\xa3\xf1\x26\x3b\x4a\xce\xd3\xef\x28\x65\x4f\x1c\xa8\x9b\x2a\xc7\x8a\x1f\x3b\x53\xa0\xcb\xa5\x7f\xc9\x1d\x22\x78\xe2\x7d\xab\x20\x32\xe7\xd6\xaa\xed\x50\xb9\xf5\x78\x62\xce\xad\x75\x27\xae\x4e\xc6\xa1\x3f\x27\x51\xa4\xc3\xcf\x42\x22\x5d\x9c\xd8\x57\x9d\x48\xc7\x6b\xb5\x4f\x22\xcd\x17\x62\xbf\x44\x5a\x1c\xe5\x33\x6d\x59\x59\x98\x60\xe9\x4e\x0e\x6a\xcc\xbb\x85\x24\x69\x3c\x69\x23\x49\x7a\xfe\x69\xbf\x79\x47\xcd\x74\x50\x51\x10\x3d\x7c\x31\xe0\x82\x7b\x5a\xa6\x8a\xc0\x68\x89\xe3\x89\xe7\xb3\x01\x99\x87\xc4\xe6\x95\x40\x59\x51\x10\x44\xc8\xa3\xc5\x59\x76\x6b\x4d\x70\xed\x87\x64\xcf\x09\x26\x65\x4f\xf9\xfc\x90\xc5\xe1\x0a\x9f\xf1\x24\x70\x37\xd1\x14\xfc\xf2\x30\x65\xcf\x21\xb7\xe8\x82\xa8\x26\xbc\xd5\x04\xb6\x38\x67\x09\xf6\x4d\x57\x82\xe8\x5b\xa2\x72\x98\x44\x65\xbb\x34\x27\x2a\xaa\xed\x50\x89\xca\xc7\x77\xe6\x44\x45\x77\x60\xfb\xe4\xa3\x38\xab\x6d\x2d\x5d\x7f\x86\xaf\x1c\x32\x9b\x6d\xaa\x24\x2d\xc5\x49\x7e\xd5\x49\x4b\xbc\x6e\xfb\x24\x2d\x7c\x51\xbe\x82\xa4\xe5\xe3\xbb\xff\xef\x49\x8b\xe9\x9d\x07\x41\xf4\x20\x49\xcb\x73\x8b\x6c\xdb\xba\x3e\x50\xd3\xfa\xe3\xc8\xb6\x5d\xee\x19\xd9\xb6\xcb\x67\x10\xd9\x4a\xdf\x7d\x56\x03\xb6\x76\x68\xa1\xba\xac\x63\x4b\xe6\x3e\x0f\x0f\xbf\xe6\x5f\x42\x96\xef\x1e\xe3\xeb\xc8\xfc\xcd\xf5\xdd\xae\xff\xfd\x8b\xef\xfb\xe8\x69\x62\xc2\x25\x87\xf6\x41\x01\xda\x68\x97\x73\x00\x53\x50\x93\x22\xd8\x16\xae\xf4\x19\xf6\x3d\x65\x2c\x94\x4b\xfc\x81\x7a\xb7\x51\x6f\x6c\x87\xf6\x3a\xea\xbd\xbd\xba\xfa\xd0\x8b\x56\xfe\x9d\x40\x3c\xe0\x6d\x15\x02\x59\xbc\x85\x59\x68\x01\x39\x81\x85\x70\xde\xf7\x00\x26\xd5\xb9\x3c\x3c\x28\x5d\x5e\x10\xc8\x46\xef\x55\xe4\x4a\x85\x8e\xc4\x9c\x33\xaf\x4b\x28\x3c\xdf\x6b\x6a\x30\x87\x9c\x45\x77\x12\x49\x04\x80\xef\x76\x5c\xb9\x0f\x0f\x95\x0e\x4c\x40\x77\xfc\x7b\x3a\xc7\xf7\x65\x4c\x92\xfc\xf7\x86\x84\xf7\x31\x1f\x73\x28\x94\x12\x49\xe3\x8b\x36\xb3\x35\x65\x86\xbc\xa9\x14\x81\x2b\xe1\xae\x78\xdd\x87\xdf\xe7\xf3\xa8\xaa\x76\x03\xf2\x12\xae\xd6\xd8\x40\x84\x8d\xa4\x41\xb9\x96\x89\x48\x82\x29\x55\x49\x91\x14\xe4\xda\x0d\x24\x8d\xee\xec\xa0\x5d\x51\x91\x22\x1f\x43\x17\x03\x59\x6b\xed\x3d\x3d\x62\x21\xb5\xe2\x0c\x6b\xfc\x80\x5e\x6e\x13\x65\xc8\x9b\xe4\x01\x45\xc9\xc7\xc3\xeb\xd1\xd5\xa0\x27\xbb\x70\xf1\x0b\x58\x9a\x0a\x5b\x19\x30\x95\x97\x79\x4f\xae\x69\x5d\x66\x8f\x2d\x9b\x13\x0c\x4d\x87\x13\x8d\x50\xfc\xe2\x44\x86\xb4\x0a\xe8\x3c\x77\x69\x80\xc8\x2c\x9c\x17\x80\x7f\x34\xc0\x09\x80\x05\xa4\x41\xa3\x51\x62\x0b\xd2\x7c\x8a\x3e\x9f\xb9\x7e\x04\xfc\x39\x1f\x64\x28\x30\x1f\x18\x9e\xfb\xa1\xe4\x98\x66\x88\x62\x61\xeb\xc5\xff\x4c\xf0\x83\x1f\xa2\xc7\x0b\x51\x97\x67\xab\xf0\x3a\x93\x0d\x36\x50\xb5\x45\x1d\xec\xc3\x13\x4b\xbc\x83\xa2\x4c\xa4\x8a\x22\x5f\xe4\x1f\xe7\xd8\xed\xa0\x0e\x59\x12\xeb\x1f\xf4\x07\xeb\x1f\x73\xdc\xbb\x78\x73\xac\x92\x89\xf1\x0d\xac\x6b\x84\x02\xb0\x70\xb7\xbb\x25\xf7\x16\x3f\x98\x02\xa4\x66\xf7\xdd\xcb\x8e\xe8\xdf\xbb\x14\xd2\x1e\x31\x47\x59\x72\x92\x1e\x5b\x9e\x7f\x17\xda\x12\xa1\x40\xfc\x78\xc4\x51\x9f\x39\xc6\x51\x2a\x00\xf2\x9c\x24\x51\x95\x1a\x7e\x13\x91\xf0\x4c\x3c\x4b\x2c\x29\x69\xca\x64\x1f\x27\x4d\x18\x4d\xee\x23\xc9\xc7\xca\x33\x82\xa6\xf6\xf8\x8c\x1c\x97\x18\x26\x84\x4d\x06\x46\x7d\x16\xa6\x2c\x22\xfb\xa7\x8a\x7d\x08\xf7\xc2\xc5\xc5\x8b\x58\x68\xbc\x79\x65\x45\x0c\x72\x21\x92\x64\x82\x30\xaf\xd4\x07\x7b\x80\xb3\x82\x0b\xb6\x4a\x23\x49\x7c\x87\x0d\x8f\x98\x03\xef\x86\x0b\x96\xf9\x04\xc8\xc6\xa3\x99\xa2\xea\xe4\x9f\xb9\x5c\x72\x1f\x2e\xb0\x5a\x87\x67\x82\x4b\xd5\x84\x4b\x5f\x6a\x95\x3f\x55\x5f\xc0\x61\xc9\x27\x70\x1e\x39\xf5\xc5\xdd\x5d\x80\x25\x4b\x72\x57\xbe\x80\x75\x80\x43\xfd\x9c\x56\x13\x3d\x1c\x1a\xdd\x26\xc8\x31\x38\xe7\x44\x0a\xe8\xa1\x7e\xe9\x13\x08\xe2\xd0\x90\x7f\x25\x45\x8c\xee\x0d\x68\x78\xc9\xbf\x89\x92\x73\xa3\x1c\x84\x94\x28\x81\x23\xe9\xbf\xf0\x8f\xf5\xea\x35\x72\xeb\x0a\x76\x0e\xd9\x66\x18\x91\x2d\x32\x7a\xa9\x45\xa1\xbd\xb8\xfd\x57\x9a\x99\x76\x56\x7a\x66\x05\x84\x00\xb7\xe7\xa3\x4e\xb7\x36\x75\xeb\x0d\x01\x4f\x82\x15\xfe\x77\x6f\x16\x05\xbf\x1e\x45\x9b\xa0\x4a\x90\xdd\x44\x24\x20\xe1\x1c\x4a\x46\x98\x49\x72\x63\xc5\x14\xc7\xe2\x01\x97\x5e\xd1\xac\x04\x75\x4a\xaa\xa9\x0f\xe9\x77\x6a\x22\x8d\x40\x2b\xfb\x53\x6f\x43\xe4\xd2\xea\x85\xad\xf0\xfd\x7c\xfc\x04\x57\xc7\x52\x57\xba\x0c\x67\x78\x79\x73\xd1\x73\x16\x56\xe7\x7c\x82\xb9\xa8\x61\x7f\xa6\x36\xb5\x8b\x71\x9b\xd4\x4e\x3f\x9e\x8e\x3e\xb4\x46\xed\x66\x32\x1c\xb4\x46\x6c\x7a\x35\x3d\x45\xd1\x1a\x81\x5e\x06\xaa\xda\x40\x3e\x79\x72\xa3\x21\xf4\x09\x2a\x1a\xec\x93\xe7\x4a\x9e\x0c\xfc\x24\xbf\x27\x42\x3f\x03\xb7\xbd\xe0\x6f\x04\xc5\x0a\xa9\x39\x64\xd3\x3a\xfe\x21\xc9\xc6\x00\x28\xce\xa2\xb5\x87\x80\x99\xd3\x45\xcd\x93\xb7\xf8\xb8\x6b\xee\x83\x76\x27\x03\xfe\x69\x44\x43\x1a\x54\xe8\x7d\xe1\x6f\x3c\x46\x9c\xd2\xee\xda\x5d\xf3\x13\x1e\xe9\xf6\x18\x87\xe1\x6e\x8f\x61\x3c\x1e\xb5\x96\x76\x65\x21\xa3\x39\x04\xd1\xfd\x92\x2f\xba\x48\xf0\x67\x64\x48\xbd\x68\x26\xf5\x92\x2e\x4a\x17\xbd\x0c\xea\xd4\x87\x19\xaa\xd2\x9e\x2c\xc5\xea\xfe\x0e\x03\x06\xc4\x65\xf6\xc8\xab\x3d\xe4\x6a\xc3\xea\x8c\xa9\xc7\x21\x4b\xbc\x91\xd3\xd2\x36\xd3\x96\x4c\xc1\x35\x02\xa7\x0b\x17\xb6\xd1\x4f\x8b\xe5\x8a\x25\x4f\xf6\xbd\x1d\x4d\x27\x16\xc0\x9d\x15\xe1\x8f\x65\xe9\xcf\x5e\x8e\xbc\xf2\x22\xe6\x28\xf7\x79\x9e\xd9\x51\x3f\xfd\xe4\x04\xbf\x77\xb5\x67\x2d\xf5\xb8\x70\xb0\x2a\x7f\xbb\x74\x0c\x21\xc4\xe2\xa7\x1b\xad\xb5\xef\x6c\x5c\xdf\xfa\xf1\x5d\x03\x05\xbe\xcd\x89\xf8\xcf\x1f\xdf\x1d\x5c\xc6\xda\x7a\xac\x2b\x64\x13\x54\xa5\xed\xe6\x75\xf1\x3b\xde\x8d\x50\x55\xd0\xd0\xc0\xaa\x7c\xff\xbc\x7d\x5c\x95\x84\xbf\x01\xeb\xe3\x2b\xfb\x9c\x90\xd5\x00\xaa\x2a\x31\x2d\x73\xba\x16\xc0\xc9\x84\x9a\x4f\xc4\x5e\x8f\x87\x55\x98\xb7\x81\x7a\x06\xa4\x6b\x83\x7d\x33\x3c\x4b\x03\x50\x1b\x80\xa6\xbe\x15\xd2\x08\xd1\x24\x11\x0d\xa4\xa9\x4f\x99\xb4\x8f\x69\x8a\xf2\x37\x50\xab\xb0\xba\xdf\x50\xed\x99\xa0\x9a\xc8\xa6\xfe\x5e\x6c\x33\xcb\xf0\x2c\x10\x2e\x83\x48\xcd\x21\x6e\x4d\xd6\x7b\xfc\x7c\x89\x3f\x37\xc7\x00\x77\x31\xbc\x28\x40\x1b\x7e\xae\x53\x80\xda\x2d\xc5\x6f\xbe\xe3\x88\xde\x6f\x14\x85\xca\xa1\x5a\xaa\xa5\x22\x0a\xe0\x80\xf3\x3a\xdb\x56\x38\xa0\xd5\x4d\x7b\x49\xb0\xc9\x96\x15\x92\x68\x75\xcb\x3e\xfe\x19\xff\x49\x7f\x67\x4c\x79\x07\x2e\x49\x9d\xfe\x25\xfb\x4a\x4f\xb0\xa1\xa4\xec\xbe\xb9\x07\x05\x51\x4d\x07\x0a\x42\x7f\x9e\x78\xcf\x78\xc2\x39\x16\x3c\x28\x50\x59\x41\x40\xd1\x7f\x70\x50\x6f\x3c\x1a\xe0\x32\x7a\xcb\x92\x83\x00\xd2\xc4\x2c\xb0\x31\x35\xa6\x9a\xa3\xc4\x23\x6e\x72\x23\x64\x73\xea\xbf\x3a\xb9\x48\x10\x81\xe7\x84\xda\x59\xc8\x7b\xfc\x65\xba\x62\x62\x92\xcc\x2a\xa4\x7e\x48\xd9\x7d\xcd\x61\x97\x74\x5e\x11\x36\xe2\x21\x13\xfa\x57\xdd\x21\xd7\x24\xa2\x0e\xf1\x4a\xb2\x20\x84\x0d\xb5\xad\x7b\xa2\x86\x4d\xe5\xf7\xe5\xcb\x7f\x2b\xa8\xb5\x00\x3f\xf2\x05\xc0\x1c\xb0\x6c\x01\xf2\x99\x61\x23\x1c\x52\xaf\x5d\x68\x61\xe8\xf5\x13\xfe\x68\x18\x44\x56\x07\x66\xda\xca\x2f\x69\x48\xeb\xa6\x4d\x5a\x93\xe1\x75\x5b\x3f\x40\xf2\x79\x5e\x8f\x5a\xa3\x75\x39\x3a\x1b\xb6\x46\xec\xe3\xe8\x7a\xda\x1a\xb1\xeb\xe1\xa4\x35\x5a\xd3\xd1\xc5\x10\x0f\xb9\x0a\x47\x6c\x4d\x77\xa7\x9c\x6a\xd3\xdf\x5b\x65\x48\x69\x1e\x9b\xd4\x79\x45\x79\x4c\x1a\x42\x90\xfc\x06\x14\xfa\xa4\xd5\x93\x47\xe7\xe4\xb1\xd7\xd4\x75\x37\x5a\x5b\xb2\xab\x78\xd0\x91\x11\x27\xf3\x6f\x08\xa5\xfa\xdb\x8e\xa3\x3e\x83\x7f\x22\x5f\xa6\x88\x73\xe0\x93\xf8\x20\x60\x7c\x14\x8f\x9f\xc0\xc4\x17\xa2\x42\xdf\x8d\x19\x89\x63\x7c\xa9\x13\xe5\x1d\x0b\xf4\x33\x27\x2b\xdf\x75\x48\x78\x0c\xc1\x74\x9c\xdc\xf2\xa3\x7d\x90\x90\x51\xdf\x41\xf8\x12\x07\x24\x53\x0f\x3f\xda\xee\x26\x7e\xfa\x82\xeb\x5b\x73\x60\xb0\xee\xc9\xc6\x54\x46\x08\xa3\xe5\x21\xb3\x5e\x7c\x44\x33\x3e\x4d\xc8\xb9\x3f\x3c\xa8\x63\x48\x35\x38\x6c\x97\x7c\x0b\x83\xc3\x67\x68\x41\x26\x80\xef\x09\x88\x47\x71\x54\xf0\x5d\xa4\x7a\xdc\xf9\x29\x0e\x20\xf2\xdf\x06\x10\xaf\x3a\xf1\x4f\xec\x1a\xe1\xbc\x82\x04\x71\x3e\x23\x13\x96\xb5\x3d\x5f\x25\x09\x8b\xe4\x72\x01\x0f\x71\x5c\x21\x71\x91\xff\x38\x86\xcc\x5e\x36\x1b\x1e\x77\x90\x44\xef\x86\x67\x16\xba\xac\xa2\x6a\x3c\xfb\x39\x21\x9f\x27\xfc\xd2\x9c\xb3\x60\xba\x8d\xdd\x2e\xed\x5c\x80\xd5\xf6\x1a\x87\xfe\x96\x3a\x24\x2c\xeb\x59\x4d\xda\x5f\x12\x69\xf1\xb5\x33\x92\x16\x57\x5e\x4e\xf0\x79\xa9\xe8\xd5\x58\xfd\xf4\x1f\x09\xaf\x05\x75\x49\x60\xb3\x95\x86\x9d\x5c\x3b\xec\xf1\x07\x76\x79\x34\xea\x57\xb0\x16\xf9\xdd\x99\x0a\xf9\xaf\xf1\x65\x9a\xb4\xe1\x3a\x2f\x0d\x60\x9c\x73\x10\x2b\x43\xba\xac\x7f\x8c\xa5\xfb\xa6\x34\xea\x7d\x9b\x38\xa5\x11\x6f\xef\x64\xff\x39\x8a\x26\x65\x16\xcd\x17\x42\x49\x13\xe6\x6e\xc6\xc6\x40\x9a\xaa\xb1\x03\x37\x3b\x63\xab\x43\x43\x32\x67\xfc\xa5\x92\x96\xaa\xaa\xd8\x1a\x1a\x84\xae\x5c\xcc\x2a\x06\x9b\xf2\x40\xd5\x38\x4c\xa5\x5f\x12\xa8\x19\xa2\xf8\xa7\x59\xc4\x3b\x12\xd2\xde\x53\x1f\x90\x11\xcf\xe3\xef\xc5\x8c\x79\x98\x7a\x89\xaf\xaf\x6e\x31\x5a\xf0\xc1\xe2\x61\x6c\x9b\x62\x32\x95\x83\x54\x2a\x5d\x41\x53\x5d\x65\x5e\xd1\x11\x47\x35\x80\xc7\xa9\x4b\x97\x9e\x3c\x04\x2d\x18\xc8\x0f\x26\x41\x1b\xbe\xcd\x91\x39\x34\xaf\xa2\x9b\x3c\x2f\x9d\x3a\x29\x5f\x38\x61\xdd\x3b\xb3\x43\xc2\x72\xa7\xab\xb3\xe7\xa9\xed\x17\x6a\x4f\x41\x4d\xe7\xff\x02\x00\x00\xff\xff\x8b\xfc\x39\x49\xb6\x74\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 29878, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

