// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x6d\x73\xdb\xb6\x93\x7f\x9f\x4f\x81\x63\xfb\xbf\xf9\xa7\x53\x49\x97\x5c\x7b\xed\xa4\xb6\x67\x1c\x4b\x4e\x34\x8d\x6d\x8d\x25\xbb\xd7\x57\x1d\x4a\x84\x24\xc4\x14\xc9\x92\x90\x1c\x57\xe3\xef\x7e\x8b\x27\x3e\x02\x34\x49\x51\x8a\x93\x4b\x66\x32\x26\x09\x60\x17\x58\xec\xfe\x76\xb1\x04\xa1\xa3\xff\xe8\x5f\x9d\x4d\xfe\x1c\x0d\xd0\x92\xae\xdc\x17\x27\x47\xfc\x0f\x42\x70\x81\x6d\x07\x2e\xd8\xe5\x0a\x53\x1b\xcd\x96\x76\x18\x61\x7a\x6c\xad\xe9\xbc\xf3\xab\x95\x2e\x5a\x52\x1a\x74\xf0\xdf\x6b\xb2\x39\xb6\xfe\xb7\x73\x73\xda\x39\xf3\x57\x81\x4d\xc9\xd4\xc5\x16\x9a\xf9\x1e\xc5\x1e\xb4\x1b\x0e\x8e\xb1\xb3\xc0\x99\x96\x9e\xbd\xc2\xc7\xd6\x86\xe0\xfb\xc0\x0f\x69\xaa\xf2\x3d\x71\xe8\xf2\xd8\xc1\x1b\x32\xc3\x1d\x7e\xf3\x23\x22\x1e\xa1\xc4\x76\x3b\xd1\xcc\x76\xf1\xf1\x2b\x45\x88\x12\xea\x62\x7e\x0d\x77\xdb\x6d\xb7\x6f\x53\xbb\xfb\xde\x8f\x28\x23\xfe\xf8\x88\xe0\x0a\x48\x1e\xf5\x92\x7a\x27\x47\x2e\xf1\xee\x50\x88\xdd\x63\x8b\x00\x4b\x0b\xd1\x87\x00\xfa\x41\x56\xf6\x02\xf7\x02\x6f\x61\xa1\x65\x88\xe7\xc7\x56\x6f\x6e\x6f\x58\x85\x2e\x7b\x56\x68\x1a\xd1\x07\x17\x47\x4b\x8c\xa9\x22\x40\xf1\x27\xda\x9b\x45\x51\xdc\x1e\xae\x7b\xc4\x73\xf0\xa7\x2e\x7b\x2a\x29\x44\xb3\x90\x04\x34\xdd\xe4\xa3\xbd\xb1\xc5\x53\x2b\x2f\x67\x14\x85\x33\x20\xf4\x31\xea\x85\x4c\xc2\x21\x86\xab\xd7\xdd\x57\xdd\x57\xbf\xa8\x07\xdd\x15\xf1\xba\x1f\x81\xa7\x03\x03\xef\xac\x6c\xe2\x89\xfa\xdb\x2d\x99\xa3\xee\xe4\xf4\xdd\xbb\x41\x7f\x4a\xbc\xc7\x47\xa8\x27\x3b\x23\x5a\x6c\xb7\xd8\x8d\x40\x42\xc0\xa1\xb7\x22\xee\x9d\x2c\xe4\x05\x9e\xf3\xf8\x68\x29\xa1\x1e\xf5\x44\xe7\x64\xff\x7b\x52\x35\x4e\x8e\xa6\xbe\xf3\x20\x1f\x7a\xf6\x06\xcd\x5c\x3b\x8a\x8e\x2d\xb8\x9c\xda\x21\x12\x7f\x3a\x0e\x9e\xdb\x6b\x97\xaa\xdb\x39\xf9\x84\x9d\x0e\xf5\x03\x0b\x85\x3e\x4c\x23\xab\x4d\x16\xa0\x2c\x30\x0d\x31\x3f\x87\xc4\xc4\x98\x46\xc0\x90\x30\xb4\x74\xd7\xc4\x51\x75\x72\xb5\x9c\xd0\x0f\x1c\xff\xde\x53\x5c\x58\x0f\x71\x98\x54\xe6\x9d\x5d\x53\xea\x7b\xd9\x4e\x42\x47\x16\x0b\x17\x83\xde\xb9\xae\x1d\x44\xd8\x51\x33\x29\x2a\x4b\x99\x8a\x4a\xac\x2f\xa2\x96\x7a\x6c\x87\x0b\x36\x51\xdf\x49\x5a\x71\x71\x8a\x2d\x9f\xef\xc0\x8e\xd9\x46\x61\xc7\xf7\xdc\x87\x6c\x15\xa8\x34\x11\xfd\x48\x84\x01\x32\x87\x66\x25\x94\x98\x5e\x76\x80\x6d\x81\xd4\xb3\x69\xd9\x13\x42\xcc\x4c\x82\x8d\x88\x93\x4c\xd7\x34\xb4\x3d\x10\x79\x6e\x12\xd5\xa4\x48\xb1\xca\x4a\x99\x99\x50\x55\x2d\x64\x87\xc4\xee\xe0\x4f\xc0\xdd\xc1\x40\x99\x86\x6b\x1c\x5b\x5f\x7e\x22\x98\xc2\x30\xf6\x4b\x09\x0e\x85\x61\x14\xd1\xe3\xa8\x07\x8d\xf2\xe3\xb2\x33\x43\x5a\xbb\x85\x01\xac\xb0\xb7\x56\xfa\x2d\xae\x79\x37\x5d\x7b\x8a\x5d\x17\x3b\xd3\x87\xbc\x08\x72\x1c\x5c\x52\x20\x29\x35\x5a\x12\x0d\x42\x1c\x01\xa8\x65\xcc\x26\x6e\x1e\xae\x3d\x8f\x78\x8b\xa3\x9e\x4b\x8a\x74\x2b\xb4\x87\x49\x2a\xcc\x08\xa0\x54\xbe\x5e\x4a\x5e\xfd\xe1\x78\x72\x3d\x7c\xcb\xc4\x65\x17\x55\xa3\xd0\x8d\xde\xda\xcd\x48\x30\x23\xe3\x64\x9a\xf2\x66\x95\x40\x82\x78\x80\x4a\xec\x2e\x3d\x2d\x0c\x9a\x64\x55\xf8\xa3\x91\x35\x63\x46\x02\x2b\x0f\x0d\x9a\x31\xc7\x23\x1e\x8e\xd8\x60\x75\x02\xce\x89\xae\x28\x5d\x35\x3c\x55\xc3\xb5\x75\x9c\x51\xce\x1a\x6a\x19\x40\x71\xa6\x62\xae\xc0\xad\x50\x9a\x1a\xd7\x87\x53\x9d\xce\x6b\xa6\xa9\x28\xe6\x26\xda\xaf\xeb\xcd\x8e\xea\xcf\x49\xac\x03\x4a\x56\xb8\x30\x41\x31\xf9\x8a\x64\x24\x5c\x09\x6a\x1a\x9c\xd2\x5a\x45\x46\x9e\x37\xbc\xa9\xce\x30\xa4\x4c\xb5\x3d\xcc\x1a\x88\xbe\x66\xd1\x8c\x4c\x1a\xaf\x2e\x43\xb2\x58\x52\x33\xd4\x94\xa9\x7d\x8a\xb6\x4b\x22\xda\x21\x1e\x84\x41\xd8\x68\x55\x8a\xb4\x41\xa6\x02\x9e\xbf\x63\x41\x80\x5e\x7a\xac\xa8\x9e\xc4\x9e\xe2\x15\x44\x26\x56\x41\xd4\x2e\xa7\xcd\xc2\xc4\x69\x63\x2f\x00\xec\xe9\x3e\x54\xa1\x68\x31\xc8\x9e\x51\xb2\x29\xba\xb8\x9c\x07\xde\xe0\x30\x62\xda\x6f\xf0\xc1\x4d\xdc\x2e\x5b\x0d\x44\x6f\x7a\xbd\xfb\xfb\xfb\x2e\xf8\xd1\x10\xfe\x77\x67\xfe\xaa\x27\xe2\x70\x88\x5a\x5d\x6c\x47\x38\xea\xb9\x36\xc5\x91\xce\xab\x5c\x8d\x27\x83\xcb\x89\xce\x95\xec\x06\x36\x6a\xac\x7b\x41\x1c\x49\xbc\x0d\xc8\x69\x47\x8c\x9c\x9a\x82\xa1\xdb\xc1\xf5\x78\x78\x75\x79\x18\x1c\xca\xb9\xf3\xd4\x2d\xdc\x00\x56\xc8\x15\x83\xf2\x48\x7c\x2d\xa0\x8f\xf6\x51\x60\x3b\x0e\x84\x32\x6c\xbd\x10\xe1\x0d\x8c\xfb\x21\x5a\x6a\x97\x09\xa1\x7f\x6f\x58\x1a\x4c\x5d\x7f\x76\xc7\x02\xfc\xce\xca\xe9\xbc\x56\x17\xfe\x7c\x0e\x8b\xac\xce\xab\x6c\xcc\x90\x6a\x06\x9a\x8d\xdd\x57\x05\xb4\x64\x6a\x95\x8f\x43\x84\xb2\x21\xde\x82\xab\x0d\xf4\x18\x4d\x29\x44\xca\x8c\xb5\x85\xe6\x7e\x08\x7a\xb5\x5e\xad\x1e\x56\x78\x05\x23\x9c\x93\xc5\x6c\x89\x67\x77\x53\xff\x13\x2f\xec\x44\x6c\x35\xf9\x5d\x5c\x58\x12\x90\x31\xaa\x42\x31\x05\x71\xbe\xc6\xc3\x7f\x23\x6b\x6e\xbb\x2c\x42\xfa\xf7\xc7\x08\x96\x38\x62\xce\xcf\x5c\x02\x02\xeb\xbe\x27\x0e\x16\x74\x2f\x06\x17\x2f\x61\x3d\x2c\x80\x41\xad\xf1\x14\x6c\x01\x77\x8d\x61\x5c\xe0\x95\x1f\x3e\xe8\x4c\x91\x78\xc1\x9a\x0a\x28\x31\x8c\x2c\x2f\xa5\xa4\x44\x2c\xb1\x92\x7b\x6e\xb1\x4b\xe2\x38\xd8\x8b\xa1\x84\xdf\x69\x94\x8f\x89\xfa\x85\xae\x2b\x6d\xb3\xe3\xda\x60\x0c\xde\x92\xc9\x52\x8c\xe3\xa9\x10\x14\x2b\xcc\x44\xdc\x55\xc1\x3d\xb7\xea\x4e\x73\x05\x25\x59\x29\x3e\x4b\x3f\x24\xff\x30\x33\x71\x3b\xfc\xf1\xd4\x0f\xb9\x3a\xf8\xb0\xd6\x5a\xf1\x47\x7a\x5c\x49\xe9\x36\xab\xd4\x59\x84\xfe\x3a\xe8\x30\x03\xc3\x8e\x01\x3d\x32\x66\x04\x9a\xc7\x9b\xa0\xf8\xaa\x13\xad\x72\xfe\x41\x2c\xf8\x0c\xae\xb6\x60\x3f\x40\x88\x13\x53\x19\x82\xac\x3d\xe5\x4c\xc3\x44\x33\x51\x80\xdc\x34\x9b\xeb\xbf\xe7\xe2\xd6\xe9\x52\xd5\xae\xf2\xb9\x86\xf8\xe7\x09\xb3\x1b\xff\x71\x3a\x32\x5b\x1c\xcc\x3a\x8e\xee\x6d\x43\x0c\xd4\x74\x64\x18\x31\x9a\x4f\x0d\x4e\x1b\xe1\x97\x16\x35\x52\xa0\xed\xf6\x9e\xd0\x65\x56\x30\xd7\x78\x0e\x3e\x70\x09\x26\xf0\xf8\xb8\xdd\x52\xbc\x0a\x98\x07\x43\x16\x88\x16\x80\x3f\x7a\xf3\x26\x14\x15\x2c\xd4\x65\x15\xb8\xcc\xcc\x9d\xea\xb1\xae\x54\x5d\xab\x68\xd6\xf2\x4f\xd8\x78\x4d\xeb\xae\x6b\xd7\x3c\xb7\x22\x59\x75\xa8\xcd\xf2\xa5\xfa\xc5\x99\x46\x4c\xe2\xe2\x2f\x68\x29\x1a\x32\x71\x69\xd2\x30\xf5\xc4\x91\x7b\xa4\x5d\x9a\xeb\xfc\xea\x7f\x1f\xd6\x8f\x92\xb9\xd9\x8d\xaa\xb2\x7d\x79\xd1\xe1\xb9\xd9\xa4\xc9\xbc\x24\x49\x22\x29\x4d\xec\xe9\xf0\xbc\x3b\x61\xc9\x68\x7d\xbe\x24\xe7\x59\x8b\x63\xfd\xaa\x1d\x6b\x3c\x7d\x4d\xfc\x2a\x9f\x9b\x56\xdc\xea\x97\xea\x43\x61\xcc\xc4\x33\xac\x40\xd3\x93\x7a\x68\x67\x59\x6e\x5d\x03\xbe\x90\x64\x30\x26\xac\xcb\x21\x11\xbb\x71\xaa\xd8\x57\xe3\x91\xe5\xec\x52\xf4\x81\x65\x3f\x86\xe7\x3c\xb7\xf7\xcc\x1d\x28\xeb\xe5\xfe\xfc\x67\x21\x97\xc4\xdc\x93\x56\x29\xd3\x8b\x67\x32\xef\x44\xd0\xe1\xd9\x32\x7e\x43\x32\x65\x36\x1d\x27\x4d\xcf\x27\xa7\x6f\xc7\x5d\x72\x3e\x3a\x3d\xfb\x7d\x30\x19\x77\x6f\x88\x47\x75\xa6\x29\xe8\xda\xc9\xb4\x07\xf6\xec\x0e\x53\xb3\x51\x8c\x44\xb9\x7e\x75\x6b\x5a\xdf\x36\xeb\xfb\xe0\xfa\xfa\xea\xba\x46\xd7\x71\x18\xfa\xa1\xb9\xe7\x03\x5e\xdc\x4a\xc7\x55\xca\xa7\xbc\xff\x6f\xff\x9c\x0c\x6a\x74\x7f\xfa\x40\xb1\xb9\xf7\x6f\x59\x69\xfd\xce\x17\xf3\x0a\x6d\xc5\x6c\x89\xaa\xa4\xc4\x03\xa2\x50\x11\x7b\x1a\x7c\xb4\xea\xf8\x52\x87\x4f\xc2\x67\xf3\x62\x40\x27\x83\x83\x91\x62\x67\x8e\xbd\x44\xe5\xa5\xe3\xdf\xd1\x40\x52\xa1\x63\x3c\xe2\x86\x01\x64\xdc\xfe\xaf\xa6\x71\x64\x22\x7b\xa9\xeb\x35\x44\x9f\xb2\xa6\x7d\x49\x5e\xb2\xa8\x26\xf8\x27\xac\x3b\x23\x77\x31\xda\xc6\x62\x17\xcd\x5b\x90\xba\x30\xd1\x1a\x42\x4f\x20\x60\x5f\x32\x17\x1c\xaa\x89\xbc\x1c\x90\x32\x12\xe7\x23\x6d\x2c\x70\xde\xba\xb1\xbc\x5b\x5c\x2d\xbd\x3e\xec\x6a\x69\x16\xac\xcd\xcb\xa5\xb8\x70\x5f\xeb\xa5\xb3\xd1\x8d\x79\xc1\x04\xdc\x35\x53\x0e\x4d\x2a\x2c\x8c\x34\xc3\xfa\xaa\x57\x46\xc9\x4c\x35\x59\x1a\x89\x69\xf8\x96\x72\xac\x9a\x72\xd4\x6a\x66\x5e\x01\x9e\xeb\x2a\x4a\xda\x9c\x69\x19\xd5\xee\xd8\x8c\xeb\x28\xe8\xc5\x97\xb0\x90\xe2\xdd\x7c\xde\x99\x48\x36\x61\xf5\x8c\xbe\xae\xb9\xc7\x4e\x16\x58\x35\x74\xb0\xd0\xf2\x19\xf8\xd6\x03\x67\x22\x9d\x92\x4c\xa4\xb3\xe7\x4c\x64\xbf\x24\x13\xe9\x54\xcb\x44\xf6\xeb\x64\x22\x8b\x63\xfd\xaa\xfd\xad\xb3\x4b\x26\xb2\xff\x2d\x13\xf9\x85\x67\x22\xfb\xa5\x99\x48\x9d\x7d\x35\x1e\x99\xd1\x83\xf6\xbf\x88\x4c\x64\xff\x19\x66\x22\x9d\xf2\x6c\x5e\x5f\x2c\x3e\x9d\xf3\xe1\xe5\x55\xbf\x7a\x3a\xcc\x81\x81\xf9\x4e\x49\x3e\x6c\xc8\x8b\x77\xc9\xe6\x39\x95\xb2\x79\x71\xff\x6b\x65\xf3\x9c\x2f\x2d\x9b\x17\xcb\x3b\x25\x1d\x43\x72\x43\x37\xa3\xa6\xec\x46\xbf\x59\x76\x23\xcf\xa2\x34\xbd\x51\x55\xc3\x52\xa1\x97\x1a\x6d\xc3\xf8\x4b\x35\xdf\x39\xa3\xe4\xe4\x32\x4a\x15\x84\xfe\x74\x46\x69\x57\x99\x57\xc8\x28\x55\x34\x8a\x8c\xc4\x77\xc9\x28\x39\x87\xcf\x28\x65\xf7\xd2\xa9\x9b\x2a\x1f\xcc\x34\xd9\x2d\xf7\x6b\x6e\xb7\xdc\x81\xf3\x56\x41\x64\x8e\xad\x55\xd9\xbe\x62\xeb\xd1\xd8\x1c\x5b\xeb\xf6\x12\x9f\x8c\x42\x7f\x86\xa3\x48\x87\x9f\x85\x40\xba\x38\xb0\xaf\x3a\x90\x8e\xe7\xaa\x49\x20\xcd\x27\xa2\x59\x20\x2d\x36\xa9\x9b\x52\x56\x88\x05\x58\xba\x3d\xf1\x1a\xf5\x6e\x21\x48\x1a\x8d\xdb\x08\x92\x9e\x7f\xd8\x6f\xce\xa8\x99\xb6\xe0\x0b\xa2\xfb\x5f\x0c\xb8\x60\x9e\xc8\xb4\x22\x30\x6a\xe2\x68\xec\xf9\xb4\x8f\x67\x21\xb6\xf9\x4a\xa0\x6c\x51\x10\x44\x8c\x47\x8b\xa3\xec\xd4\x1a\xe0\xca\x0f\x71\xc3\x01\x26\xcb\x9e\xf2\xf1\x31\x16\xfb\x5b\xf8\x8c\xc6\x81\xbb\x8e\x26\x60\x97\xfb\x59\xf6\xec\x33\x45\x17\x44\x35\xe1\xad\x26\xb0\xc5\x31\x4b\xd0\x34\x5c\x09\xa2\x6f\x81\xca\x7e\x02\x95\xcd\xc2\x1c\xa8\xa8\xb2\x7d\x05\x2a\xb7\xef\xcc\x81\x8a\xee\x53\xa4\x93\x5b\xf1\x15\x12\x5a\xb8\xfe\x94\x7d\x4c\x4f\x6d\xba\xae\x12\xb4\x14\x07\xf9\x55\x07\x2d\xf1\xbc\x35\x09\x5a\xf8\xa4\x7c\x05\x41\xcb\xed\xbb\xff\xef\x41\x8b\xe9\x6b\x3e\x41\x74\x2f\x41\xcb\x73\xf3\x6c\x9b\xba\x36\x50\x53\xfb\x63\xcf\xb6\x59\x34\xf4\x6c\x9b\xc5\x33\xf0\x6c\xa5\xa7\x7a\xa8\x06\x1b\x3b\x44\x4c\x5c\xe8\x18\xc9\xd8\xe7\xf1\xf1\xb7\xfc\xf1\x1a\xf2\x54\x0d\x76\xd0\x06\x3f\x93\x65\xbb\xed\xfd\xf0\xe2\x87\x1e\xb3\x34\x31\x60\xcd\xbb\x37\x97\x04\x16\xab\xf0\xfd\x19\x7a\x73\x8c\xfc\x10\x75\xcf\x3e\x9c\x8e\xc7\x97\xa7\x17\x03\x64\xf1\xd9\x83\x62\xa9\xaf\xc0\x79\xd8\x3f\xa5\x34\x04\xc7\x81\x58\x93\xc7\xc7\x1d\x61\xf5\x44\x29\x06\xb0\x17\xdc\x2e\xd9\xf1\x0a\x6c\x36\x38\x4b\x56\x41\x80\x84\x30\x43\xe8\xc1\xb9\x1f\xca\x2e\xc4\x3d\x60\x63\x60\x45\x17\x7f\x8c\xd9\xc9\x2a\xa2\xf8\x85\x08\x13\xb3\x41\xa1\x22\x57\x45\x32\xc1\x1a\x82\x88\x88\x0b\x47\xe0\xdc\xd5\xed\xe0\xfa\x7a\xd8\x1f\xb0\x27\x02\xbe\xf8\x29\x28\x4f\xc8\x6e\xbb\x05\xaf\xb9\xc0\xe8\x7b\xf2\x23\xfa\x7e\xc6\x22\x6d\xa8\x2b\x55\x7f\x74\xd3\xfd\x40\x22\xd6\x3f\x1a\x6e\xb7\x77\xf8\x41\xc8\x21\x58\x77\x80\xf5\xf4\xa1\x73\x69\x89\x26\xdd\x4b\x31\x9e\x23\xea\x28\x8b\x4a\xf0\x1c\x79\xfe\x7d\xa8\xbe\x06\x82\x01\xc6\x2d\x8e\x7a\xd4\x31\xb6\xb2\x5e\xa4\x8c\x48\x4a\x52\xb5\xbd\x89\x70\x78\xc6\x1a\x70\xae\x19\xb2\xac\x28\x63\x2b\x27\x8d\xb9\x8c\x1f\x22\xc9\x04\xe5\xb9\x40\x51\x4b\x4c\x86\x8e\x8b\x0d\x43\x61\x45\x06\x2e\x3d\x1a\xa6\x54\x25\xfb\xa7\x8a\xe2\x08\x54\x61\xd3\xca\x2e\xe2\x1e\xb3\x9b\x57\x28\xa2\x60\xb3\x38\x41\x2c\x18\x54\xea\xc8\x24\xe0\xac\x30\x82\x2e\xd3\xe8\x11\xdf\xb1\x82\x27\xb4\x80\x57\x63\x53\x95\x39\x84\x65\xed\x91\x8c\xf3\x3f\xf9\x57\x0e\xf3\x9a\x70\x81\xa9\xda\x3f\x13\x36\x55\xbb\x70\xe9\x49\xa9\xf2\xa7\xea\x0c\x22\x9a\x1c\x42\xf4\xc4\xee\x04\x8e\x03\xc2\x47\xd0\x04\x63\xf9\x04\xd6\x41\x14\x95\xf6\xad\x0c\x2b\xe7\x0a\x56\xde\x4f\x2e\x3e\x9c\x5f\x5d\x23\x16\x06\x3d\x8d\xd6\x31\xe2\xc0\x72\xfc\x2e\x41\x9b\xfe\x39\x67\xaf\x43\x1c\x95\xce\x16\xa8\xe3\x90\x90\x1f\x72\x23\x08\x74\xfb\x24\xbc\xe4\x47\xda\xe4\x0c\x30\x07\x3b\x25\x12\xe4\xf8\xfc\x6f\xf6\x07\xc1\x98\x80\xe1\xab\xd7\x8c\x67\x47\x30\x75\xf0\x26\xc3\x0e\x6f\x18\xbb\x97\x5a\xfc\xda\x81\xe7\xff\xa4\x59\x6a\x47\xa8\x67\x59\xc0\x19\x90\x3e\x6f\x75\xba\xb1\x89\x5b\xaf\x09\x98\x24\xa8\xca\x7f\x7a\xd3\x28\xf8\xed\x28\x5a\x07\x09\x24\x99\x47\xb2\x8e\x70\x80\xc3\x19\xc4\x48\x30\x9e\xe4\x86\x0d\x29\x26\x3a\x12\xcf\xf8\x00\x14\xd9\x4a\x98\xa9\x3a\x36\xf1\xa9\x9d\x1e\xcb\x4e\x00\x98\x7d\xbd\xf1\x74\x70\xb1\x0b\x48\x6a\x25\x47\x97\xec\x30\x06\x76\xde\x9a\x85\xd4\x15\x93\x97\x3c\xa9\x06\xee\xa2\xee\xc8\x0e\xed\x55\xd4\x75\xe6\xc8\x3a\x1f\x5b\xc8\xb2\x0c\x0b\x96\x9a\xb4\x2e\x46\xed\xd1\x3a\xbd\x3d\x1d\x7e\x68\x89\xd6\xcd\x78\xd0\x6f\x89\xd4\xe4\x6a\x72\xfa\x81\x87\x68\x3b\xa0\x6a\x06\x0b\xdb\x80\x56\xf9\x0a\xf3\xb3\x61\xab\xe0\xaf\x07\x57\xf9\x76\xf6\xc0\xe8\x2a\xb9\x1e\x14\x5e\x0d\x3c\x1b\xe1\xeb\x70\x1e\x62\x5c\xb3\xc9\x7a\x1f\x00\xcb\xa8\xee\x8c\xb0\x62\x83\x47\x7b\x10\x9b\x79\x65\xbf\x7b\xa4\x19\xef\x21\xcb\x9d\x7f\x78\xd2\xe7\x27\x69\x1a\x62\xb6\x42\xed\x0b\x7f\xed\x51\xec\x94\x56\xd7\xa6\xa2\x4e\xb8\x37\x6d\xd0\x8e\xb9\xd4\x06\xcd\xb8\xc3\x6b\x2d\x46\xcc\xc2\xcf\xee\x70\x46\x0e\x1d\x29\xc2\x22\x3c\xc6\xb2\xa1\x39\x4e\x24\x99\x38\x51\x9a\x38\x99\x77\x33\x08\xd6\x14\xb2\x88\x8a\xce\xb2\x74\xab\xa3\x06\x34\xe8\x63\x97\xda\x43\xaf\x76\x93\xab\x35\xad\xd3\xa6\x1e\x87\x2c\xf1\x9d\xec\x9e\xe4\x42\xab\xf6\x16\x98\x43\xb0\xdb\x70\x6e\x1b\x4d\xbd\xb8\x3c\x43\x72\xc7\xcd\xdb\xe1\x64\x8c\x00\x34\x51\xc4\x92\xd8\xe9\x83\x56\x87\x5e\xf9\xa2\xed\x28\x77\x20\xd4\xf4\xa8\x97\x7e\x72\xc2\x4e\x58\x6b\xb8\x76\x7c\xba\x73\x30\x2b\x9f\xbd\x77\x94\xa1\x10\xe2\xbb\x8e\xd0\xca\x77\xd6\xae\x8f\x7e\x7a\xb7\x83\x00\xdf\xe6\xba\xf8\xaf\x9f\xde\xed\xbd\x8f\xb5\xe5\x58\xb7\x93\xbb\x00\x33\x69\x37\xcc\x8c\xbf\xbd\xfc\x4c\xc0\x2c\xb8\xeb\x91\x59\x7e\x54\xba\x2f\x68\x96\xe4\xbf\x61\xf3\xd3\xca\xf1\x9c\xc0\xd9\x80\xcb\x2a\x42\x2e\xb3\xdb\x16\xf0\xcd\x04\xbc\x07\x62\xaf\x87\xd4\x2a\xcc\xdb\x00\x4e\x03\x58\xb6\xc1\x7e\x37\x48\x4c\x63\x58\x1b\x98\xa8\x8e\x01\xf8\x4c\xa0\x28\xd9\xeb\x51\x51\x1d\x71\xb0\x2f\x58\x54\xf4\xbf\xe1\x62\x05\x05\xf9\x06\x8c\xcf\x04\x18\x45\x4c\xf7\x79\xe1\xd1\xdc\x87\x67\x01\x92\x19\x50\xdb\x1d\x25\x57\x78\xd5\xfe\xdb\x64\x20\x9a\x00\xe1\xc5\xe0\x42\x07\x81\xec\x80\x40\x01\x7e\x77\x84\xfd\x1a\x02\x6b\xd4\xfd\x9d\xb0\x6e\xe7\xd0\x2f\x55\x52\x11\x27\x58\x83\xf3\x3a\x49\x3a\xd6\xa0\xed\x77\x20\x92\xe6\x2e\x09\x3a\x46\xa2\xd5\x37\x20\xf1\xd9\x8a\x07\x7d\x05\x9c\x32\x21\x36\x2b\x75\xea\x97\x64\xd1\x0e\x90\x3e\x53\xc6\xb1\xbb\x99\x05\xd1\xc1\x82\x90\x20\xf4\x67\x89\xf5\x8d\xc6\xbc\xaf\x3a\x0b\x0c\x54\xf4\x11\x10\x66\x7f\xac\x5d\x77\x34\xec\x33\x1d\xf0\x16\x25\xfb\x3a\xa4\x7e\xb2\x1d\x0d\xaa\x4d\x35\x43\x8b\x5b\xdc\xe4\x5a\xc8\xe2\xd4\xbf\xfa\x31\x4f\x10\x81\xfd\x85\xda\xb1\xc8\x7b\xb6\xef\xa0\x62\x00\x94\x8c\x2d\x24\x7e\x48\xe8\x43\xcd\x66\x97\x64\x56\x11\x7c\xe2\x26\x63\xf2\x4f\xdd\x26\xd7\x38\x22\x0e\xf6\x4a\xa2\x2d\x86\x3c\x2a\x0f\x7e\xa2\x9a\x4d\xe4\xef\x37\x94\xbf\x65\x69\x30\x0d\x3f\xf1\x69\x60\x11\x67\xd9\x34\xe4\xe3\xd0\x9d\x00\x4d\x6d\x01\x6f\xf2\x32\xf7\xf5\xc1\x5e\xe6\x06\x11\xb2\x40\x0c\x2d\xbc\xe7\x64\x94\x6e\xda\xa3\x34\x1e\x5c\xb7\xf3\x5a\x98\x8f\xf0\x7a\xd8\x12\xa5\xcb\xe1\xd9\xa0\x25\x52\xb7\xc3\xeb\x49\x4b\xa4\xae\x07\xe3\x96\x28\x4d\x86\x17\x03\x90\xbb\xb4\xce\x96\x64\x76\xca\x69\xee\xfa\xfe\x5b\x3a\xaa\xdd\x3d\x5e\x2a\x34\x02\x52\x72\x0b\x5c\x97\x6f\x79\xcb\xec\x83\xbc\xb5\xdd\x35\xc0\x91\xda\x27\x55\x83\xc3\x66\xc1\x13\x06\xdc\xb8\x43\x04\x5e\x8d\x6d\xb8\x15\x8f\x62\x60\xf3\x5d\x46\xf5\xd8\xfa\x39\xc6\x40\xf9\xf3\x11\xe2\x9b\x01\x7e\x56\xa5\x11\x8b\x2a\xf4\x20\xf6\xea\x3b\xbb\xed\x95\x3d\x5b\x26\x6e\x5b\xf6\xef\x02\x1e\x32\x8e\x3a\xf7\x2d\x7f\x7c\x45\xfa\xf0\xf5\x9a\x23\x2e\xa3\xd2\xbd\xe1\xfe\x55\xe7\x5b\xeb\xe1\xf9\x2f\x09\x93\x3c\xf9\x97\x66\xff\xcd\xe2\x56\x56\xed\xd2\xce\xb9\x19\x6d\xad\x51\xe8\x6f\xc0\x89\x85\x65\x35\xeb\xf4\xf9\xd7\xa4\xcf\xec\x43\x10\x9c\xee\xb4\xbc\x1c\xb3\xe7\xa5\x03\xa8\xc3\xf0\xe7\xff\x4a\x38\xce\x89\x8b\x03\x9b\x2e\x35\x4c\xe5\x84\xb2\x1a\x7f\xb1\x2a\x4f\x7a\xc0\x0a\xca\x27\xcf\x83\xa8\x10\x54\x1a\x37\xb9\xa7\xed\xc0\x79\x69\x40\xa2\x9c\xbd\xa1\x0c\xe9\xb2\xfa\x31\x94\x34\x75\xef\x6a\x1f\x7c\xec\xbf\xc5\xae\x7a\xb9\x39\xbe\x85\xb5\x0b\xc9\xaf\x2e\x92\x22\x16\xc7\x18\x0b\x03\xa9\xb6\xc6\x0a\x5c\xf9\x8c\xa5\x0e\x09\xf1\x8c\xf2\x1f\x22\x69\x69\xa9\x12\x6b\xc3\x0e\xc8\xad\xbe\x81\x01\x02\xa9\xaf\x55\xf8\x7e\x77\xf9\xbd\x4a\xea\xba\x13\xad\x90\x6c\x20\x1e\x08\x99\x67\x7e\x5c\x31\x55\xdb\x76\x1c\xf5\xfb\x40\x27\xf2\x5b\x9c\x38\x49\x92\xfb\x1e\x8a\x7f\x52\xc3\xbe\xa5\x0b\x7d\x37\x66\xc1\x6b\xa4\x7f\x95\xd4\x42\x20\x89\x19\x5e\xfa\x2e\x4c\x83\x38\x32\x41\x7c\xfb\x22\xf5\x3d\x75\xb0\x83\x78\x1e\x9f\xe3\x00\x2b\x72\xe2\x33\x65\xb7\xd0\x86\x39\x1f\xde\x58\x3c\x8c\x75\x53\x0c\x86\x7f\x0c\x51\x45\x72\x29\x5f\x5d\x21\x12\x5d\xc6\x5f\x08\xc8\x9d\x20\xc0\xff\xd4\x25\x0b\x4f\x6e\x08\x17\xcc\xe5\x21\x27\x50\xf6\x1e\xfe\x26\x9f\x15\x28\x2f\x2a\x37\x8e\xa7\xbe\x25\xc8\xee\x33\xef\x9e\xd9\x21\xa6\xb9\x3d\xe6\xd9\x5d\xe5\xf6\x0b\xb5\x7c\x57\x83\xfc\xbf\x00\x00\x00\xff\xff\xf2\xb3\xf2\xf1\x3e\x77\x00\x00")

func index_html_bytes() ([]byte, error) {
	return bindata_read(
		_index_html,
		"index.html",
	)
}

func index_html() (*asset, error) {
	bytes, err := index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "index.html", size: 30526, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"index.html": &_bintree_t{index_html, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

