// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\xfb\x73\xdb\xb6\x93\xff\x3d\x7f\x05\x8e\x6d\x6f\x9a\x4e\x45\x5d\x72\xed\x5d\x26\xb5\x3d\xe3\x58\x4a\xaa\x69\x6c\xeb\x6c\x39\x77\xfd\xa9\x43\x89\x90\x84\x98\x22\x59\x02\x94\xe3\x7a\xfc\xbf\xdf\x2e\x1e\x7c\x53\x26\x25\x4a\xf1\xcc\x37\x99\x89\xc5\x07\xb0\x2f\x2c\x3e\x58\x00\x4b\x1c\xfd\xdb\xe0\xf2\x6c\xf2\xe7\x78\x48\x96\x62\xe5\xbd\x38\x39\x92\x3f\x84\xc0\x05\x75\x5c\xb8\xc0\xcb\x15\x15\x0e\x99\x2d\x9d\x88\x53\x71\x6c\xc5\x62\xde\x7b\x63\x65\x5f\x2d\x85\x08\x7b\xf4\xef\x98\xad\x8f\xad\xff\xeb\xdd\x9c\xf6\xce\x82\x55\xe8\x08\x36\xf5\xa8\x45\x66\x81\x2f\xa8\x0f\xf5\x46\xc3\x63\xea\x2e\x68\xae\xa6\xef\xac\xe8\xb1\xb5\x66\xf4\x2e\x0c\x22\x91\x29\x7c\xc7\x5c\xb1\x3c\x76\xe9\x9a\xcd\x68\x4f\xde\xfc\x4c\x98\xcf\x04\x73\xbc\x1e\x9f\x39\x1e\x3d\x7e\x65\x08\x09\x26\x3c\x2a\xaf\xe1\xee\xe1\xc1\x1e\x38\xc2\xb1\x7f\x0f\xb8\x40\xe2\x8f\x8f\x04\xae\x80\xe4\x51\x3f\x2d\x77\x72\xe4\x31\xff\x96\x44\xd4\x3b\xb6\x18\xb0\xb4\x88\xb8\x0f\x41\x0e\xb6\x72\x16\xb4\x1f\xfa\x0b\x8b\x2c\x23\x3a\x3f\xb6\xfa\x73\x67\x8d\x05\x6c\x7c\x56\xaa\xca\xc5\xbd\x47\xf9\x92\x52\x61\x08\x08\xfa\x45\xf4\x67\x9c\x27\xf5\xe1\xba\xcf\x7c\x97\x7e\xb1\xf1\xa9\xa6\xc0\x67\x11\x0b\x45\xb6\xca\x67\x67\xed\xa8\xa7\x56\xd1\xce\x84\x47\x33\x20\xf4\x99\xf7\x23\xb4\x70\x44\xe1\xea\xb5\xfd\xca\x7e\xf5\xc6\x3c\xb0\x57\xcc\xb7\x3f\x03\x4f\x17\x14\xef\xad\x1c\xe6\xab\xf2\x0f\x0f\x6c\x4e\xec\xc9\xe9\x87\x0f\xc3\xc1\x94\xf9\x8f\x8f\x50\x4e\x0b\xa3\x6a\x3c\x3c\x50\x8f\x83\x85\x80\x43\x7f\xc5\xbc\x5b\xfd\x52\xbe\xf0\xdd\xc7\x47\xcb\x18\xf5\xa8\xaf\x84\xd3\xf2\xf7\xb5\x6b\x9c\x1c\x4d\x03\xf7\x5e\x3f\xf4\x9d\x35\x99\x79\x0e\xe7\xc7\x16\x5c\x4e\x9d\x88\xa8\x9f\x9e\x4b\xe7\x4e\xec\x09\x73\x3b\x67\x5f\xa8\xdb\x13\x41\x68\x91\x28\x80\x66\xc4\xd2\x6c\x01\xce\x02\xcd\x90\xf0\x73\x59\x42\x0c\x3d\x02\x54\xa2\x50\xd3\x8b\x99\x6b\xca\x14\x4a\xb9\x51\x10\xba\xc1\x9d\x6f\xb8\xa0\x84\x34\x4a\x0b\x4b\x61\x63\x21\x02\x3f\x2f\x24\x08\xb2\x58\x78\x14\xfc\xce\xf3\x9c\x90\x53\xd7\xb4\xa4\x2a\xac\x6d\xaa\x0a\xa1\x2c\xaa\x94\x79\xec\x44\x0b\x6c\xa8\xef\x34\xad\xe4\x75\x86\xad\x6c\xef\xd0\x49\xd8\xf2\xa8\x17\xf8\xde\x7d\xbe\x08\x14\x9a\x28\x39\x52\x63\x80\xcd\xa1\xda\x06\x4a\xe8\x97\x3d\x60\x5b\x22\xf5\x6c\x6a\xf6\x95\x11\x73\x8d\xe0\x10\xe6\xa6\xcd\x35\x8d\x1c\x1f\x4c\x5e\x68\x44\xd3\x28\xda\xac\xba\x50\xae\x25\x4c\x51\x8b\x38\x11\x73\x7a\xf4\x0b\x70\x77\x29\x50\x16\x51\x4c\x93\xde\x57\x6c\x08\x74\x18\x64\xbf\xd4\xe0\x50\x52\xa3\x8c\x1e\x47\x7d\xa8\x54\xd4\xcb\xc9\xa9\x14\x7b\x25\x05\x56\xd4\x8f\x8d\x7f\xab\x6b\x29\xa6\xe7\x4c\xa9\xe7\x51\x77\x7a\x5f\x34\x41\x81\x83\xc7\x4a\x24\xb5\x47\x6b\xa2\x61\x44\x39\x80\x5a\xae\xdb\x24\xd5\xa3\xd8\xf7\x99\xbf\x38\xea\x7b\xac\x4c\xb7\x41\x7d\x68\xa4\x52\x8b\x00\x4a\x15\xcb\x65\xec\x35\x18\x5d\x4f\xae\x46\xef\xd0\x5c\x4e\xd9\x35\x4a\x62\xf4\x63\x2f\x67\xc1\x9c\x8d\xd3\x66\x2a\x76\xab\x14\x12\xd4\x03\xb2\xa1\xdf\x65\x9b\x05\xa1\x49\x17\x85\x9f\x0a\x5b\x23\x33\x16\x5a\x45\x68\xa8\xd0\x39\xd1\x78\x34\x46\x65\xab\x0c\x5c\x30\x5d\xd9\xba\x46\x3d\x53\xc2\x73\xaa\x38\x93\x42\x6f\x68\xd5\x01\xca\x2d\x95\x70\x05\x6e\xa5\xb7\x19\xbd\x3e\x9e\x56\xf9\x7c\x45\x33\x95\xcd\xbc\x8d\xf7\x57\x49\xb3\xa3\xfb\x4b\x12\x71\x28\xd8\x8a\x96\x1a\x28\x21\xdf\x90\x8c\x86\x2b\x45\xad\x02\xa7\x2a\x7b\x45\xce\x9e\x37\xb2\x6a\x55\xc7\xd0\x36\xad\x94\x30\xdf\x41\xaa\x4b\x96\xbb\x51\x9d\xc7\x9b\xcb\x88\x2d\x96\xa2\x1e\x6a\x36\xb9\x7d\x86\xb6\xc7\xb8\xe8\x31\x1f\xc2\x20\x5a\xdb\xab\x0c\xe9\x1a\x9b\x2a\x78\xfe\x0e\x83\x80\x6a\xeb\xe1\xab\x76\x16\x7b\x8a\x57\xc8\xeb\x58\x85\xbc\x5b\x4e\xeb\x45\x1d\xa7\xb5\xb3\x00\xb0\x17\xfb\x70\x85\x72\x8f\x21\xce\x4c\xb0\x75\x79\x88\x2b\x8c\xc0\x6b\x1a\x71\xf4\xfe\x9a\x31\x78\x9b\x61\x17\x67\x03\xfc\x6d\xbf\x7f\x77\x77\x67\xc3\x38\x1a\xc1\x7f\x7b\x16\xac\xfa\x2a\x0e\x87\xa8\xd5\xa3\x0e\xa7\xbc\xef\x39\x82\xf2\xaa\x51\xe5\xf2\x7a\x32\xbc\x98\x54\x0d\x25\xbb\x81\x8d\xd1\x75\x2f\x88\xa3\x89\x77\x01\x39\xdd\x98\x51\x52\x33\x30\xf4\x69\x78\x75\x3d\xba\xbc\x38\x0c\x0e\x15\x86\xf3\xcc\x2d\xdc\x00\x56\xe8\x19\x83\x19\x91\xe4\x5c\xa0\x3a\xda\x27\xa1\xe3\xba\x10\xca\xe0\x7c\x81\xd3\x35\xe8\x7d\xcf\x97\x95\xd3\x84\x28\xb8\x2b\x4e\x0d\x90\xf6\x8a\xae\x20\x4c\x57\xf3\x50\x55\x70\xea\x05\xb3\x5b\x8c\xf7\x7b\x2b\xb7\xf7\xda\x5c\x04\xf3\x39\xcc\xb9\x7a\xaf\x72\x21\xc4\xc3\x83\xa0\xab\x10\xed\x4b\x2c\x98\xc5\x80\x58\xfc\xed\x5b\x75\xf1\x17\x38\x3e\xf5\x80\xba\x45\xec\xe2\x80\x99\x72\x67\xf3\x4d\xcc\xff\xb3\x1d\x33\x36\xdf\xc8\x6b\x16\xc6\x1b\x35\x6d\xc7\x0c\xa8\x6d\xe4\xe6\x76\xa9\x99\x5b\xad\x59\xde\x6f\xcc\x4d\x93\xc9\x61\x13\xcf\x08\xf9\x26\x0d\xde\x14\x1c\xa3\xa5\xf9\x60\xb4\x39\xbc\x46\xeb\xc5\x1e\x35\x82\x51\xad\x8d\x46\x1b\x97\x38\x4c\x85\xb5\x13\x11\x44\x27\x72\x4c\x34\x4e\x3d\x3e\xfe\x56\x5c\x6b\xd0\x4b\x0c\xb8\xea\x20\x17\xa8\x1e\x1e\xfa\x3f\xbd\xf8\xa9\xff\xf8\xf8\xf0\xa0\xe4\xcb\x08\xec\x20\x78\xe3\xfa\x8c\x05\x92\x6a\x1c\x05\xca\xbf\xc3\x2f\xae\x03\xf9\x67\x1e\x9b\xdd\x1e\x3f\x88\x25\xe3\xf6\x12\x46\x2e\x8f\xca\x27\x8f\x2f\x14\x52\x4e\x40\x4e\x85\x90\x27\x7a\x05\x64\x13\x33\x6d\x9d\x99\x07\x33\x07\xa8\xc5\xfc\x30\x16\xa8\xc7\x68\x70\x2a\x44\x04\xfc\xe0\x46\x36\xc4\xe3\x63\x3a\x65\xe9\xcd\x96\x74\x76\x3b\x0d\xbe\x98\x75\x86\xf4\x5e\x0e\x5b\x4b\xe6\xba\xd4\x4f\xc6\x53\x79\x87\xd2\x7c\xe6\x5f\xce\xbc\x00\xa6\x3c\x96\xe4\x83\x0c\xe5\x08\x87\x0c\xdf\x07\x91\xe6\x98\x65\x88\x62\xe1\xdb\xf3\xff\xbd\xc6\x65\x2a\x55\xa2\xa0\xa8\x24\xd1\x4a\xd9\x30\x06\xe7\xe3\x16\x96\xb9\x63\x62\x49\xf0\x0e\xbc\x09\x5d\x03\xe8\xe2\x1f\xb5\xa4\xf4\xf0\x00\x91\xce\x82\x92\xef\xd9\xcf\xe4\xfb\x59\x10\x51\xf2\xf6\x98\xa8\xa1\xe8\x6c\x7c\x63\x7f\x84\x18\x12\x04\x10\x11\x48\x28\x5f\xdb\x17\xf6\x1f\xf4\x1e\x85\x24\x12\xc9\x80\xee\xf4\xbe\x77\x61\x29\x91\x8f\x84\x6b\x7c\x1a\x7d\x49\x05\xb2\xc4\x0f\xee\x22\x47\x47\x90\x27\x09\x1d\xd4\x4b\xb8\xb5\xb5\x92\x35\x38\x5c\xd5\x48\xed\x65\xaa\xdf\x70\x1a\x9d\xa9\x67\xe9\x8a\x62\xfa\x0a\x89\x27\x0b\x1d\x27\xbb\x30\xba\xbe\xe7\x9a\x0f\x29\x32\x82\x57\xdd\xf1\x19\x49\x27\xaf\x54\x08\x5f\xd5\x30\xea\x8b\x28\xe3\x16\xf9\x9f\x26\x4e\xa2\x70\x08\x5b\x18\x2f\x12\xa1\xf1\xe6\x15\x81\x58\x86\x85\x54\x63\x95\xd2\x2b\xb3\xd6\x0c\x9c\x0d\x9e\x88\x65\x16\x69\x92\x3b\x7c\xf1\x84\x3b\xc8\x62\xd8\x60\xb9\xd5\xab\xd8\x67\xb9\x38\xe9\xe4\x87\xc2\xb2\xd5\x36\x5c\xa0\xb5\xf6\xcf\x04\x9b\x6a\x17\x2e\x7d\x6d\x55\xf9\xd4\x2c\xde\x8a\x74\xf5\x76\x13\xfc\x9b\x3e\xaf\xe0\x5f\xa4\x78\x2c\x1b\xb0\x0d\x7a\xb8\xf3\xe9\x3d\xc4\xaa\x7f\xb5\x84\x10\x97\xf1\xdb\x14\x3e\x06\xef\x25\x91\x3c\x84\x60\x11\x7b\xc0\xa2\x0b\x67\x45\x53\x20\xd1\xfc\x34\x98\xb8\x2c\x92\x6b\x7e\x25\x48\x29\xe0\xc8\x06\x4b\x48\x4c\xfd\x51\x73\xa3\x6b\xc9\x0d\x46\x90\x90\xbc\x7a\x8d\xdc\x7a\x8a\x9d\x4b\xd7\x92\xd1\xcb\x4a\x28\xda\x92\x9b\xd6\x4d\x72\xfb\xaf\x2c\x33\xad\x55\x35\xb3\x12\x4c\x18\x5b\x9d\xae\x1d\xe6\xb5\xab\x02\xdd\x09\x9a\xf9\xdf\xfd\x29\x0f\x7f\x3b\xe2\x71\x98\xc2\x49\xbd\x0e\x31\xa7\x21\x8d\x66\x10\xb7\x83\x26\xe9\x0d\x49\x28\x8e\xd5\x03\x29\xbd\xa1\xd9\x08\xef\x8c\x54\x93\x40\x38\x59\x45\x76\x42\x2e\xe3\xa0\x9d\xc0\x57\xa5\x5d\xc4\x32\x09\x51\x88\xb9\xd2\x8e\x3d\x76\x22\x67\xc5\xed\xe1\xc5\xcd\xb9\xed\xce\x89\xf5\xfe\xda\x22\x96\xec\x26\xbb\xd1\x39\x1f\x77\x43\xe7\xf4\xd3\xe9\xe8\x63\x07\x74\x6e\xae\x87\x83\x0e\xc8\x4c\x2e\x27\xa7\x28\xce\x4e\xd8\x96\x43\xa4\x2e\x00\x8e\xf9\x81\xbb\x3b\xc2\x29\x2a\xcd\x20\x4e\x95\x3d\x1c\xc6\x69\x7e\x07\x02\xb9\x46\xdc\x6a\xc1\x61\x34\x8f\x28\x6d\x59\x25\xee\x1c\xe6\x90\xe4\xce\x38\x37\x92\x86\xe8\x0e\xe8\xb4\xa3\x76\x15\xa8\x99\x9a\xc5\x7d\xd7\x93\x81\xdc\xc1\xaf\x09\x79\x4a\xa5\xcf\x83\xd8\x17\xd4\xdd\x58\x9c\x14\x6d\x24\x8b\xc9\x01\x6d\x8b\x7a\x38\xaa\x6d\x51\x4d\x0e\x3b\x9d\x85\x58\x79\xdc\xd8\x1d\x87\xd8\x76\x81\x16\x9b\xa7\x20\x34\xaa\x0a\xb3\xd8\xdc\xce\xc3\x0f\xcb\x45\x58\x79\xe8\x69\xde\xf9\x0d\xd9\x04\x66\x98\x89\x6e\x5a\x76\x7a\x20\x34\xa0\x9e\x70\x46\x7e\xeb\x2a\x97\xb1\x68\x53\xa7\x1d\x87\x3c\xf1\x9d\x7a\x2e\xeb\x32\x44\xc9\xcd\xb0\x46\xd0\xf3\xa2\xb9\x53\xdb\x59\xcb\xf3\x13\x22\x33\x6a\x8e\xad\x77\xa3\xc9\x35\x01\xcc\x23\x9c\xce\x82\xec\x66\x36\xd0\xdc\x3c\x6b\x39\x2a\x2c\x25\x4f\x8f\xfa\xd9\x27\x27\xb8\x37\xb3\xe5\xe4\xe9\x69\xe1\xa0\x55\xbe\xba\x74\x02\x71\x84\xbc\xfb\x73\x32\xbc\x26\xab\xc0\x8d\xbd\x80\xfc\xf2\x61\x07\x03\xbe\x2b\x88\xf8\xc3\x2f\x1f\xf6\x2e\x63\x6b\x3b\xb6\x15\x72\x17\x68\x65\xdd\x46\x78\x6c\x4e\xa3\x28\x88\x76\x84\x56\x45\xe3\x49\x6c\x55\xc5\xf6\x00\xae\x9a\xf0\x37\x74\xad\x6d\xde\xe7\x04\xaf\x35\xc8\x6a\x42\xd4\x4d\x3d\xaf\x03\x84\xaa\x83\xce\x03\xb1\xaf\x06\xc5\x26\xcc\xbb\x80\xbe\x1a\xb8\xeb\x82\xfd\x6e\xa0\x96\x45\xa1\x2e\x50\x2d\x74\x66\xb7\x54\xec\x08\x6b\x9a\xc8\x93\xb8\xa6\xcb\xed\x01\xd8\x0c\xe5\x6f\xc8\x56\xdf\xc4\xdf\xa0\xed\x99\x40\x9b\x8a\xab\xbe\x2e\xc0\xd5\xcb\xf0\x2c\x60\x2e\x07\x4b\xbb\xe3\xdc\x8a\xae\xb6\xd8\xbe\x84\x5a\x29\xca\x9d\x0f\xcf\xf3\xf8\x06\x6f\xed\x3f\x98\xef\xa6\x00\x87\x39\x27\x0a\xda\x6e\xe1\x79\x19\xda\x92\x2a\x8d\xa1\x00\x2b\xbc\x6f\xb3\x94\x85\x15\x3a\x5d\xaf\xd7\x04\x77\x59\xc6\x42\x12\x9d\xae\xd6\x03\xc1\xaf\xb0\xcf\x98\xe9\x22\xd8\x24\x6d\xca\x6f\x58\x6b\x3a\xc0\x22\x93\x71\xfe\xdd\xbb\x51\x92\x21\x04\x84\x32\x69\x29\xf2\xf1\x2b\x65\x69\x95\x9c\x90\x7d\x21\xf3\xe9\x98\xbf\x20\x53\xe1\xf7\x64\x66\x8a\xd9\xb9\x76\x08\x7e\xa9\xf2\x6e\x2c\xb7\xa9\x65\x17\xca\xad\xf8\xbf\xbb\xbc\xfc\x68\x03\x48\xcf\xd9\x02\x78\x12\x0b\xeb\xab\xa5\x39\x45\xc6\x24\x3a\x96\xdf\x58\x32\x25\x42\xe5\x2e\x62\x0e\xc8\x53\xb4\xd3\x2d\xf2\xb3\xf1\x8d\x49\x94\x3b\x31\x69\x12\x78\x99\x4f\xd9\xd1\x69\x57\xaa\xbe\xd5\x4e\x0b\x10\x37\xc9\x09\x51\x69\x1e\x56\xca\xfe\x68\x1e\x44\xab\x6c\x36\xc7\x32\x88\xd8\x3f\x98\x19\xe4\xf5\xe4\xab\x69\x10\x49\x2d\x03\x21\x82\x95\x7c\x64\x99\x14\x1a\xc3\xf0\x7f\x62\x1a\xdd\x63\x6e\xc8\xea\x74\x86\xc9\x86\x49\x02\x88\xe1\xa1\x12\x56\xcc\x5a\xa7\x14\xa1\xc7\xe3\xe9\x8a\x25\x5f\x33\xe9\xbb\x4c\x9d\x4c\x6b\x23\xd3\xde\x22\x0a\xe2\xb0\x87\x49\x7a\xd4\xcd\x4f\xf9\x33\x25\xb1\x59\x64\x41\x92\x5c\xf5\xf8\xca\x24\x56\xca\xfb\x62\x52\x72\x13\x97\x00\x91\xa9\x34\x65\xd2\xfe\xca\x05\x24\x17\xfd\xd1\x51\x43\x0f\xd0\xa4\x32\xe6\xd1\x82\xfc\x2e\xcd\x52\xcc\x99\x4c\xe4\x2b\x8a\x87\xa9\x2d\x43\x99\x13\x8b\x5d\x0a\xee\xa4\x4c\x2e\xe3\x78\xeb\x6e\x2d\x9e\x4a\xb3\xad\x14\xd0\x34\x7a\xca\x19\x91\x04\xee\xca\x99\x9e\xa5\xfc\xfd\xca\xef\x2e\x1a\xb5\xee\x26\x98\x01\x35\x22\xca\x97\x56\x5e\x8f\xf1\xf0\x6a\x74\x39\xb0\xf5\x4b\xa9\x4a\x29\x95\x0c\x79\xbe\x28\x89\x96\x5c\x16\x7b\x5f\x0b\x0f\xa9\xef\x69\x4f\x24\x3e\xe8\x7c\xba\x5c\xe2\x5b\x46\x20\x79\xd1\x16\x38\xdd\xf9\xc1\x71\x13\xf7\x4b\xf7\x04\x9b\xee\x3c\x6b\xcc\xaa\xad\x5a\x61\x4f\x30\xd6\x4c\x1d\xf2\x09\x44\x75\xe7\x6d\x01\x15\xd5\xdb\x09\x4f\xff\x35\xc1\x13\xcd\xd6\x0d\x76\x66\x9c\x20\x11\xa3\x25\x74\xa6\xb0\x39\x78\xdf\x25\x6a\x56\x89\x66\x1a\x3b\x05\xcc\xc1\xfb\x67\x8d\x97\xa8\xc4\x66\xb8\x2c\x7d\xfa\x83\x61\x2f\xcf\x7a\x9f\xc7\xa4\xe1\xc5\xd0\x8f\x57\x68\x31\x5e\x99\x57\x21\x88\x35\xba\xb8\x1c\x0c\x31\xf7\x44\xfb\x46\xce\x7e\xd5\xaa\x38\x0d\xb3\x36\x52\xea\x85\x8f\xe7\x5a\x88\x37\x78\x2f\x77\x22\xf6\x25\x9f\x21\x5f\x12\x30\xfd\xc8\xa1\xbb\xc1\x09\x7b\xe0\x06\xd4\x4a\x11\x51\x6d\x0f\x2b\x44\xbc\xa0\x35\x64\x2b\x9a\xb0\x96\x38\x92\x97\xf3\xfa\x2c\xfd\x74\xaa\xd4\xc8\x73\x0b\x49\x04\x6a\x94\x2c\x2e\x05\x64\xf3\xc3\x53\x7d\xe4\x9e\x4c\x63\x75\xd2\x26\x6f\xaa\x8f\xda\x3d\x6e\xab\x4e\x76\x67\xf5\x69\x6d\x3a\x0b\x08\xd8\xe1\x03\x02\xb6\xbf\x80\x80\x3d\x11\x10\xb0\xd6\x01\x01\x6b\x1d\x10\xb0\x6f\x01\x41\xb6\x76\xd3\x80\x80\x75\x16\x10\xb0\x2e\x03\x82\x51\xa7\x01\x41\x95\x68\xe5\x80\x60\xf4\xbc\x03\x02\x76\xa0\x80\x80\x21\xfc\x8e\x4f\xcf\xfe\x18\x4e\xf6\x31\xe2\xe6\xc8\x6f\x15\x12\x48\x0a\xc3\xab\xab\xcb\xab\xbd\xc9\xa7\xa9\x6f\x2f\xde\x68\x6f\x11\x4b\x8e\xfc\x41\x22\x16\xd6\x2c\x62\x49\x56\xee\x9b\x8c\xf1\x05\x27\x6b\x36\xc6\xa7\xbb\x88\xed\x46\xf9\xe2\x3e\x58\xf3\xa8\xc5\x6c\xba\x36\x56\x29\x71\xcb\xa6\x1a\xe9\xb4\x8c\xb6\x0a\xe5\x52\x16\xda\xe8\xd3\x38\x0a\x2b\xb8\x71\x53\x7d\xb6\x89\xc2\xd8\xd7\x8a\xc2\xf0\x5b\xde\x43\x87\x61\xb8\xb3\xb4\xaf\x38\x0c\x68\xa7\x1d\xf3\x9c\xae\x82\xe8\xbe\x61\xbc\x05\x35\xdb\x06\x5c\x52\x91\x6f\x4b\xda\x5d\x04\x61\xd2\x94\xdd\x44\x61\x59\x17\x48\x04\x79\x22\x0c\x7b\x52\x3e\x7e\xe7\x84\x5d\x09\x88\xb4\x64\x69\x36\x1f\xe8\xe8\x6e\x0b\x75\x28\x41\x3a\xcf\x38\x5a\x93\x82\x1f\x66\xb9\x5b\x7a\xcf\x76\xcb\xdd\xc9\x76\x6a\xb7\xcb\xdd\x21\x3f\x38\xac\x86\x7c\x6f\xa8\x1a\x66\xbe\xa3\x1d\x47\xc1\x8c\x72\x4e\x79\x43\x5c\x0d\x79\x5b\x58\x45\x45\xda\xa1\xaa\x3a\x97\xa7\x0e\x51\xb3\xdf\x32\x3c\x2f\x70\xdd\xb5\x8b\x85\xbc\xfa\xac\x8a\xe7\x84\xec\xd8\x9a\xdd\xe0\x66\xc6\x0b\xb3\x40\xd8\x66\x7a\x3d\xbe\x96\x9d\x1d\x7e\xfd\x40\x0c\xe8\x2c\xa2\x8e\x04\xe0\xdc\x3c\xbb\x4e\x48\x0f\xdc\xbe\x5a\xc4\x8f\xa3\xf3\xd1\xc4\x0e\xb9\x5f\x16\xb0\xb7\x9d\x6c\xe9\x3a\x40\x23\xd1\x20\xce\xa9\xb1\xde\x06\xd1\x92\xae\x90\x30\x0e\xbd\x98\xa7\xc7\x41\xe4\xa5\x7e\x6a\x5c\xd9\x0f\xb2\xa3\xf7\x6c\x07\xec\x21\xdf\x07\xae\xaf\x17\x07\xc7\xf5\xf5\x62\x6f\xb8\xbe\x5e\xa4\xb6\xfc\xa4\x8e\xe9\x22\x0b\x2f\x98\xe2\x69\xb3\xc2\x11\x71\x53\x8c\x5f\x2f\xda\x62\x3c\x2a\xf5\x0d\xe3\x9b\x60\x3c\xb6\xd1\x73\xc7\x78\x6c\xcd\x6e\x30\x3e\xe3\x91\x89\x18\x75\x18\xff\x75\x10\x09\x75\xdd\x0e\x91\xd6\x8b\xae\x11\x89\xb7\xcc\xeb\x0c\x21\x76\x4b\x93\x3a\x0d\xee\xe7\x12\x3b\xb1\x88\x3d\x1e\x0d\x30\x8d\xd0\x5f\xa4\xe9\x9d\xa1\x49\x5c\x0f\x99\xbb\xe9\x7c\x1a\x8d\x6f\x59\x52\xcd\xf2\x37\x93\x1a\x37\x85\x1a\xfa\x75\xe6\x5f\x93\x3c\x79\x45\x8a\xd3\x28\xcd\x94\x0f\x79\x0c\xf7\x52\x01\x52\xd0\xb3\x61\xd2\x7c\xaa\x55\xc4\x60\x22\x2f\xee\x5b\x56\xbb\x60\xb3\x86\xd9\xac\x49\x95\x6b\xf6\x4f\xdb\x2a\x57\x94\x83\x9f\xfa\x1b\x32\xf4\x31\x9b\xd5\x7c\x81\x7c\x62\xaa\x4d\xf4\x89\x9d\x9b\x3f\x6b\x6f\xd7\x00\xe9\xa7\x0a\xbf\xc8\x06\xc0\x2f\x14\x9e\x6c\x80\x9d\xd2\x63\xcd\xb0\x5f\x99\x1d\xfb\xfa\x20\xc7\x58\x60\xcc\x02\x8a\xed\x78\xda\x03\x52\xb9\xe9\x86\xca\xf5\xf0\x6a\xf7\xc3\x30\xa4\x56\x57\xa3\x0e\xa8\x5c\x8c\xce\x86\x1d\x90\xf9\x34\xba\x9a\x74\x40\xe6\x4a\x6e\x22\xec\x4a\x65\x32\x3a\x1f\x62\x3c\xa3\x3a\x56\x07\x36\x3a\x95\xf4\x76\x3d\xe9\x43\x8f\x10\xbb\x27\x3f\x9b\x48\x45\x07\xbf\x30\xa2\xa8\x07\x72\xb4\x24\xb6\x3e\xa0\x4d\xc7\x17\x99\x6b\x88\x30\x88\x2e\xaa\x1e\x98\xb1\x23\x77\xbe\x7a\xa6\x3c\xc4\x30\xe6\x88\xd0\x93\x2b\x55\x31\x59\x0a\x3f\x49\x8e\x9b\x4b\xa2\x42\x19\xfe\xe0\xe9\x81\x10\xc5\x24\x8c\xd4\x61\x71\x99\x63\xf8\x2c\x02\xf6\x99\xd1\x65\xe0\x41\xd8\x88\x67\xe3\x8d\xd3\x5b\x19\x9b\x84\x14\x00\xdd\x45\xb4\x52\x23\x7f\xe6\xe1\x27\xc7\x8b\x93\xa7\x2f\xa4\xbd\x2b\x8e\xa5\x6b\x3b\x74\x67\x3e\x39\x80\xda\xfa\x14\x33\x3b\x89\x3d\x92\x33\xeb\x24\xf7\xc7\x47\x73\xce\x55\x0b\x0e\xeb\x85\xdc\x21\xb1\xd4\xc8\x7e\x4b\xef\x31\x4c\x57\x8f\x12\x7c\x0f\x3c\xa4\x7a\x6c\xfd\x9a\x0c\x05\xfa\xdc\x54\x35\x17\x18\x62\xe9\x5a\x60\x6e\x20\x41\x12\x9e\xe8\xf8\x63\xe5\xcc\x96\x69\xfc\xa1\xb9\x9c\xc3\x43\xac\x57\xf8\xc0\x04\x9e\xda\x37\x00\x80\x69\x08\xa2\x0f\x12\xd6\x71\x48\x1c\xb3\xd2\x57\x26\x2d\xe2\x83\x94\xbe\x1c\x9e\xfe\x3b\x25\x2f\x09\xbf\xac\x0f\x41\x8c\x70\x17\x4e\x61\xbc\xac\x2c\x35\x8e\x82\x35\x73\x69\xb4\xa9\x64\x43\x69\x21\x5c\x13\x7a\x34\x7d\x93\x8a\x8b\x13\x35\x88\x29\x53\x85\x36\x8a\xde\x90\x95\x6e\x9a\x39\xf3\x70\xde\x2b\x96\x8a\xeb\xaf\xff\x91\xb2\xc5\x57\xf8\xa6\x8e\x73\xe5\x20\xde\xc0\x65\x38\x44\xb2\xb3\x65\x93\x98\x96\xcd\x09\xfd\x9b\xe8\x33\x23\x7f\xfc\xcc\x03\x9f\x94\xbd\xd7\x7d\x59\x83\xc5\x85\x5e\x42\x72\xa4\x37\x95\x4f\x00\x75\xdb\x08\xc5\x4c\x03\x92\x08\x45\xcd\xa0\xf3\x87\x98\xee\xf2\x31\x0f\x2b\x7e\x6e\x93\xbe\xc2\xf8\xab\xf6\x65\xa8\x5d\xb5\xb6\x80\x74\xb5\xda\xb7\x2e\x8b\xe8\x4c\xc8\x0d\xb7\x8e\xbe\xdd\x49\xbc\x61\x87\xf1\xab\x30\x70\x95\x47\x9c\xcd\xa3\xd5\xce\x63\x55\x76\x9a\xde\x72\x9c\xb2\x10\x8e\xd5\x0c\x5a\xfb\x3b\x68\x66\x1c\x5d\x3d\x7f\x69\xee\xc7\x72\xac\x02\x67\xb7\xc8\x1a\x87\x0c\x59\x59\x3d\x4c\x7c\xd3\x6a\x37\xc9\xcc\x44\x2b\xe8\xaa\xcb\xdc\x36\xa6\x3a\x24\x08\x78\x9c\x7a\x6c\xe1\x9f\xa9\xe7\x8a\x41\xe9\x04\xda\xec\xf1\x9c\xb6\x2e\x9a\x8c\x37\x7a\xb9\xb1\x74\x8e\xa7\x7d\xe6\x44\x54\x64\x4b\x4b\xe1\xb3\xa7\x76\x3a\xda\x17\x96\x89\x3a\xff\x1f\x00\x00\xff\xff\x60\xe1\xce\x8e\xd7\x69\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27095, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

