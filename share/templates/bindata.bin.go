// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\xfb\x73\xdb\xb6\x93\xff\x3d\x7f\x05\x8e\x6d\x6f\x9a\x4e\x25\x5d\x72\xed\x5d\x26\xb5\x3d\xe3\x58\x4a\xaa\x69\x6c\xeb\x6c\x39\x77\xfd\xa9\x43\x89\x90\x84\x98\x22\x59\x02\x94\xe3\x6a\xfc\xbf\xdf\x2e\x1e\x7c\x53\x26\x45\xca\xf1\xcc\x37\x99\x89\xc5\x07\xb0\x2f\x2c\x3e\x58\x00\x4b\x1c\xfd\xdb\xf0\xf2\x6c\xfa\xe7\x64\x44\x56\x62\xed\xbe\x38\x39\x92\x3f\x84\xc0\x05\xb5\x1d\xb8\xc0\xcb\x35\x15\x36\x99\xaf\xec\x90\x53\x71\x6c\x45\x62\xd1\x7b\x63\xa5\x5f\xad\x84\x08\x7a\xf4\xef\x88\x6d\x8e\xad\xff\xeb\xdd\x9c\xf6\xce\xfc\x75\x60\x0b\x36\x73\xa9\x45\xe6\xbe\x27\xa8\x07\xf5\xc6\xa3\x63\xea\x2c\x69\xa6\xa6\x67\xaf\xe9\xb1\xb5\x61\xf4\x2e\xf0\x43\x91\x2a\x7c\xc7\x1c\xb1\x3a\x76\xe8\x86\xcd\x69\x4f\xde\xfc\x4c\x98\xc7\x04\xb3\xdd\x1e\x9f\xdb\x2e\x3d\x7e\x65\x08\x09\x26\x5c\x2a\xaf\xe1\x6e\xbb\xed\x0f\x6d\x61\xf7\x7f\xf7\xb9\x40\xe2\x0f\x0f\x04\xae\x80\xe4\xd1\x20\x29\x77\x72\xe4\x32\xef\x96\x84\xd4\x3d\xb6\x18\xb0\xb4\x88\xb8\x0f\x40\x0e\xb6\xb6\x97\x74\x10\x78\x4b\x8b\xac\x42\xba\x38\xb6\x06\x0b\x7b\x83\x05\xfa\xf8\xac\x50\x95\x8b\x7b\x97\xf2\x15\xa5\xc2\x10\x10\xf4\x8b\x18\xcc\x39\x8f\xeb\xc3\xf5\x80\x79\x0e\xfd\xd2\xc7\xa7\x9a\x02\x9f\x87\x2c\x10\xe9\x2a\x9f\xed\x8d\xad\x9e\x5a\x79\x3b\x13\x1e\xce\x81\xd0\x67\x3e\x08\xd1\xc2\x21\x85\xab\xd7\xfd\x57\xfd\x57\x6f\xcc\x83\xfe\x9a\x79\xfd\xcf\xc0\xd3\x01\xc5\x7b\x6b\x9b\x79\xaa\xfc\x76\xcb\x16\xa4\x3f\x3d\xfd\xf0\x61\x34\x9c\x31\xef\xe1\x01\xca\x69\x61\x54\x8d\xed\x96\xba\x1c\x2c\x04\x1c\x06\x6b\xe6\xde\xea\x97\xf2\x85\xe7\x3c\x3c\x58\xc6\xa8\x47\x03\x25\x9c\x96\x7f\xa0\x5d\xe3\xe4\x68\xe6\x3b\xf7\xfa\xa1\x67\x6f\xc8\xdc\xb5\x39\x3f\xb6\xe0\x72\x66\x87\x44\xfd\xf4\x1c\xba\xb0\x23\x57\x98\xdb\x05\xfb\x42\x9d\x9e\xf0\x03\x8b\x84\x3e\x34\x23\x96\x66\x4b\x70\x16\x68\x86\x98\x9f\xc3\x62\x62\xe8\x11\xa0\x12\x85\x9a\x6e\xc4\x1c\x53\x26\x57\xca\x09\xfd\xc0\xf1\xef\x3c\xc3\x05\x25\xa4\x61\x52\x58\x0a\x1b\x09\xe1\x7b\x59\x21\x41\x90\xe5\xd2\xa5\xe0\x77\xae\x6b\x07\x9c\x3a\xa6\x25\x55\x61\x6d\x53\x55\x08\x65\x51\xa5\xcc\x63\x3b\x5c\x62\x43\x7d\xa7\x69\xc5\xaf\x53\x6c\x65\x7b\x07\x76\xcc\x96\x87\x3d\xdf\x73\xef\xb3\x45\xa0\xd0\x54\xc9\x91\x18\x03\x6c\x0e\xd5\x76\x50\x42\xbf\xec\x01\xdb\x02\xa9\x67\x53\x73\xa0\x8c\x98\x69\x04\x9b\x30\x27\x69\xae\x59\x68\x7b\x60\xf2\x5c\x23\x9a\x46\xd1\x66\xd5\x85\x32\x2d\x61\x8a\x5a\xc4\x0e\x99\xdd\xa3\x5f\x80\xbb\x43\x81\xb2\x08\x23\x1a\xf7\xbe\x7c\x43\xa0\xc3\x20\xfb\x95\x06\x87\x82\x1a\x45\xf4\x38\x1a\x40\xa5\xbc\x5e\x76\x46\xa5\xc8\x2d\x28\xb0\xa6\x5e\x64\xfc\x5b\x5d\x4b\x31\x5d\x7b\x46\x5d\x97\x3a\xb3\xfb\xbc\x09\x72\x1c\x5c\x56\x20\xa9\x3d\x5a\x13\x0d\x42\xca\x01\xd4\x32\xdd\x26\xae\x1e\x46\x9e\xc7\xbc\xe5\xd1\xc0\x65\x45\xba\x35\xea\x43\x23\x15\x5a\x04\x50\x2a\x5f\x2e\x65\xaf\xe1\xf8\x7a\x7a\x35\x7e\x87\xe6\xb2\x8b\xae\x51\x10\x63\x10\xb9\x19\x0b\x66\x6c\x9c\x34\x53\xbe\x5b\x25\x90\xa0\x1e\x90\x1d\xfd\x2e\xdd\x2c\x08\x4d\xba\x28\xfc\x94\xd8\x1a\x99\xb1\xc0\xca\x43\x43\x89\xce\xb1\xc6\xe3\x09\x2a\x5b\x66\xe0\x9c\xe9\x8a\xd6\x35\xea\x99\x12\xae\x5d\xc6\x99\xe4\x7a\x43\xa3\x0e\x50\x6c\xa9\x98\x2b\x70\x2b\xbc\x4d\xe9\xf5\xf1\xb4\xcc\xe7\x4b\x9a\xa9\x68\xe6\x7d\xbc\xbf\x4c\x9a\x96\xee\x2f\x49\x44\x81\x60\x6b\x5a\x68\xa0\x98\x7c\x4d\x32\x1a\xae\x14\xb5\x12\x9c\x2a\xed\x15\x19\x7b\xde\xc8\xaa\x65\x1d\x43\xdb\xb4\x54\xc2\x6c\x07\x29\x2f\x59\xec\x46\x55\x1e\x6f\x2e\x43\xb6\x5c\x89\x6a\xa8\xd9\xe5\xf6\x29\xda\x2e\xe3\xa2\xc7\x3c\x08\x83\x68\x65\xaf\x32\xa4\x2b\x6c\xaa\xe0\xf9\x3b\x0c\x02\xca\xad\x87\xaf\x9a\x59\xec\x31\x5e\x01\xaf\x62\x15\xf0\x6e\x39\x6d\x96\x55\x9c\x36\xf6\x12\xc0\x5e\x1c\xc2\x15\x8a\x3d\x86\xd8\x73\xc1\x36\xc5\x21\x2e\x37\x02\x6f\x68\xc8\xd1\xfb\x2b\xc6\xe0\x7d\x86\x5d\x9c\x0d\xf0\xb7\x83\xc1\xdd\xdd\x5d\x1f\xc6\xd1\x10\xfe\xf7\xe7\xfe\x7a\xa0\xe2\x70\x88\x5a\x5d\x6a\x73\xca\x07\xae\x2d\x28\x2f\x1b\x55\x2e\xaf\xa7\xa3\x8b\x69\xd9\x50\xd2\x0e\x6c\x8c\xae\x07\x41\x1c\x4d\xbc\x0b\xc8\xe9\xc6\x8c\x92\x9a\x81\xa1\x4f\xa3\xab\xeb\xf1\xe5\xc5\xd3\xe0\x50\x6e\x38\x4f\xdd\xc2\x0d\x60\x85\x9e\x31\x98\x11\x49\xce\x05\xca\xa3\x7d\x12\xd8\x8e\x03\xa1\x0c\xce\x17\x38\xdd\x80\xde\xf7\x7c\x55\x3a\x4d\x08\xfd\xbb\xfc\xd4\x00\x69\xaf\xe9\x1a\xc2\x74\x35\x0f\x55\x05\x67\xae\x3f\xbf\xc5\x78\xbf\xb7\x76\x7a\xaf\xcd\x85\xbf\x58\xc0\x9c\xab\xf7\x2a\x13\x42\x6c\xb7\x82\xae\x03\xb4\x2f\xb1\x60\x16\x03\x62\xf1\xb7\x6f\xd5\xc5\x5f\xe0\xf8\xd4\x05\xea\x16\xe9\xe7\x07\xcc\x84\x3b\x5b\xec\x62\xfe\x9f\xcd\x98\xb1\xc5\x4e\x5e\xf3\x20\xda\xa9\x69\x33\x66\x40\x6d\x27\x37\xa7\x4b\xcd\x9c\x72\xcd\xb2\x7e\x63\x6e\xea\x4c\x0e\xeb\x78\x46\xc0\x77\x69\xf0\x26\xe7\x18\x0d\xcd\x07\xa3\xcd\xd3\x6b\xb4\x59\x1e\x50\x23\x18\xd5\x9a\x68\xb4\x73\x89\xc3\x54\xd8\xd8\x21\x41\x74\x22\xc7\x44\xe3\xd4\xc3\xc3\x6f\xf9\xb5\x06\xbd\xc4\x80\xab\x0e\x72\x81\x6a\xbb\x1d\xfc\xf4\xe2\xa7\xc1\xc3\xc3\x76\xab\xe4\x4b\x09\x6c\x23\x78\xe3\xfa\x8c\x05\x92\x6a\x1c\x05\xca\xbf\xc3\x2f\xae\x03\x79\x67\x2e\x9b\xdf\x1e\x6f\xc5\x8a\xf1\xfe\x0a\x46\x2e\x97\xca\x27\x0f\x2f\x14\x52\x4e\x41\x4e\x85\x90\x27\x7a\x05\x64\x17\x33\x6d\x9d\xb9\x0b\x33\x07\xa8\xc5\xbc\x20\x12\xa8\xc7\x78\x78\x2a\x44\x08\xfc\xe0\x46\x36\xc4\xc3\x43\x32\x65\xe9\xcd\x57\x74\x7e\x3b\xf3\xbf\x98\x75\x86\xe4\x5e\x0e\x5b\x2b\xe6\x38\xd4\x8b\xc7\x53\x79\x87\xd2\x7c\xe6\x5f\xce\x5c\x1f\xa6\x3c\x96\xe4\x83\x0c\xe5\x08\x87\x0c\xdf\xfb\xa1\xe6\x98\x66\x88\x62\xe1\xdb\xf3\xff\xbd\xc6\x65\x2a\x55\x22\xa7\xa8\x24\xd1\x48\xd9\x20\x02\xe7\xe3\x16\x96\xb9\x63\x62\x45\xf0\x0e\xbc\x09\x5d\x03\xe8\xe2\x1f\xb5\xa4\xb4\xdd\x42\xa4\xb3\xa4\xe4\x7b\xf6\x33\xf9\x7e\xee\x87\x94\xbc\x3d\x26\x6a\x28\x3a\x9b\xdc\xf4\x3f\x42\x0c\x09\x02\x88\x70\xbb\xbd\xa5\xf7\x44\x82\x17\x90\x9a\xdd\xf7\x2e\x2c\x55\xbe\x7f\xa1\xa4\x3d\x12\x8e\x71\x67\x74\x23\x15\xc3\x12\xcf\xbf\x0b\x6d\x1d\x3c\x82\xf8\x71\x8d\xa3\x81\x70\x2a\x6b\xc5\xcb\x6f\xb8\xa0\x91\x98\xca\x54\xbf\xe1\x34\x3c\x53\xcf\x92\xc5\xc4\xe4\x15\x12\x8f\xd7\x38\x4e\xda\x30\xba\xbe\xe7\x9a\x0f\xc9\x33\x82\x57\xdd\xf1\x19\x4b\xff\x2e\x55\x08\x5f\x55\x30\x1a\x88\x30\xe5\x11\xd9\x9f\x3a\xfe\xa1\x20\x08\x1b\x17\x2f\x62\xa1\xf1\xe6\x15\x81\x30\x86\x05\x54\xc3\x94\xd2\x2b\xb5\xcc\x0c\x9c\x0d\x94\x88\x55\x1a\x64\xe2\x3b\x7c\xf1\x88\x3b\xc8\x62\xd8\x60\x99\x85\xab\xc8\x63\x99\x10\xe9\xe4\x87\xdc\x8a\xd5\x3e\x5c\xa0\xb5\x0e\xcf\x04\x9b\xaa\x0d\x97\x81\xb6\xaa\x7c\x6a\xd6\x6d\x45\xb2\x70\xbb\x0b\xf9\x4d\x77\x57\xc8\x2f\x12\x28\x96\x0d\xd8\x04\x38\x9c\xc5\xec\x1e\xc2\xd4\xbf\x1a\xa2\x87\xc3\xf8\x6d\x82\x1c\xc3\xf7\x92\x48\x01\x3d\x34\x71\x8d\x20\x0e\x0b\xe5\xda\x9e\xaa\xdd\x1f\xb2\xf0\x42\xae\xe4\xe5\xba\x51\x0e\x42\x76\x18\x41\x22\xe9\x8f\xf8\x43\x5e\xbd\x46\x6e\x3d\xc5\xce\xa1\x9b\x0c\x23\xba\x41\x46\x2f\x4b\x51\x68\x2f\x6e\xff\x95\x66\x56\xaa\x55\x39\xb3\x02\x42\x40\xb7\x97\xb5\x4e\x37\x36\x73\x9b\x55\x81\x9e\x04\x2d\xfc\xef\xde\x8c\x07\xbf\x1d\xf1\x28\x48\x90\xa4\x5a\x87\x88\xd3\x80\x86\x73\x88\xd6\x41\x93\xe4\x86\xc4\x14\x27\xea\x81\x94\xde\xd0\xac\x05\x75\x46\xaa\xa9\x2f\xec\xb4\x22\xad\x40\xcb\xf8\x66\x27\xc8\x55\x6a\x17\xb1\x8a\x03\x13\x62\xae\xb4\x4f\x4f\xec\xd0\x5e\xf3\xfe\xe8\xe2\xe6\xbc\xef\x2c\x88\xf5\xfe\xda\x22\x96\xec\x21\xed\xe8\x9c\x4f\xba\xa1\x73\xfa\xe9\x74\xfc\xb1\x03\x3a\x37\xd7\xa3\x61\x07\x64\xa6\x97\xd3\x53\x14\xa7\x15\xac\x65\xc0\xa8\x0b\x6c\x63\x9e\xef\xb4\x07\x37\x45\xa5\x04\xdd\xd4\x8b\xa7\x83\x37\xcd\xef\x89\xf0\xad\x82\xdb\x5e\x00\x37\x5e\x84\x94\x36\xac\x12\x75\x8e\x70\x48\xb2\x35\xc4\x8d\xa5\x59\xba\xc3\x38\xed\xa3\x5d\x85\x67\xa6\x66\x7e\xa3\xf5\x64\x28\xb7\xec\x2b\x02\x9d\x42\xe9\x73\x3f\xf2\x04\x75\x76\x16\x27\x79\x1b\xc9\x62\x72\x2c\xdb\xa3\x1e\x0e\x68\x7b\x54\x93\x23\x4e\x67\x81\x55\x16\x32\xda\x43\x10\xdb\x2f\xbc\x62\x8b\x04\x7f\xc6\x15\xc1\x15\xcb\x04\x57\xba\x8b\xb2\x45\x3f\x83\x3a\xcd\x61\x86\x99\xc0\x26\x4b\xb1\x7e\x7f\x87\x0a\x43\xea\x0a\x7b\xec\x35\xae\x72\x19\x89\x26\x75\x9a\x71\xc8\x12\x6f\xd5\x69\x59\x97\x81\x49\x66\x4a\x35\x86\x4e\x17\x2e\xec\xca\x7e\x5a\x9c\x90\x10\x99\x3d\x73\x6c\xbd\x1b\x4f\xaf\x09\xc0\x1d\xe1\x74\xee\xa7\x37\xae\x81\xe6\xee\x69\xca\x51\x6e\xd9\x78\x76\x34\x48\x3f\x39\xc1\x7d\x98\x3d\x67\x4b\x8f\x0b\x07\xad\xf2\xd5\xa5\x13\x08\x21\xe4\xdd\x9f\xd3\xd1\x35\x59\xfb\x4e\xe4\xfa\xe4\x97\x0f\x2d\x0c\xf8\x2e\x27\xe2\x0f\xbf\x7c\x38\xb8\x8c\x8d\xed\xd8\x54\xc8\x36\xa8\xca\xba\x8d\xeb\xd8\x82\x86\xa1\x1f\xb6\x44\x55\x45\xa3\x04\x56\xd5\x8b\x03\xe0\xaa\x26\xfc\x0d\x58\x1f\x6f\xd9\xe7\x84\xac\x15\xa0\x6a\x02\xd3\x5d\x9d\xae\x03\x70\xaa\x42\xcd\x27\x62\x5f\x8e\x87\x75\x98\x77\x81\x7a\x15\x48\xd7\x05\xfb\x76\x78\x96\x06\xa0\x2e\x00\x2d\xb0\xe7\xb7\x54\xb4\x44\x34\x4d\xa4\x04\xd2\xf4\x9b\x03\x60\x9a\xa1\xfc\x0d\xd4\x6a\xb4\xee\x37\x54\x7b\x26\xa8\xa6\xa2\xa9\xaf\x8b\x6d\xd5\x32\x3c\x0b\x84\xcb\x20\x52\x7b\x88\x5b\xd3\xf5\x1e\x1b\x94\x50\x2b\x01\xb8\xf3\xd1\x79\x01\xda\x30\x8d\x44\x81\xda\x2d\xc3\x5c\x64\xac\xd1\xff\x83\xa1\x50\x39\x54\x4b\xbd\xa9\x89\x02\x58\xe1\x7d\x93\x65\x2b\xac\xd0\xe9\xb2\xbc\x26\xd8\x66\xc9\x0a\x49\x74\xba\x28\x0f\x04\xbf\xc2\x4e\x62\xaa\x77\x60\x93\x34\x29\xbf\x63\x5d\xe9\x09\x16\x94\x8c\xdf\xb7\xef\x41\x71\xfa\x0f\x10\x4a\xe5\x9c\xc8\xc7\xaf\x94\xa5\x55\xe6\x41\xfa\x85\x4c\x96\x63\xde\x92\xcc\x84\xd7\x93\x69\x27\x66\x6f\xda\x26\xf8\x19\xca\xbb\x89\xdc\x88\xc6\x24\x84\xec\xc2\xfe\xbb\xcb\xcb\x8f\x7d\xc0\xe7\x05\x5b\x02\x4f\x62\x61\x7d\xb5\x0c\xa7\xc8\x98\x2c\xc6\xe2\x1b\x4b\xe6\x3b\xa8\xc4\x44\x4c\xf0\x78\x8c\x76\xb2\x09\x7e\x36\xb9\x31\x59\x70\x27\x26\x07\x02\x2f\xb3\xf9\x38\x3a\xa7\x4a\xd5\xb7\x9a\x69\x01\xe2\xc6\x09\x1f\x2a\x87\xc3\x4a\xd8\x1f\x2d\xfc\x70\x9d\x4e\xd5\x58\xf9\x21\xfb\x07\xd3\x7e\xdc\x9e\x7c\x35\xf3\x43\xa9\xa5\x2f\x84\xbf\x96\x8f\x2c\x93\x1f\x63\x18\xfe\x4f\x44\xc3\x7b\x4c\xfc\x58\x9f\xce\x31\x93\x30\xce\xee\x30\x3c\x54\x36\x8a\x59\xd7\x94\x22\xf4\x78\x34\x5b\xb3\xf8\x53\x25\x7d\x97\xaa\x93\x6a\x6d\x64\xda\x5b\x86\x7e\x14\xf4\x30\x03\x8f\x3a\xd9\x39\x7e\xaa\x24\x36\x8b\x2c\x48\xe2\xab\x1e\x5f\x9b\xac\x49\x79\x9f\xcf\x38\xae\xe3\x12\x20\x32\x95\xa6\x8c\xdb\x5f\xb9\x80\xe4\xa2\xbf\x28\xaa\xe9\x01\x9a\x54\xca\x3c\x5a\x90\xdf\xa5\x59\xf2\x09\x91\xb1\x7c\x79\xf1\x30\x6f\x65\x24\x13\x5e\xb1\x4b\xc1\x9d\x94\xc9\x61\x1c\x6f\x9d\xbd\xc5\x53\x39\xb4\xa5\x02\x9a\x46\x4f\x38\x23\x92\xc0\x5d\x31\x8d\xb3\x90\x9c\x5f\xfa\x51\x45\xad\xd6\xdd\x05\x33\xa0\x46\x48\xf9\xca\xca\xea\x31\x19\x5d\x8d\x2f\x87\x7d\xfd\x52\xaa\x52\xc8\x13\x43\x9e\x2f\x0a\xa2\xc5\x97\xf9\xde\xd7\xc0\x43\xaa\x7b\xda\x23\xa9\x0d\x3a\x59\x2e\x93\xd5\x96\x12\x48\x5e\x34\x05\x4e\x67\xf1\xe4\xb8\x89\xdb\xa2\x07\x82\x4d\x67\x91\x36\x66\xd9\x8e\xac\xe8\x4f\x31\xcc\x4c\x1c\xf2\x11\x44\x75\x16\x4d\x01\x15\xd5\x6b\x85\xa7\xff\x9a\xe0\x89\x66\xeb\x06\x3b\x53\x4e\x10\x8b\xd1\x10\x3a\x13\xd8\x1c\xbe\xef\x12\x35\xcb\x44\x33\x8d\x9d\x00\xe6\xf0\xfd\xb3\xc6\x4b\x54\x62\x37\x5c\x16\xbe\xeb\xc1\xb0\x97\xa7\xbd\xcf\x65\xd2\xf0\x62\xe4\x45\x6b\xb4\x18\x2f\x4d\x9f\x10\xc4\x1a\x5f\x5c\x0e\x47\x98\x62\xa2\x7d\x23\x63\xbf\x72\x55\xec\x9a\xc9\x19\x09\xf5\xdc\x97\x71\x0d\xc4\x1b\xbe\x97\x5b\x0f\x87\x92\xcf\x90\x2f\x08\x98\x7c\xc1\xd0\xdd\xe0\x84\x3d\x70\x07\x6a\x25\x88\xa8\xb6\x82\x15\x22\x5e\xd0\x0a\xb2\x25\x4d\x58\x49\x1c\xc9\xcb\x29\x7d\x9a\x7e\x32\x55\xaa\xe5\xb9\xb9\x84\x01\x35\x4a\xe6\x57\x01\xd2\xc9\xdf\x89\x3e\x72\x13\xa6\xb6\x3a\x49\x93\xd7\xd5\x47\xed\x1b\x37\x55\x27\xbd\x95\xfa\xb8\x36\x9d\x05\x04\xec\xe9\x03\x02\x76\xb8\x80\x80\x3d\x12\x10\xb0\xc6\x01\x01\x6b\x1c\x10\xb0\x6f\x01\x41\xba\x76\xdd\x80\x80\x75\x16\x10\xb0\x2e\x03\x82\x71\xa7\x01\x41\x99\x68\xc5\x80\x60\xfc\xbc\x03\x02\xf6\x44\x01\x01\x43\xf8\x9d\x9c\x9e\xfd\x31\x9a\x1e\x62\xc4\xcd\x90\xdf\x2b\x24\x90\x14\x46\x57\x57\x97\x57\x07\x93\x4f\x53\xdf\x5f\xbc\xf1\xc1\x22\x96\x0c\xf9\x27\x89\x58\x58\xbd\x88\x25\x5e\xb4\xaf\x33\xc6\xe7\x9c\xac\xde\x18\x9f\xec\x24\x36\x1b\xe5\xf3\x5b\x60\xf5\xa3\x16\xb3\xd5\x5a\x5b\xa5\xd8\x2d\xeb\x6a\xa4\xb3\x32\x9a\x2a\x94\x49\x54\x68\xa2\x4f\xed\x28\x2c\xe7\xc6\x75\xf5\xd9\x27\x0a\x63\x5f\x2b\x0a\xc3\x0f\x75\x9f\x3a\x0c\xc3\x4d\xa5\x43\xc5\x61\x40\x3b\xe9\x98\xe7\x74\xed\x87\xf7\x35\xe3\x2d\xa8\xd9\x34\xe0\x92\x8a\x7c\x5b\xd2\xee\x22\x08\x93\xa6\xec\x26\x0a\x4b\xbb\x40\x2c\xc8\x23\x61\xd8\xa3\xf2\xf1\x3b\x3b\xe8\x4a\x40\xa4\x25\x4b\xb3\xc5\x50\x47\x77\x7b\xa8\x43\x09\xd2\x79\xc6\xd1\x9a\x14\xfc\x69\x96\xbb\xa5\xf7\xec\xb7\xdc\x1d\x6f\xa7\x76\xbb\xdc\x1d\xf0\x27\x87\xd5\x80\x1f\x0c\x55\x83\xd4\x97\xb2\x93\xd0\x9f\x53\xce\x29\xaf\x89\xab\x01\x6f\x0a\xab\xa8\x48\x33\x54\x55\x87\xee\x54\x21\x6a\xfa\xbb\x85\xe7\x05\xae\x6d\xbb\x58\xc0\xcb\x0f\xa2\x78\x4e\xc8\x8e\xad\xd9\x0d\x6e\xa6\xbc\x30\x0d\x84\x4d\xa6\xd7\x93\x6b\xd9\xd9\xe1\xd7\xf3\xc5\x90\xce\x43\x6a\x4b\x00\xce\xcc\xb3\xab\x84\x74\xc1\xed\xcb\x45\xfc\x38\x3e\x1f\x4f\xfb\x01\xf7\x8a\x02\xf6\xf6\x93\x2d\x59\x07\xa8\x25\x1a\xc4\x39\x15\xd6\xdb\x21\x5a\xdc\x15\x62\xc6\x81\x1b\xf1\xe4\xac\x87\xac\xd4\x8f\x8d\x2b\x87\x41\x76\xf4\x9e\xfd\x80\x3d\xe0\x87\xc0\xf5\xcd\xf2\xc9\x71\x7d\xb3\x3c\x18\xae\x6f\x96\x89\x2d\x3f\xa9\x33\xb8\xc8\xd2\xf5\x67\x78\x94\xac\xb0\x45\x54\x17\xe3\x37\xcb\xa6\x18\x8f\x4a\x7d\xc3\xf8\x3a\x18\x8f\x6d\xf4\xdc\x31\x1e\x5b\xb3\x1b\x8c\x4f\x79\x64\x2c\x46\x15\xc6\x7f\x1d\x44\x42\x5d\xf7\x43\xa4\xcd\xb2\x6b\x44\xe2\x0d\x53\x3a\x03\x88\xdd\x92\x7c\x4e\x83\xfb\xf9\x9c\xce\xc0\xe4\xa9\x07\x0c\x33\x3a\xb1\x52\x7f\x32\x1e\x62\x62\xa1\xb7\xdc\x71\xf8\x8c\x86\x36\xb0\x63\x5c\xa7\x5e\xea\x66\x5c\xe3\x26\x57\x43\xbf\x4e\xfd\x6b\x92\x1d\x1f\xf0\x88\x03\x4a\x94\x69\xa1\xef\xf1\x34\x94\x9a\xa9\xf2\x89\x56\x21\x83\x39\xbc\xb8\x6f\x58\xed\x82\xcd\x6b\x26\xb2\xc6\x55\xae\xd9\x3f\x4d\xab\x5c\x51\x0e\x2e\xea\xed\xc8\xcb\xc7\x44\x56\xf3\xa1\xf1\x89\xa9\x36\xd5\x27\x71\xee\xfe\x7a\xbd\x51\x03\xfc\x22\x1b\x00\xbf\x4a\xd8\xd5\x00\xf9\x6f\x15\x5a\x65\xc6\x9a\x11\xbf\x34\x31\xf6\xf5\x93\x1c\x54\x81\xe1\x0a\xe8\xd8\xf2\x3c\x07\xa4\x72\xd3\x0d\x95\xeb\xd1\x55\xfb\xe3\x2e\xa4\x56\x57\xe3\x0e\xa8\x5c\x8c\xcf\x46\x1d\x90\xf9\x34\xbe\x9a\x76\x40\xe6\x4a\xee\x1f\xb4\xa5\x32\x1d\x9f\x8f\x30\x94\x51\x1d\xab\x03\x1b\x9d\x4a\x7a\x6d\xcf\xf2\xd0\x83\x43\xfb\xbc\x67\x13\xa4\xe8\xb8\x17\x06\x13\xf5\x40\x0e\x94\xa4\xaf\x0f\x5e\xd3\xa1\x45\xea\x1a\x82\x0b\xa2\x8b\xaa\x07\x96\x1e\x3b\x32\xe7\xa6\xa7\xca\x43\xf8\x62\x8e\xfe\x3c\xb9\x52\x15\xe3\x55\xf0\x93\xf8\x18\xb9\x38\x20\x94\x91\x0f\x9e\x0a\x08\x01\x4c\xcc\x48\x1d\x02\x97\x3a\x5e\xcf\x22\x60\x9f\x39\x5d\xf9\x2e\x44\x8c\x78\xe6\xdd\x24\xb9\x95\x61\x49\x40\x01\xd0\x1d\x04\x22\x35\xe8\xa7\x1e\x7e\xb2\xdd\x28\x7e\xfa\x42\xda\xbb\xe4\xb8\xb9\xa6\xa3\x76\xea\x6b\x03\xa8\xad\x8f\x28\xeb\xc7\x61\x47\x7c\x16\x9d\xe4\xfe\xf0\x60\x0e\xb1\x6a\xc0\x61\xb3\x94\x9b\x23\x12\x08\x43\x02\x63\x3a\x46\xe8\xea\x51\x8c\xef\xbe\x8b\x54\x8f\xad\x5f\xe3\xa1\x40\x9f\x87\xaa\xa6\x01\x23\x2c\x5d\x09\xcc\x35\x24\x88\x23\x13\x1d\x7a\xac\xed\xf9\x2a\x09\x3d\x34\x97\x73\x78\x88\xf5\x0a\x21\x88\x3e\x10\x58\xc7\x21\x51\x24\x47\x10\x24\xd1\xbf\x91\x31\x42\x59\x7c\x50\x77\x64\xfa\xef\x84\x7c\x9e\xf0\xcb\xea\xe8\x03\x3f\xe5\xc0\x62\x17\x76\x6e\xa8\x2c\x2d\x35\x09\xfd\x0d\x73\x68\xb8\xab\x64\x3d\x69\xdf\x24\xd2\xe2\x94\x8c\xa6\xc5\xd5\x97\xd7\xf8\x7c\xa7\xe8\xf5\x58\xfd\xfa\x1f\x09\xaf\x05\x73\x69\x60\x8b\x55\x09\x3b\xdd\x76\x58\xe2\x2f\x2c\xf2\xe8\xf8\x5d\xc3\x5b\x38\xc4\xaf\xf3\x55\x9d\x48\x96\x2d\x08\xfd\x9b\xe8\x63\x20\x7f\xfc\xcc\x7d\x8f\x14\x1d\xd7\x79\x59\x01\xc3\xb9\x0e\x42\x32\xa4\x77\x95\x8f\xb1\x74\xdf\xe0\xc4\x04\xff\x71\x70\xa2\xe6\xcd\xd9\x73\x49\xdb\x7c\xc2\xc3\xf2\x1f\xd9\x24\xaf\x30\x0a\xab\x7c\x19\x68\x57\xad\x2c\x20\xdd\xae\xf2\xad\xc3\x42\x3a\x17\x72\x9b\xad\xa3\x2f\x76\x62\x6f\x68\x31\x74\xe5\xc6\xac\xe2\x60\xb3\x7b\xa0\x6a\x3d\x4c\xa5\x27\xe7\x0d\x87\x28\x0b\x91\x58\xcd\x9b\xb5\xbf\x83\x66\xc6\xd1\xd5\xf3\x97\xe6\x7e\x22\x87\x29\x70\x76\x8b\x6c\x70\xb4\x90\x95\xd5\xc3\xd8\x37\xad\x66\x53\xcb\x54\xa0\x82\xae\xba\xca\x6c\x5e\xaa\x63\x80\x80\xc7\xa9\xcb\x96\xde\x99\x7a\xae\x18\x14\x0e\x95\x4d\x1f\xbb\xd9\xd7\x45\xe3\xa1\x46\x2f\x32\x16\xce\xe7\xec\x9f\xd9\x21\x15\xe9\xd2\x52\xf8\xf4\x69\x9c\xb6\xf6\x85\x55\xac\xce\xff\x07\x00\x00\xff\xff\xba\x72\x88\x61\xaa\x69\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27050, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

