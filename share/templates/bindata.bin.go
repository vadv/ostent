// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7d\x6f\xdb\x38\x93\xff\xbf\x9f\x42\xa7\x7d\x9e\xc3\xd3\xc5\x5a\xbe\xf6\x76\xef\x8a\x6e\x12\x20\x89\x9d\xd6\xd8\x26\xf1\x25\x4e\xef\xf6\xaf\x85\x6c\xd1\x36\x1b\x59\xd2\x8a\x94\xd3\xac\x91\xef\x7e\x33\x7c\xd1\xbb\x14\xc9\x52\x92\x2e\xd0\x02\x85\xf5\x42\xce\x0c\x87\xc3\xdf\x0c\xa9\x21\x73\xf0\x6f\xa3\xcb\xd3\xd9\xef\xd3\xb1\xb1\xe6\x1b\xf7\xd5\xd1\x81\xf8\x31\x0c\xb8\x20\xb6\x03\x17\x78\xb9\x21\xdc\x36\x16\x6b\x3b\x64\x84\x1f\x9a\x11\x5f\x0e\xde\x99\xe9\x57\x6b\xce\x83\x01\xf9\x33\xa2\xdb\x43\xf3\xff\x06\x37\xc7\x83\x53\x7f\x13\xd8\x9c\xce\x5d\x62\x1a\x0b\xdf\xe3\xc4\x83\x7a\x93\xf1\x21\x71\x56\x24\x53\xd3\xb3\x37\xe4\xd0\xdc\x52\x72\x17\xf8\x21\x4f\x15\xbe\xa3\x0e\x5f\x1f\x3a\x64\x4b\x17\x64\x20\x6e\x7e\x32\xa8\x47\x39\xb5\xdd\x01\x5b\xd8\x2e\x39\x7c\xa3\x09\x71\xca\x5d\x22\xae\xe1\x6e\xb7\xb3\x46\x36\xb7\xad\x8f\x3e\xe3\x48\xfc\xe1\xc1\x80\x2b\x20\x79\x30\x4c\xca\x1d\x1d\xb8\xd4\xbb\x35\x42\xe2\x1e\x9a\x14\x58\x9a\x06\xbf\x0f\x40\x0e\xba\xb1\x57\x64\x18\x78\x2b\xd3\x58\x87\x64\x79\x68\x0e\x97\xf6\x16\x0b\x58\xf8\xac\x50\x95\xf1\x7b\x97\xb0\x35\x21\x5c\x13\xe0\xe4\x2b\x1f\x2e\x18\x8b\xeb\xc3\xf5\x90\x7a\x0e\xf9\x6a\xe1\x53\x45\x81\x2d\x42\x1a\xf0\x74\x95\x2f\xf6\xd6\x96\x4f\xcd\xbc\x9e\x0d\x16\x2e\x80\xd0\x17\x36\x0c\x51\xc3\x21\x81\xab\xb7\xd6\x1b\xeb\xcd\x3b\xfd\xc0\xda\x50\xcf\xfa\x02\x3c\x1d\x68\xf8\x60\x63\x53\x4f\x96\xdf\xed\xe8\xd2\xb0\x66\xc7\x1f\x3e\x8c\x47\x73\xea\x3d\x3c\x40\x39\x25\x8c\xac\xb1\xdb\x11\x97\x81\x86\x80\xc3\x70\x43\xdd\x5b\xf5\x52\xbc\xf0\x9c\x87\x07\x53\x2b\xf5\x60\x28\x85\x53\xf2\x0f\x95\x69\x1c\x1d\xcc\x7d\xe7\x5e\x3d\xf4\xec\xad\xb1\x70\x6d\xc6\x0e\x4d\xb8\x9c\xdb\xa1\x21\x7f\x06\x0e\x59\xda\x91\xcb\xf5\xed\x92\x7e\x25\xce\x80\xfb\x81\x69\x84\x3e\x74\x23\x96\xa6\x2b\x30\x16\xe8\x86\x98\x9f\x43\x63\x62\x68\x11\xd0\x24\x02\x35\xdd\x88\x3a\xba\x4c\xae\x94\x13\xfa\x81\xe3\xdf\x79\x9a\x0b\x4a\x48\xc2\xa4\xb0\x10\x36\xe2\xdc\xf7\xb2\x42\x82\x20\xab\x95\x4b\xc0\xee\x5c\xd7\x0e\x18\x71\x74\x4f\xca\xc2\x4a\xa7\xb2\x10\xca\x22\x4b\xe9\xc7\x76\xb8\xc2\x8e\xfa\x41\xd1\x8a\x5f\xa7\xd8\x8a\xfe\x0e\xec\x98\x2d\x0b\x07\xbe\xe7\xde\x67\x8b\x40\xa1\x99\x94\x23\x51\x06\xe8\x1c\xaa\xd5\x50\x42\xbb\x1c\x00\xdb\x02\xa9\x6f\xa6\xe6\x50\x2a\x31\xd3\x09\xb6\x41\x9d\xa4\xbb\xe6\xa1\xed\x81\xca\x73\x9d\xa8\x3b\x45\xa9\x55\x15\xca\xf4\x84\x2e\x6a\x1a\x76\x48\xed\x01\xf9\x0a\xdc\x1d\x02\x94\x79\x18\x91\x78\xf4\xe5\x3b\x02\x0d\x06\xd9\xaf\x15\x38\x14\x9a\x51\x44\x8f\x83\x21\x54\xca\xb7\xcb\xce\x34\x29\x72\x0b\x0d\xd8\x10\x2f\xd2\xf6\x2d\xaf\x85\x98\xae\x3d\x27\xae\x4b\x9c\xf9\x7d\x5e\x05\x39\x0e\x2e\x2d\x90\x54\x16\xad\x88\x06\x21\x61\x00\x6a\x99\x61\x13\x57\x0f\x23\xcf\xa3\xde\xea\x60\xe8\xd2\x22\xdd\x06\xf5\xa1\x93\x0a\x3d\x02\x28\x95\x2f\x97\xd2\xd7\x68\x72\x3d\xbb\x9a\x9c\xa0\xba\xec\xa2\x69\x14\xc4\x18\x46\x6e\x46\x83\x19\x1d\x27\xdd\x94\x1f\x56\x09\x24\xc8\x07\x46\xcd\xb8\x4b\x77\x0b\x42\x93\x2a\x0a\x3f\x25\xba\x46\x66\x34\x30\xf3\xd0\x50\xd2\xe6\xb8\xc5\x93\x29\x36\xb6\x4c\xc1\x39\xd5\x15\xb5\xab\x9b\xa7\x4b\xb8\x76\x19\x67\x23\x37\x1a\x5a\x0d\x80\x62\x4f\xc5\x5c\x81\x5b\xe1\x6d\xaa\x5d\x9f\x8e\xcb\x6c\xbe\xa4\x9b\x8a\x6a\xde\xc7\xfa\xcb\xa4\xe9\x68\xfe\x82\x44\x14\x70\xba\x21\x85\x0e\x8a\xc9\x37\x24\xa3\xe0\x4a\x52\x2b\xc1\xa9\xd2\x51\x91\xd1\xe7\x8d\xa8\x5a\x36\x30\x94\x4e\x4b\x25\xcc\x0e\x90\xf2\x92\xc5\x61\x54\x65\xf1\xfa\x32\xa4\xab\x35\xaf\x86\x9a\x3a\xb3\x4f\xd1\x76\x29\xe3\x03\xea\x41\x18\x44\x2a\x47\x95\x26\x5d\xa1\x53\x09\xcf\x3f\x60\x10\x50\xae\x3d\x7c\xd5\x4e\x63\x8f\xf1\x0a\x58\x15\xab\x80\xf5\xcb\x69\xbb\xaa\xe2\xb4\xb5\x57\x00\xf6\xfc\x29\x4c\xa1\x38\x62\x0c\x7b\xc1\xe9\xb6\xe8\xe2\x72\x1e\x78\x4b\x42\x86\xd6\x5f\xe1\x83\xf7\x71\xbb\x38\x1b\x60\xef\x87\xc3\xbb\xbb\x3b\x0b\xfc\x68\x08\xff\xad\x85\xbf\x19\xca\x38\x1c\xa2\x56\x97\xd8\x8c\xb0\xa1\x6b\x73\xc2\xca\xbc\xca\xe5\xf5\x6c\x7c\x31\x2b\x73\x25\xdd\xc0\x46\xb7\xf5\x49\x10\x47\x11\xef\x03\x72\xfa\x51\xa3\xa0\xa6\x61\xe8\xf3\xf8\xea\x7a\x72\x79\xf1\x3c\x38\x94\x73\xe7\xa9\x5b\xb8\x01\xac\x50\x33\x06\xed\x91\xc4\x5c\xa0\x3c\xda\x37\x02\xdb\x71\x20\x94\xc1\xf9\x02\x23\x5b\x68\xf7\x3d\x5b\x97\x4e\x13\x42\xff\x2e\x3f\x35\x40\xda\x1b\xb2\x81\x30\x5d\xce\x43\x65\xc1\xb9\xeb\x2f\x6e\x31\xde\x1f\x6c\x9c\xc1\x5b\x7d\xe1\x2f\x97\x30\xe7\x1a\xbc\xc9\x84\x10\xbb\x1d\x27\x9b\x00\xf5\x6b\x98\x30\x8b\x01\xb1\xd8\xfb\xf7\xf2\xe2\x0f\x30\x7c\xe2\x02\x75\xd3\xb0\xf2\x0e\x33\xe1\x4e\x97\x75\xcc\xff\xb3\x1d\x33\xba\xac\xe5\xb5\x08\xa2\xda\x96\xb6\x63\x06\xd4\x2a\xb9\x3d\xde\x96\x74\x31\x41\xee\x4d\xc1\xeb\xe0\xf0\xcc\xc7\x73\x72\xd0\x1a\xa2\x86\x18\x7e\xd0\xf3\xc6\x9c\xc3\x8c\x03\x59\x99\xc6\xd2\x0f\x61\x7c\x46\x9b\xcd\xbd\xb3\x04\x43\x59\xd2\xd5\x62\x4d\x16\xb7\x73\xff\xab\x78\x37\x60\x38\x29\xff\x41\xbf\xab\x09\x6b\x91\xa6\x1c\xde\x92\xb4\x98\x29\x93\x3f\x0d\x73\x69\xbb\x18\x67\xfe\xeb\x0b\x83\x89\xa2\x1c\x39\xa7\x2e\x05\xb3\xb3\x3e\x52\x87\x48\xba\xa3\xb3\xd7\x0f\x0f\x0a\x5d\xf5\x44\x59\x63\xbf\xb3\xac\x09\x92\x15\xa5\x99\x3d\x1f\x9d\x59\x33\x5c\x8c\x28\x8f\x97\xa9\x17\x44\x5c\x82\x74\x79\x5b\xf3\x6a\x4b\xde\xc8\xb9\x6b\x72\x2f\xa0\x70\x4d\x1d\x87\x78\x31\x46\x8b\xbb\x92\x51\x8d\xba\x7f\x55\x26\x49\xdf\xec\x84\x79\x54\x47\xc5\xba\xfb\x34\xdf\xb8\x73\x24\xc1\xc7\xfb\x26\x16\x54\xf2\xce\x2d\x66\xa4\x79\x82\xd1\x6c\x34\x9b\xb5\x1f\xd2\xbf\x10\x7d\xdc\x01\x3e\x2e\xc7\xe6\x94\x5d\x63\xa1\xc1\x2a\xf4\xa3\x60\x80\x20\x45\x9c\x0a\x04\xce\x0c\x19\xb0\x3b\x51\xc5\x88\xaf\x06\x6c\x93\xf3\xb1\x72\xd2\x5c\x11\xae\x14\xc6\x0e\x10\x12\xc4\xf4\x2a\x0b\xb4\x99\x7a\x15\x11\x48\xba\x53\x73\x5d\x57\x5d\xfe\xa3\x50\x62\x99\x7d\x34\x95\xa9\xc1\xe8\x1a\x8b\x40\x02\xd1\x4b\x8e\x2e\x87\x32\xbc\x71\x9a\x8c\xaf\xbd\x5b\x96\x1b\x97\x52\x06\x8c\x7e\x47\x67\x62\x6e\x57\xdb\xe0\xd2\x29\x52\xed\xab\xbd\xac\x67\xb7\xbb\xa3\x7c\x9d\x55\xd6\x15\x59\x42\x10\xb1\x46\x29\x4b\x71\x3c\x94\xef\x05\x7e\x2b\x05\x56\xcb\x34\x44\x49\x4a\x86\x46\x61\x2e\x81\xce\xa5\xd4\x28\x33\xc1\xd3\x72\xc0\x40\xe0\xc5\x3a\x5e\x21\x9b\xe3\x98\x8e\x97\x09\xce\x66\xc7\x27\xd7\x96\x73\x36\xb9\xb8\x1c\x8d\xaf\xad\x1b\xea\xf1\xb2\x91\x29\xc9\xda\x49\xaf\x53\xcf\x77\x48\xf5\x90\x98\x88\xd7\xe5\xa1\x4d\x55\x70\x53\x21\xb8\x0e\x9b\xeb\xe5\x3f\xf9\x7d\xd6\x46\xfc\xf9\x3d\xaf\x91\xfe\x04\xdf\xb6\x17\xbe\x18\x9b\x55\xce\xd1\x4b\xd6\xb0\xea\x21\x58\xe9\x3b\xa5\x1d\xd0\x84\x18\xc7\x30\xe9\x4b\x8f\xdf\xb2\x1e\x7d\x5d\x36\xc2\xa5\xd7\x13\xaf\x61\x7c\x57\x40\xb4\x52\x3a\xba\xc6\x6a\xa3\x51\x9e\xb3\x9b\x85\xa9\x65\xcd\x74\x6b\x55\xf4\x54\xbe\x38\x52\x1d\x2e\xe9\xea\x7f\xa8\xe0\x4b\x04\x4d\x85\xc5\xd0\x9a\xce\x49\xb4\x2e\xcd\xa4\x85\xd2\x13\x33\x7c\x2a\x9d\x4b\x0e\xcd\x54\x5e\x3f\x28\x32\x1a\x17\x2d\xdd\x5b\xe1\xa2\xf6\xde\xfa\x2e\x5b\xd0\xcd\x3e\x7a\x64\x06\xa3\x6f\x9a\x7c\xa6\x68\x32\x47\x09\x58\x5d\xe0\xfe\x2e\x37\x45\x69\x19\xc8\x07\xac\x34\x8e\x7f\xda\x16\x6d\x57\x4f\xd8\xa2\xaa\xa9\x49\x55\x93\x6a\xbf\xb6\xe9\x0a\x5b\x3b\x34\xd0\x9a\x8d\x43\x43\xd9\xf5\xc3\xc3\xaf\xf9\xcf\x5e\xea\x6b\x17\x7e\x00\x13\xdf\x4a\x77\xbb\xe1\x8f\xaf\x7e\x1c\xa2\x97\x95\x02\xa6\x24\xb6\x71\x1d\x01\x3f\x15\x9a\x20\xa9\x72\x05\x40\xf9\x23\xfc\xe2\x27\x49\x0f\x86\xe8\xe2\xf6\x70\xc7\xd7\x94\x59\x6b\x88\x3b\x5c\x22\x9e\x3c\xbc\x92\x81\xc9\x0c\xe4\x94\xb3\x83\x23\x35\x50\xeb\x98\x29\xf5\x2c\x5c\x1a\x20\x3b\x19\x07\x01\x95\xc9\xe8\x98\xf3\x10\xf8\xc1\x8d\xe8\x89\x87\x87\x8e\x71\x3c\x48\xf3\x85\x7d\x3d\x75\x7d\x06\xfc\x05\x1f\x64\x28\xa3\x3f\x60\x78\xe6\x87\x8a\x63\x9a\x21\x8a\x85\x6f\xcf\xff\xf7\x1a\xbf\x98\xca\x12\xb9\x86\xca\x68\xab\x4d\x63\x83\x08\xac\x8f\x99\x58\x46\xc4\x48\x78\x07\xe6\x24\xa3\x1e\x19\xfa\x88\xaf\x9b\xbb\x5d\x68\x7b\x2b\x62\xfc\x83\xfe\x64\xfc\x63\xe1\x87\xc4\x78\x7f\xa8\x71\x72\x7a\x63\x7d\xa2\x0c\x05\xe0\xe1\x6e\x77\x4b\xee\x0d\x31\x8f\x06\x52\xf3\xfb\xc1\x85\x29\xcb\x5b\x17\x52\xda\x03\xee\x68\x7b\x46\x33\x92\xcb\xa9\x86\xe7\xdf\x85\xb6\x5a\xc7\x04\xf1\xe3\x1a\x07\x43\xee\x54\xd6\x8a\xbf\x04\x23\x24\x26\xaa\xd2\xd5\x6f\x18\x09\x4f\xe5\xb3\x57\xf1\xb0\x48\x5e\x65\x10\xef\xa8\x0b\xa3\xeb\x7b\xa6\xf8\x18\x79\x46\xf0\xaa\x3f\x3e\x13\x61\xdf\xa5\x0d\xc2\x57\x15\x8c\x86\x3c\x4c\x59\x44\xf6\xa7\x89\x7d\x48\x0c\xc2\xce\xc5\x8b\x58\x68\xbc\x79\x63\x30\x0e\x43\x9b\x24\x3e\x08\xda\x95\xca\x78\x00\xce\x1a\x4a\xf8\x3a\x0d\x32\xf1\x1d\xbe\x78\xc4\x1c\x44\x31\xec\xb0\xcc\x37\xd4\xc8\xa3\x99\xd5\xba\xa3\x7f\xe6\xfc\xd7\x3e\x5c\xa0\xb7\x9e\x9e\x09\x76\x55\x17\x2e\x43\xa5\x55\xf1\x54\xa7\x10\xf0\x24\x87\xa0\x0e\xfa\xf5\x70\x97\xc8\xcf\x13\x28\x16\x1d\xd8\x06\x38\x74\xfc\xd0\x12\x3d\x60\x4a\x7a\x9b\x20\xc7\xe8\x4c\x10\x29\xa0\x87\x0e\x6d\x24\x82\x38\x34\x14\x9f\x99\x65\x6d\x6b\x44\xc3\x0b\xf1\x51\x39\x37\x8c\x72\x10\x52\xa3\x04\x81\xa4\xff\xc2\x1f\xe3\xcd\x5b\xe4\x36\x90\xec\x1c\xb2\xcd\x30\x22\x5b\x64\xf4\xba\x14\x85\xf6\xe2\xf6\x5f\x69\x66\xa5\xad\x2a\x67\x56\x40\x08\x18\xf6\xa2\xd6\xf1\xd6\xa6\x6e\xbb\x2a\x30\x92\xa0\x87\xff\xdd\x9b\xb3\xe0\xd7\x03\x16\x05\x09\x92\x54\xb7\x21\x62\x24\x20\xe1\x02\xa2\x61\x68\x49\x72\x63\xc4\x14\xa7\xf2\x81\x90\x5e\xd3\x6c\x04\x75\x5a\xaa\x99\xcf\xed\x74\x43\x3a\x81\x56\x36\xb6\xed\x88\x5c\xa5\x7a\xe1\xeb\x38\x30\x31\xf4\x95\xb2\xe9\x4f\x70\xc9\xac\xa9\x1d\xda\x1b\x66\x8d\x2f\x6e\xce\x2d\x67\x69\x98\x67\xd7\xa6\x61\x9a\x15\x4b\x0d\xad\xa9\x9d\x4f\xfb\xa4\x76\xfc\xf9\x78\xf2\xa9\x37\x6a\x37\xd7\xe3\x51\x6f\xc4\x66\x97\xb3\x63\x14\xad\x13\xe8\x65\xa0\xaa\x0f\xe4\x53\x53\xd5\x8e\xd0\x27\xa9\x94\x60\x9f\x9a\x48\x3f\x1b\xf8\x29\x7e\xcf\x84\x7e\x15\xdc\xf6\x82\xbf\xc9\x32\x24\xa4\x65\x95\xa8\x77\xfc\x43\x92\x9d\x01\x50\x2e\xbe\xf5\x87\x80\x99\xe5\x94\xee\xc1\x5b\xbc\xbe\x9f\xcb\x08\x3c\x1a\x89\xdc\xd2\x8a\x30\xa8\x50\xfa\xdc\x8f\x3c\x4e\x9c\xda\xe2\x46\x5e\x47\xa2\x98\xf0\x74\x7b\xd4\x43\x77\xb7\x47\x35\xe1\x8f\x7a\x0b\xbb\xb2\x90\xd1\x1d\x82\xe8\x7e\xc1\x17\x5d\x26\xf8\x33\xa9\x08\xbd\x68\x26\xf4\x52\x43\x94\x2e\xad\x0c\xea\xb4\x87\x19\xaa\xc3\x9e\x2c\xc5\xe6\xe3\x1d\x2a\x8c\x88\xcb\xed\x89\xd7\xba\xca\x65\xc4\xdb\xd4\x69\xc7\x21\x4b\xbc\xd3\xa0\xa5\x7d\x86\x2d\x99\x09\xd7\x04\x06\x5d\xb8\xb4\x2b\xc7\x69\x71\xba\x62\xa8\xa5\xcc\x93\xc9\xec\xda\x00\xb8\x33\x18\x7e\x1b\x4c\xe7\x0d\x4f\xbc\xfa\x49\xcc\x41\x2e\xbf\x61\x7e\x30\x4c\x3f\x39\xc2\x84\xa1\x3d\xe7\x52\x8f\x0b\x07\xbd\xf2\xe2\xd2\x71\x84\x10\x43\x2c\xe7\x1a\x1b\xdf\x89\x5c\xdf\xf8\xf9\x43\x07\x05\x9e\xe4\x44\xfc\xe7\xcf\x1f\x9e\x5c\xc6\xd6\x7a\x6c\x2b\x64\x17\x54\xa5\xfd\xc6\x75\x74\x49\xc2\xd0\x0f\x3b\xa2\xaa\xa4\x51\x02\xab\xf2\xc5\x13\xe0\xaa\x22\xfc\x1d\x58\x1f\xef\xd9\x6f\x09\x59\x2b\x40\x55\x07\xa6\x75\x83\xae\x07\x70\xaa\x42\xcd\x67\x62\x5f\x8e\x87\x4d\x98\xf7\x81\x7a\x15\x48\xd7\x07\xfb\x6e\x78\x96\x06\xa0\x3e\x00\x2d\xb0\x17\xb7\x84\x77\x44\x34\x45\xa4\x04\xd2\xd4\x9b\x27\xc0\x34\x4d\xf9\x3b\xa8\x35\xe8\xdd\xef\xa8\xf6\x8d\xa0\x9a\x8c\xa6\x5e\x16\xdb\xaa\x65\xf8\x26\x10\x2e\x83\x48\xdd\x21\x6e\x43\x36\x7b\x7c\xbe\x84\x5a\x09\xc0\x9d\x8f\xcf\x0b\xd0\x86\xf9\xce\x12\xd4\x6e\x29\x6e\x9a\xc3\x1a\xd6\x6f\x14\x85\xca\xa1\x5a\xea\x4d\x43\x14\xc0\x0a\x67\x6d\x96\xad\xb0\x42\xaf\x8b\xf6\x8a\x60\x97\x25\x2b\x24\xd1\xeb\x92\x3d\x10\x7c\x81\xef\x8c\xa9\xd1\x81\x5d\xd2\xa6\x7c\xcd\xba\xd2\x33\x2c\x28\x69\xbb\xef\x3e\x82\xe2\x64\x10\x20\x54\x9a\x6f\x9e\xcb\x4a\xad\x4a\x2b\x57\x4d\xb1\x0d\x4c\xb5\x3a\x99\x8a\xcf\xd4\x98\xa2\x50\xb6\xbc\x7f\x72\x79\xf9\xc9\x62\x6b\xff\x4e\xa5\x64\x07\x91\x51\x48\x26\x8f\x33\x08\x0b\x6f\x4c\x91\x17\x21\xf3\x7c\x31\x11\xa4\x39\x97\xe4\xb3\xf9\xe9\xf4\x46\xa7\x0a\xa6\x92\xb6\x93\x7c\xbe\xcc\x86\x00\x9d\x49\xbd\x67\xcb\xa0\x09\xb9\xa4\x31\x33\x11\x44\x26\x4f\xa7\xd2\x3c\x72\x09\xd4\xc6\xdc\x0f\x45\xcb\x7d\xce\xfd\x8d\xcc\xa9\x86\xe2\xf8\x7b\xbc\xc0\xdd\x2f\x55\x92\xfc\x4f\x44\xc2\xfb\x98\x8f\x98\xa9\xa7\xd3\xd0\xa5\x20\x03\x16\xcd\x37\x34\xde\x77\xaf\xee\x52\x75\x9a\xe6\xda\x36\xca\xcf\x96\x5b\x77\xc4\x7d\x7e\x23\x43\x73\xb3\x59\x63\x96\x3a\xaa\x35\xb6\x0f\x69\x22\xe9\x54\xe9\x56\x16\xa2\x08\xa6\x54\xa5\x84\xd2\x29\xdb\x76\xb9\xac\x79\x51\x31\x0b\x26\x49\xc0\x86\x3b\x21\x99\x4e\xc1\xee\x28\xa4\xdc\x22\x56\x2a\x66\x9c\x7f\x1d\xf3\x47\xfc\x81\xbb\xe2\xb6\x88\xc7\x53\xf4\x1a\xf7\x77\x1d\x38\x25\x99\xd3\xc5\xd6\x4c\xc7\x57\x93\xcb\x91\xa5\x8a\x88\x06\x15\x32\xd0\x52\xb9\xd4\x99\x14\x34\x75\x99\x1f\xa5\xad\x2d\xa7\x7a\x34\x3e\x92\x3a\x91\xce\x95\x2c\x11\x4b\x5c\xb4\x85\x5e\xba\x7c\x41\xe4\x85\x89\xde\xd3\x03\x2f\x5d\xa6\x15\x5c\xf5\xb5\x97\x2e\x79\x7e\x37\xcf\x23\xc8\x4c\x97\xfb\x03\x33\x36\xbc\x13\x2e\x7f\x07\x61\x54\x61\x9f\x18\x9c\x32\x93\x58\xa4\x96\x10\x9c\xc0\xef\xe4\xac\x7f\xf4\x2d\x13\x50\xdb\x73\x02\xbc\x93\xb3\xbf\x01\xee\x62\x53\x1a\xc3\x6e\xfd\x1e\x16\xb1\xfd\x03\x7b\x83\x8f\xbd\x68\x83\x6a\x64\x95\x19\x1d\x50\xc8\x30\xa7\xc7\xa7\xbf\x8d\x67\x98\x0e\xa3\xac\x27\x3d\x3e\x4a\x9b\x67\xb7\x48\x1a\xc9\xb0\xc8\x9c\x2d\xd1\x5a\xd0\xf1\xd5\xd5\xe5\xd5\x93\xca\xa9\x38\x74\x13\x73\x22\x77\x0c\x3c\xa5\x9c\x9a\x45\x4e\x50\xbd\x75\xa6\xd2\x33\x4b\x94\x56\x53\x7e\x09\xd3\x17\xa4\x16\x5d\xca\xcc\xa4\x06\xa4\xe3\xbd\x10\xc9\x5a\x64\x6e\x37\x44\xc3\xe5\x88\x8a\x5d\x10\x85\xa4\x7e\xc9\x4b\x2e\xd3\xb6\x6c\x50\x6c\x4e\xcd\xda\xa3\xbe\xea\xb4\x6b\x4e\xe6\x33\x47\xd3\xd6\xa8\xfd\x32\xad\x1a\x93\x18\x5d\xb3\xd6\x94\xee\x54\x69\xf4\x71\xaf\x49\x5b\xba\x45\x60\xb8\xfd\xfc\xe5\x42\x30\x5c\x8b\x7a\xfa\x18\x0c\xb8\x24\x1d\x73\x4e\x36\x7e\x78\xdf\x30\xca\x82\x9a\xfb\x87\x59\xa2\x71\xdf\xe7\xbf\x7d\x87\x5e\x42\xad\x7d\xc6\x5e\x69\xf3\x88\x85\x7a\x24\xf8\x6a\x28\x2b\xbb\xb3\x83\x7e\x85\x45\x8a\xa2\x0e\x5d\x8e\x54\x7c\xb7\x77\x03\x89\x81\xd4\xbe\xf9\x78\x4d\x88\xff\x9c\xf3\x64\x61\x61\xfb\xcd\x93\xe3\x95\xdc\x7e\xe7\xc9\x01\x7b\x41\x90\x0e\xd8\x33\x60\x74\x90\xda\xd6\x33\x0d\xfd\x05\x61\x2c\xd9\xd0\xfc\x08\x4a\x07\x6c\x7f\x90\xc6\xc6\xb5\xc3\x68\x79\x6c\x55\x15\x3e\xa7\x13\x2a\xbf\x45\xa8\xee\x67\x48\x06\xac\xf6\x58\x97\x6f\xc8\x5b\x60\xff\xf6\x89\xbf\x29\x3b\x4d\x43\x69\x9b\x89\xfa\xf4\x5a\x40\x04\xfc\x7a\x3e\x1f\x91\x45\x48\x6c\x01\xe4\x99\x19\x7b\x95\xa8\x2e\x0c\x8c\x3a\x41\x3f\x4d\xce\x27\x33\x2b\x60\x5e\x51\xcc\xc1\x7e\x12\x26\xeb\x0a\x8d\x04\x84\xe8\xaa\x56\x93\x35\x02\xea\xf5\x84\x84\x7d\xe0\x46\x2c\xd9\xc6\x9a\x95\xfd\xd1\x0d\xd7\x4f\xe8\x21\xd0\xaa\xf6\x73\x10\x01\x7b\x0a\xff\xb0\x5d\xbd\xa0\x7f\xd8\xae\x9e\xc1\x3f\x6c\x57\x89\x7e\x3f\xcb\x33\xf0\x8c\x95\xeb\xcf\xf1\x28\x67\x6e\xf3\xa8\xa9\xaf\xd8\xae\xf6\xf7\x15\xd8\xd0\xef\xbe\xa2\xad\xaf\xc0\x9e\xfb\x7b\xf8\x0a\xec\xdf\x3e\x7d\x45\xca\x66\x63\x91\xaa\x7c\xc5\x4b\xa2\x19\xb6\x7b\x3f\x34\xdb\xae\xfa\x46\x33\xd6\x32\xa3\x25\x80\x58\x31\x49\x67\xd1\x9e\x23\x9f\xd2\x12\xe8\x34\xbd\x80\x62\x42\x0b\x56\xb2\xa6\x93\x11\xe6\x55\x78\xab\x9a\x9d\xf9\x0a\x16\x41\x9b\x71\x9d\x66\x99\x2b\x71\x8d\x9b\x5c\x0d\xf5\x3a\xf5\xaf\x4d\x72\x60\xc0\x22\x06\x18\x52\xd6\x0a\x75\x8f\x5b\xc5\x1b\x66\x0a\x26\xad\x0a\xa9\x1f\x52\x7e\xdf\xb2\xda\x05\x5d\x34\xcc\xe3\x89\xab\x5c\xd3\xbf\xda\x56\xb9\x22\x0c\x4c\xd4\xab\x49\x4b\xc4\x3c\x1e\xbd\xcf\xea\x48\x57\x9b\xa9\x13\x73\xeb\x37\xef\xb5\xea\x80\x9f\x45\x07\x60\x52\x66\x5d\x07\xe4\x53\x35\x3b\x25\x06\xe9\x68\xa1\x34\x2f\xe8\xed\x33\xee\xe2\xc5\x80\x07\x5a\xda\xcb\xd6\x56\xa4\x75\xd3\x27\xad\xeb\xf1\x55\x5f\x3b\x82\x45\x3b\xaf\x26\xbd\xd1\xba\x98\x9c\x8e\x7b\x23\xf6\x79\x72\x35\xeb\x8d\xd8\x95\xf8\xa4\xd1\x0f\xad\xd9\xe4\x7c\x8c\x81\x91\x1c\x88\xbd\xe9\xee\x58\x50\xed\xba\x01\x5a\xb9\x94\xee\xc9\x62\x3a\xe4\x51\x91\x36\xb8\x20\xf9\x40\x38\x59\xc3\x52\x67\xd9\xa8\x10\x25\x75\x0d\x41\x8a\xa1\x8a\xca\x07\xa6\xf2\x38\x99\xbf\x8a\x90\x2a\x0f\x61\x90\x3e\xd8\xf7\x48\x1d\xd4\x17\x2f\xff\x1f\xc5\x27\xf3\xc4\x41\xa6\x88\xa0\xf0\xa4\x25\x08\x84\x62\x46\xf2\x5c\x9d\xd4\x89\x45\xa6\x01\xfa\x59\x90\xb5\xef\x42\x14\x8a\xc7\x08\x4d\x93\x5b\x11\xd8\x04\x04\xdc\x80\x83\xf0\x25\x03\x86\xd4\xc3\xcf\xb6\x1b\xc5\x4f\x5f\x09\x7d\x97\x9c\xe0\xd3\xd6\xd7\xa7\x52\x34\xa1\xb6\x3a\xf5\xc5\x8a\x43\x96\xf8\x78\x1f\xc1\xfd\xe1\x41\x9f\x0b\xd2\x82\xc3\x76\x25\xbe\x09\x09\xf8\x0c\x0d\x88\x04\x30\xfe\x97\x8f\x62\xaf\xe0\xbb\x48\xf5\xd0\xfc\x25\x76\x20\xea\xb4\x63\x39\xc9\x18\x63\xe9\x4a\x38\x6f\x20\x41\x1c\xcf\xa8\x80\x65\x63\x2f\xd6\x49\xc0\xa2\xb8\x9c\xc3\x43\xac\x57\x08\x5c\xd4\x71\xdf\x2a\x7a\x89\x22\xe1\x77\x90\x84\x75\x23\x22\x8b\xb2\xa8\xa2\xa9\x3f\xfb\xef\x84\x7c\x9e\xf0\xeb\xea\x98\x05\xf3\x5f\xb1\xd8\x85\x9d\x73\xb0\xa5\xa5\xa6\xa1\xbf\xa5\x0e\x09\xeb\x4a\x36\x93\xf6\x5d\x22\x2d\x4e\xf8\x48\x5a\x5c\x75\x79\x8d\xcf\x6b\x45\x6f\xc6\xea\x97\xff\x48\x78\x2d\xa9\x4b\x02\x9b\xaf\x4b\xd8\xa9\xbe\xc3\x12\x7f\x60\x91\x47\xbd\x7e\x03\x6b\x51\x27\x5f\x36\x88\x7f\x2b\x0f\xb4\x4d\x1b\xae\xf3\xba\x02\x8c\x73\x03\xc4\xc8\x90\xae\x2b\x1f\x63\xe9\xbe\x21\x8d\x9e\x32\xc4\x21\x8d\x9c\x95\x67\xcf\x7a\xeb\x92\xf7\x4c\xf3\x99\xc9\xc9\x2b\x8c\xdd\x2a\x5f\x06\xca\x54\x2b\x0b\x08\xb3\xab\x7c\xeb\xd0\x90\x2c\xb8\xf8\xb4\xd8\x53\x9a\x73\x6c\x0d\x1d\x5c\x57\xce\x67\x15\x9d\x4d\xbd\xa3\xea\xec\xa6\xd2\x93\xfc\x96\x2e\x4a\x1c\x0e\x29\x67\xde\xca\xde\x53\x47\x58\xca\xe7\xf1\x89\x95\x53\xe1\xa6\x5e\xe3\xf1\x92\x5b\xf4\x16\xa2\xb2\x7c\x18\xdb\xa6\xd9\x6e\x42\x9a\x0a\x57\xd0\x54\xd7\x99\xcf\xb4\xf2\xec\x04\xe0\x71\xec\xd2\x95\x77\x2a\x9f\x4b\x06\x85\x73\xfa\xd2\x27\x99\x59\xaa\x68\xec\x6a\xd4\xe2\x66\xe1\xc8\x33\xeb\xd4\x0e\x09\x4f\x97\x16\xc2\xa7\x0f\x38\xb3\x95\x2d\xac\xe3\xe6\xfc\x7f\x00\x00\x00\xff\xff\x9f\xbb\xdd\xed\x88\x6d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 28040, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

