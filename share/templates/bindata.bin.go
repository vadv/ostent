// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7d\x73\xdb\x36\xd2\xff\x3f\x9f\x02\x0f\xdb\x3e\xf3\xb4\x53\x51\x4f\x72\xed\x5d\x26\xb5\x3c\xe3\x58\x4a\xca\x69\xfc\x72\xb6\x9c\xbb\xfe\xd5\xa1\x44\x48\x42\x4c\x91\x2c\x01\xca\x71\x35\xfa\xee\xb7\x78\xe3\x3b\x29\x52\xa4\x1c\xcf\x5c\x32\x93\x88\x04\x81\xdd\xc5\x62\xf1\xdb\x05\xb8\x44\x4e\xfe\x67\x7c\x75\x3e\xfd\xfd\x7a\x82\x56\x6c\xed\xbe\x38\x3d\x11\x3f\x08\xc1\x05\xb6\x1d\xb8\xe0\x97\x6b\xcc\x6c\x34\x5f\xd9\x21\xc5\x6c\x64\x44\x6c\x31\x78\x6d\xa4\x1f\xad\x18\x0b\x06\xf8\xcf\x88\x6c\x46\xc6\xbf\x07\x77\x67\x83\x73\x7f\x1d\xd8\x8c\xcc\x5c\x6c\xa0\xb9\xef\x31\xec\x41\x3b\x6b\x32\xc2\xce\x12\x67\x5a\x7a\xf6\x1a\x8f\x8c\x0d\xc1\x0f\x81\x1f\xb2\x54\xe5\x07\xe2\xb0\xd5\xc8\xc1\x1b\x32\xc7\x03\x71\xf3\x23\x22\x1e\x61\xc4\x76\x07\x74\x6e\xbb\x78\xf4\x52\x13\x62\x84\xb9\x58\x5c\xc3\xdd\x76\x6b\x8e\x6d\x66\x9b\xbf\xfa\x94\x71\xe2\xbb\x1d\x82\x2b\x20\x79\x32\x4c\xea\x9d\x9e\xb8\xc4\xbb\x47\x21\x76\x47\x06\x01\x96\x06\x62\x8f\x01\xc8\x41\xd6\xf6\x12\x0f\x03\x6f\x69\xa0\x55\x88\x17\x23\x63\xb8\xb0\x37\xbc\x82\xc9\xcb\x0a\x4d\x29\x7b\x74\x31\x5d\x61\xcc\x34\x01\x86\x3f\xb3\xe1\x9c\xd2\xb8\x3d\x5c\x0f\x89\xe7\xe0\xcf\x26\x2f\x55\x14\xe8\x3c\x24\x01\x4b\x37\xf9\x64\x6f\x6c\x59\x6a\xe4\xf5\x8c\x68\x38\x07\x42\x9f\xe8\x30\xe4\x1a\x0e\x31\x5c\xbd\x32\x5f\x9a\x2f\x5f\xeb\x02\x73\x4d\x3c\xf3\x13\xf0\x74\xa0\xe3\x83\xb5\x4d\x3c\x59\x7f\xbb\x25\x0b\x64\x4e\xcf\xde\xbf\x9f\x8c\x67\xc4\xdb\xed\xa0\x9e\x12\x46\xb6\xd8\x6e\xb1\x4b\x41\x43\xc0\x61\xb8\x26\xee\xbd\x7a\x28\x1e\x78\xce\x6e\x67\x68\xa5\x9e\x0c\xa5\x70\x4a\xfe\xa1\x32\x8d\xd3\x93\x99\xef\x3c\xaa\x42\xcf\xde\xa0\xb9\x6b\x53\x3a\x32\xe0\x72\x66\x87\x48\xfe\x0c\x1c\xbc\xb0\x23\x97\xe9\xdb\x05\xf9\x8c\x9d\x01\xf3\x03\x03\x85\x3e\x0c\x23\xaf\x4d\x96\x60\x2c\x30\x0c\x31\x3f\x87\xc4\xc4\xb8\x45\x40\x97\x30\xb4\x74\x23\xe2\xe8\x3a\xb9\x5a\x4e\xe8\x07\x8e\xff\xe0\x69\x2e\x5c\x42\x1c\x26\x95\x85\xb0\x11\x63\xbe\x97\x15\x12\x04\x59\x2e\x5d\x0c\x76\xe7\xba\x76\x40\xb1\xa3\x47\x52\x56\x56\x3a\x95\x95\xb8\x2c\xb2\x96\x2e\xb6\xc3\x25\x1f\xa8\x6f\x14\xad\xf8\x71\x8a\xad\x18\xef\xc0\x8e\xd9\xd2\x70\xe0\x7b\xee\x63\xb6\x0a\x54\x9a\x4a\x39\x12\x65\x80\xce\xa1\x59\x0d\x25\x6e\x97\x03\x60\x5b\x20\xf5\x6c\x5a\x0e\xa5\x12\x33\x83\x60\x23\xe2\x24\xc3\x35\x0b\x6d\x0f\x54\x9e\x1b\x44\x3d\x28\x4a\xad\xaa\x52\x66\x24\x74\x55\x03\xd9\x21\xb1\x07\xf8\x33\x70\x77\x30\x50\x66\x61\x84\xe3\xd9\x97\x1f\x08\x6e\x30\x9c\xfd\x4a\x81\x43\xa1\x1b\x45\xf4\x38\x19\x42\xa3\x7c\xbf\xec\x4c\x97\x22\xb7\xd0\x81\x35\xf6\x22\x6d\xdf\xf2\x5a\x88\xe9\xda\x33\xec\xba\xd8\x99\x3d\xe6\x55\x90\xe3\xe0\x92\x02\x49\x65\xd1\x8a\x68\x10\x62\x0a\xa0\x96\x99\x36\x71\xf3\x30\xf2\x3c\xe2\x2d\x4f\x86\x2e\x29\xd2\x6d\xd0\x1e\x06\xa9\x30\x22\x80\x52\xf9\x7a\x29\x7d\x8d\xad\xdb\xe9\x8d\xf5\x96\xab\xcb\x2e\x9a\x46\x41\x8c\x61\xe4\x66\x34\x98\xd1\x71\x32\x4c\xf9\x69\x95\x40\x82\x2c\x40\x35\xf3\x2e\x3d\x2c\x1c\x9a\x54\x55\xf8\x29\xd1\x35\x67\x46\x02\x23\x0f\x0d\x25\x7d\x8e\x7b\x6c\x5d\xf3\xce\x96\x29\x38\xa7\xba\xa2\x76\x75\xf7\x74\x0d\xd7\x2e\xe3\x8c\x72\xb3\xa1\xd5\x04\x28\x8e\x54\xcc\x15\xb8\x15\x9e\xa6\xfa\xf5\xe1\xac\xcc\xe6\x4b\x86\xa9\xa8\xe6\x43\xac\xbf\x4c\x9a\x8e\xe6\x2f\x48\x44\x01\x23\x6b\x5c\x18\xa0\x98\x7c\x43\x32\x0a\xae\x24\xb5\x12\x9c\x2a\x9d\x15\x19\x7d\xde\x89\xa6\x65\x13\x43\xe9\xb4\x54\xc2\xec\x04\x29\xaf\x59\x9c\x46\x55\x16\xaf\x2f\x43\xb2\x5c\xb1\x6a\xa8\xa9\x33\xfb\x14\x6d\x97\x50\x36\x20\x1e\x84\x41\xb8\x72\x56\x69\xd2\x15\x3a\x95\xf0\xfc\x0d\x0f\x02\xca\xb5\xc7\x1f\xb5\xd3\xd8\x3e\x5e\x01\xad\x62\x15\xd0\x7e\x39\x6d\x96\x55\x9c\x36\xf6\x12\xc0\x9e\x1d\xc3\x14\x8a\x33\x06\xd9\x73\x46\x36\x45\x17\x97\xf3\xc0\x1b\x1c\x52\x6e\xfd\x15\x3e\xf8\x10\xb7\xcb\x57\x03\xf4\xcd\x70\xf8\xf0\xf0\x60\x82\x1f\x0d\xe1\xaf\x39\xf7\xd7\x43\x19\x87\x43\xd4\xea\x62\x9b\x62\x3a\x74\x6d\x86\x69\x99\x57\xb9\xba\x9d\x4e\x2e\xa7\x65\xae\xa4\x1b\xd8\xe8\xbe\x1e\x05\x71\x14\xf1\x3e\x20\xa7\x1f\x35\x0a\x6a\x1a\x86\x3e\x4e\x6e\x6e\xad\xab\xcb\xa7\xc1\xa1\x9c\x3b\x4f\xdd\xc2\x0d\x60\x85\x5a\x31\x68\x8f\x24\xd6\x02\xe5\xd1\x3e\x0a\x6c\xc7\x81\x50\x86\xaf\x17\x28\xde\x40\xbf\x1f\xe9\xaa\x74\x99\x10\xfa\x0f\xf9\xa5\x01\xa7\xbd\xc6\x6b\x08\xd3\xe5\x3a\x54\x56\x9c\xb9\xfe\xfc\x9e\xc7\xfb\x83\xb5\x33\x78\xa5\x2f\xfc\xc5\x02\xd6\x5c\x83\x97\x99\x10\x62\xbb\x65\x78\x1d\x70\xfd\x22\x03\x56\x31\x20\x16\x7d\xf3\x46\x5e\xfc\x01\x86\x8f\x5d\xa0\x6e\x20\x33\xef\x30\x13\xee\x64\x51\xc7\xfc\x6f\xed\x98\x91\x45\x2d\xaf\x79\x10\xd5\xf6\xb4\x1d\x33\xa0\x56\xcb\xcd\xe9\xb3\x67\x4e\x79\xcf\xb2\x76\xa3\x6f\x9a\x2c\x0e\x9b\x58\x46\x40\xeb\x7a\xf0\x3a\x67\x18\x2d\xd5\x07\xde\xe6\xe9\x7b\xb4\x59\x1e\xb1\x47\xe0\xd5\xda\xf4\xa8\x76\x8b\x43\x37\xd8\xd8\x21\xe2\xe8\x84\x46\x48\xe1\xd4\x6e\xf7\x4b\x7e\xaf\x41\x6d\x31\xf0\x5d\x07\xb1\x41\xb5\xdd\x0e\x7f\x78\xf1\xc3\x70\xb7\xdb\x6e\xa5\x7c\x45\x81\xe7\x2e\x04\xf3\x20\x2b\xf1\x82\x88\x71\xd2\xd6\xf8\x8c\xb1\x70\xb7\x43\x70\x23\x74\xb3\xdb\x25\xab\x88\xc1\x7c\x85\xe7\xf7\x33\xff\xb3\x5e\xfa\x27\xf7\xc2\x93\xac\x88\xe3\x60\x2f\x76\x71\xe2\x8e\x8b\xf1\x89\x7e\x3e\x77\x7d\x58\x85\x18\x82\x0f\x67\x28\x9c\x0e\x67\xf8\xce\x0f\x15\xc7\x34\x43\x2e\x16\x7f\x7a\xf1\xaf\x5b\xbe\x73\x24\x6b\xbc\x90\x28\x3d\x05\x1d\x89\x15\x05\x27\xc1\xc9\x8b\x1d\x98\x26\x9d\x0d\x22\xb0\x07\x6a\xf0\x3a\x0f\x84\xad\x10\xbf\x83\x01\xe6\xa3\x05\x74\xf9\x3f\x72\x97\x67\xbb\x85\xe0\x63\x89\xd1\xb7\xe4\x47\xf4\xed\xdc\x0f\x31\x7a\x33\x42\xd2\x3b\x9c\x5f\xdf\x99\x1f\x20\xac\x03\x01\x58\x08\x12\x8a\xc7\xe6\xa5\xf9\x1b\x7e\xe4\x42\x22\x01\x2e\x40\x77\xf6\x38\xb8\x34\xa4\xc8\x27\xcc\xd1\x66\xc6\x87\x57\xc6\x96\xc8\xf3\x1f\x42\x5b\x05\x75\xa7\x31\x1d\xde\x2f\xe6\x54\xb6\x8a\xb7\xc5\xf8\x46\x43\x4a\x5f\x11\xc5\x01\x0e\xe7\x00\xfa\x32\x26\x95\xa1\x48\x52\x3a\xd2\x0c\xee\x28\x96\x8a\xcc\xb0\x95\xa5\xa9\x8d\x89\xd3\xe3\x4a\x71\xfb\x48\x8b\x42\x88\xc2\xbe\x65\x80\xe8\x9b\x47\x1b\xb8\x5a\x16\xcb\x71\x71\x51\x18\x59\x5a\x2a\xcd\x90\x85\x29\xa3\xcb\xfe\x34\x31\x41\x09\x3c\xdc\x7e\xf8\x45\xdc\x33\x7e\xf3\x12\x41\xf0\x42\x02\xac\xc0\x49\x76\x3e\xb5\xb9\x0c\x9c\x35\x80\xb0\x55\x1a\x5a\xe2\x3b\xfe\x60\x8f\xb1\x89\x6a\x7c\xc4\x33\xdb\x55\x91\x47\x32\x81\xd1\xe9\x77\xb9\x7d\xaa\x43\xb8\xc0\x90\x1e\x9f\x09\x1f\xaa\x2e\x5c\x86\x4a\xab\xa2\x54\xef\xd6\xb2\x64\xbb\xb6\x0e\xef\x35\xa2\x48\xbc\x67\x09\x00\x8b\x01\x6c\x83\x4d\xce\x62\xf6\x08\xc1\xe9\x1f\x2d\x01\xca\x21\xf4\x3e\x01\xa7\xf1\x3b\x41\x24\x0b\x50\xbc\x8a\x39\x26\xe1\xa5\xbd\xc6\x09\x4c\x29\x7e\x0a\xaa\x1c\x12\x8a\x4d\xbe\x02\x60\xe5\x50\xaa\x46\x13\x02\xb1\xff\x4f\x71\xc3\x1b\xc1\xed\x1c\x0a\xd1\xcb\x57\x9c\xdb\x40\xb2\x73\xf0\x46\x30\xfa\xbe\x14\xe8\x0e\xe4\xa6\xfa\x26\xb8\xfd\x3d\xcd\x4c\xf5\xaa\x9c\x59\x01\x4b\xb4\xae\xce\x36\x36\x71\xdb\x35\x81\xe9\x04\xc3\xfc\xbf\xde\x8c\x06\xbf\xd4\xc9\x9d\xe0\x8f\x81\xe2\x96\xd7\xb2\xa4\x1d\xc7\xa9\xcf\xec\xb4\x90\x9d\x50\x49\x1b\x5f\x2f\xd0\x54\xda\x7f\xb9\x42\x84\x35\xe7\x9a\xbf\x13\x32\x94\xbd\x5e\xdb\xa1\xbd\xa6\xe6\xe4\xf2\xee\xc2\x74\x16\xe6\x04\x1e\x7f\xe0\xaf\x8c\x8c\x77\xb7\x06\x32\xc4\x34\xe8\x4e\xeb\xe2\xba\x3f\x5a\x67\x1f\xcf\xac\x0f\x3d\xd1\xba\xbb\x9d\x8c\x7b\x22\x35\xbd\x9a\x9e\x71\xb1\x3a\x61\x59\x06\x81\xfa\x00\x34\xe2\xf9\x4e\x77\x44\x93\x54\x9a\x41\x9a\xac\xfb\x74\x98\xa6\xf8\x3d\x11\xa8\x35\xe2\x56\x09\x18\xd6\x22\xc4\xb8\x65\x93\xe8\x60\x58\xe3\x4d\x0f\xc2\x35\x4b\x74\xb2\x3f\x60\x53\x46\xd8\x57\xd0\xa5\x5b\xe6\x5f\x9a\x9e\x8e\xc5\xeb\xf7\x8a\xf0\xa5\x50\xfb\xc2\x8f\x3c\x86\x9d\xda\xea\x28\xaf\x23\x51\x4d\x38\xa7\x03\xda\x71\x0f\x75\x40\x33\xe1\x66\x7a\x0b\x97\xb2\x98\xd0\x1d\x63\xc8\x61\x41\x13\x59\x24\x00\x63\x95\x85\x4c\x64\x61\x66\xa1\x85\x64\xa2\xa5\x2c\xac\x34\x9f\xd8\x9a\x6c\x0c\x21\x44\x47\x2a\x2d\x27\x34\x10\x1a\x63\x97\xd9\x96\xd7\xba\xc9\x55\xd4\x7c\x42\x42\x9b\x76\x1c\xb2\xc4\x3b\xcd\x5c\xd2\x67\x48\x92\x59\x2d\x59\x30\xf3\xc2\x85\x5d\x39\x59\x8b\x6b\x0d\x24\xd2\x61\x46\xc6\x5b\x6b\x7a\x8b\x00\xe8\x10\xc5\x73\x3f\xfd\x26\x1a\x68\xd6\xaf\x40\x4e\x72\xfb\xc0\xb3\x93\x61\xba\xe4\x94\xbf\x58\x39\x70\x21\xb4\x5f\x38\x18\x95\x2f\x2e\x1d\xe3\x38\x82\xde\xfe\x3e\x9d\xdc\xa2\xb5\xef\x44\xae\x8f\x7e\x7a\xdf\x41\x81\x6f\x73\x22\x7e\xf7\xd3\xfb\xa3\xcb\xd8\x5a\x8f\x6d\x85\xec\x02\xad\xa4\xdf\xe8\x8d\x2c\x70\x18\xfa\x61\x47\x68\x95\x34\xf6\x62\xab\xac\x76\x04\x70\x55\x84\xbf\xa2\x6b\xe5\xf0\x3e\x27\x78\xad\x40\x56\x19\x7e\xd6\xcf\xbc\x1e\x10\xaa\x0a\x3a\x9f\x88\x7d\x39\x28\x36\x61\xde\x07\xf4\x55\xc0\x5d\x1f\xec\xbb\x81\x5a\x1a\x85\xfa\x40\xb5\xc0\x9e\xdf\x63\xd6\x11\xd6\x14\x91\xbd\xb8\xa6\xea\x1d\x01\xd8\x34\xe5\xaf\xc8\x56\x3d\xc4\x5f\xa1\xed\x99\x40\x9b\x8c\xab\xbe\x2c\xc0\x55\xcb\xf0\x2c\x60\x2e\x03\x4b\xdd\x71\x6e\x8d\xd7\x07\xbc\xe8\x84\x56\x09\xca\x5d\x4c\x2e\xb2\xf8\x06\x4f\xcd\xdf\x88\xe7\x24\x00\xc7\x13\x46\x24\xb4\xdd\x43\x79\x11\xda\xe2\x26\x8d\xa1\x80\x37\x78\xd7\x66\x9b\x8a\x37\x38\x68\xef\x5d\x35\x6c\xbb\x45\xc5\x9b\xf5\xba\xf3\x0e\x04\xbf\xc0\xfb\xc0\x94\xf9\x73\x75\xb7\xa9\x5f\xb3\x8f\xf4\x04\x1b\x48\xda\xb0\xbb\x4f\x91\x38\x75\x07\x08\xa5\xf2\x45\x44\xf1\x4b\xa9\x69\x99\xa2\x90\x7e\x20\x12\xdd\x88\xb7\x44\x33\xe6\x0d\x44\xca\x88\x7e\x0d\x6d\xeb\xb4\x0c\xbd\x49\xff\xf6\xea\xea\x83\x09\x90\xbb\x20\x4b\xe0\x62\xbe\xf5\x7d\x57\x3c\x39\xe7\xe4\xe4\xfc\xe1\x44\xe4\xde\x9b\xa4\xa5\xd3\x10\x8b\x4f\x0c\x91\x1d\x51\x47\x5f\x7e\x13\xf1\x6b\x88\x17\x71\xaa\x84\x10\xec\xfc\xfa\x4e\xa7\xb1\x9d\xea\x8c\x09\x7e\x99\x4d\xa8\x51\x49\x51\x92\x9c\x71\x40\x57\x40\xe6\x38\x47\x44\xa6\x7d\x18\x89\x0c\x27\x0b\x3f\x5c\xa7\xdf\xd1\xaf\xfc\x90\xfc\xc5\x93\x77\xdc\x81\x78\x34\xf3\x43\xd1\x55\x9f\x31\x7f\x2d\x8a\x0a\x32\xfc\x33\xc2\xe1\x23\xcf\x15\x59\x9f\xcd\x79\x3e\x60\xa6\x97\x62\xe9\x2d\x12\x58\xf4\x8e\xa6\x10\x61\x40\xa3\xd9\x9a\xc4\x1f\x1c\xa9\xbb\x54\x9b\xd4\xb8\x73\xa6\x83\x65\xe8\x47\xc1\x80\xe7\xd1\x61\x27\xbb\xb0\x4f\xd5\xe4\x63\x23\x2a\xa2\xf8\x6a\x40\xd7\x3a\xf7\x51\xdc\xe7\xf3\x86\xcb\x8d\x03\x84\xc4\x55\xfa\x8c\x2d\x41\x1a\x83\x60\xa5\x3e\x0e\xaa\xb2\x05\x4d\xae\xc2\x12\x62\x69\x7e\x15\xba\xc9\xe7\x36\xa6\x85\xe4\x29\x2e\x13\x91\xae\xca\x27\x15\xbf\xe3\x22\x66\x47\xdb\x21\x94\x3f\x74\x9a\xcb\x27\x13\x60\x9b\x48\x58\x94\x83\x23\x0b\xdc\x15\x53\x32\x0b\x89\xf6\xa5\x1f\x48\x34\x1a\xe3\x3a\xd8\x01\x51\x43\x4c\x57\xb9\xf7\x70\xd7\x93\x1b\xeb\x6a\x6c\xaa\x87\xd0\xb3\x92\x9c\x2f\xce\xf3\x45\x41\xb4\xf8\x32\x3f\x11\xdb\xda\x49\xf5\xa4\xdb\x93\xb5\xa0\xb2\xdf\x32\x69\x6a\x29\xa9\xc4\x45\x5b\x34\x75\x16\x4f\x00\xa6\xce\xe2\xa8\x58\x0a\xe4\xab\xa0\x34\xd7\x48\xbd\x85\x65\xe6\x94\x47\x98\x89\x69\xee\x81\x59\x67\xb1\x1f\x65\x2b\xfa\xd8\x09\x64\xff\x5b\x10\xb5\x42\x77\x07\x02\x6a\xb5\x39\xc4\xb2\xec\xc7\xd3\x04\x4b\xc7\xef\x7a\x84\xd2\x06\xb2\x65\x25\xe0\x28\x3a\x7e\xf7\xac\x41\xd4\x59\xec\xc3\xd0\xc2\x87\x3b\x3c\x36\xa6\x69\x1b\x74\x49\x5e\x69\xf1\x54\xe5\x19\x13\x29\xe5\x5b\x97\x57\xe3\x09\xcf\x34\x51\xd6\x91\x51\x60\x79\x5f\xea\x53\x32\x58\x2a\x27\x43\x11\xcf\x7d\xfa\xd6\x46\xbc\xf1\x3b\xf1\x2e\xe2\x48\xf2\x69\xea\x05\x01\x93\x4f\x14\xba\x78\xac\x8a\x79\x58\x03\x60\x25\xd4\xf6\x0e\x5c\x1d\x24\xee\x31\xc7\x5c\x6a\x40\x3e\x63\xbb\x95\x3c\xc9\x48\x75\x12\x28\xfd\xc6\xb3\x28\x4f\x6f\x7e\x9a\x3c\x85\x9f\x26\xc7\xf5\xd3\xa4\x9d\x9f\x26\xad\xfd\x34\x69\xe0\xa7\x2b\xfa\xf8\xd5\x4f\xc7\xad\xab\xfd\x74\x85\xee\x0e\xf4\xd3\xd5\xe6\x10\xcb\xd2\xc6\x4f\x5b\x7d\xfa\xe9\x06\xb2\x15\xfd\xb4\xf5\xbc\xfd\x34\x39\x9e\x9f\x26\x45\x78\xbd\x3e\x3b\xff\x6d\x32\xed\xcf\x11\x92\x8c\x23\xd4\xd4\x9b\x7a\xea\x12\x01\x27\x37\x37\x57\x37\xc7\x92\x4f\x11\xef\x20\x9e\xd5\x73\x20\x91\x95\xcf\x3a\x6e\x20\x51\x01\x14\x07\x04\x12\xb5\x96\xd5\xc1\x71\xe7\x5f\x39\x35\x0f\x25\xea\x4c\xa9\x93\x40\x99\xb7\xfb\x9d\xe4\xb1\xfa\x08\x6d\xc8\x53\x85\x36\xfc\x2b\xd3\xe3\xc7\x36\xfc\x2d\xc0\x31\x83\x1b\xf9\x96\xa1\x3c\xba\xb9\xc0\x6b\x3f\x7c\x6c\x18\xc4\x00\xa1\xfd\x51\x4c\x55\x6f\xbe\xee\xe9\x1e\x16\xd9\x54\xe9\xf3\xc0\xd0\xa6\xc6\x18\x62\x69\xf6\xc7\x36\x79\xaa\xf4\xc1\x0e\xfa\x94\x52\xd0\xcb\x8b\x59\xdb\xa7\xb1\x0a\xa7\x2a\x7b\x84\x11\x27\xfa\x8c\x83\x20\xe8\xc5\xf1\x76\x7c\xab\xac\xe8\xb0\x1d\xdf\xf8\x35\x63\xbf\x3b\xbe\x01\x7d\x02\xb4\x0d\xe8\x51\xc1\x16\xc8\x57\x61\xed\x75\xe8\xcf\x31\xa5\x98\x36\x84\xdb\x80\xee\x47\xdb\x8a\xde\xb4\x03\x5b\x79\xa4\x4c\x15\xd0\xa6\x33\xf9\x9f\x17\xe6\x76\x9d\x71\x01\x2d\x3f\x66\xe1\xcb\x02\x7e\xc5\x90\x1e\x88\xa4\xd5\xf6\x98\x06\xc7\x7d\x70\x7f\x2b\xa6\x3b\xfc\x7a\x3e\x1b\xe3\x79\x88\x6d\x81\xb6\xf9\x65\x6d\x6a\x4d\xdb\x48\xca\x0f\xd6\x85\x35\x35\x03\xea\x99\x1f\x60\x62\x54\x4b\x38\x68\x2c\x5c\xb2\xe8\xee\x4f\xb6\x0b\x3f\x6c\xb0\xd8\x4e\xc4\x08\xdc\x88\xea\x43\x05\xda\x7a\x9b\xbe\xf0\xbe\xc2\x88\x0e\x83\xfb\x80\x1e\x03\xed\x37\xcb\x27\x40\xfb\xcd\xf2\xa8\x68\x0f\xe4\xab\xd0\xfe\xa3\x3c\x72\x0a\x2d\x5d\x7f\xc6\x4f\x4e\x65\x36\x8b\x9a\x22\xff\x66\xb9\x1f\xf9\x2b\x7a\xf6\x15\xf9\x9b\x20\xff\x66\xf9\x1c\x91\xbf\x62\x48\x0f\x44\xfe\x6a\xdb\x8c\x65\xa9\x42\xfe\xa7\x42\xa9\x8a\x0e\x1f\x86\x52\x9b\x65\xdf\x28\x45\x5b\x66\x3d\x06\x10\xe0\x25\x29\x8f\xda\x21\x64\xd2\x1e\x79\x15\xf3\xda\x1a\xf3\x44\x3c\x6f\x99\x24\x3f\x06\x3a\xad\x3b\x20\x4e\xdd\x39\x2f\x0a\xf3\xd2\xa4\x9a\x65\x1b\xc6\x2d\xee\x72\x2d\xd4\xe3\xd4\x9f\x26\x59\xe4\x92\x14\xc5\x61\x92\x47\x1e\xd0\x08\xee\x45\x07\x50\xae\x9f\x0d\x53\xca\x93\x5e\x85\x04\xd6\xff\xec\xb1\x65\xb3\x4b\x32\x6f\x98\xeb\x19\x37\xb9\x25\x7f\xb5\x6d\x72\x83\x29\x98\x6e\x5d\x96\x27\xcf\x01\xd5\xdf\xe7\x9e\xea\x66\x53\x75\x18\x65\xfd\x07\xdd\xed\x06\x20\x49\xe4\xff\x49\x0c\x00\xcf\xdf\xdf\x3b\x00\x9d\x12\x4c\x75\x28\x50\x9a\x5f\xfa\xea\xd8\x87\x3a\x40\x54\x93\xda\x68\xb7\x3a\x9c\x77\x90\xa1\x74\xd7\x1f\xa5\xdb\xc9\x4d\xa7\xe3\x21\xb2\x3d\xbc\xb1\x7a\xa2\x74\x69\x9d\x4f\x7a\x22\xf5\xd1\xba\x99\xf6\x44\xea\x46\x6c\xf3\xf7\x41\x69\x6a\x5d\x4c\x78\xe4\x23\x27\x5e\x4f\x3a\x3b\x13\x34\xbb\x9e\x83\xa1\xbc\x48\xf7\x14\x63\x1d\xd7\xa8\xa0\x19\x5c\xd0\x8d\x2c\x49\x79\x4e\x11\x74\xa9\x80\x24\x75\x0d\x21\x09\x52\xcd\x65\x81\x76\x31\x99\x13\xc6\x53\xf5\x21\xe8\xd1\x87\x64\x9e\x2a\x2e\xf1\xe7\x0a\xa7\xf1\xe9\x6e\x71\x18\x29\xe2\x25\x7e\x7e\x1e\x84\x3d\x31\x23\x79\x36\x5b\xea\x20\x3a\x03\x81\x8a\xe6\x78\xe5\xbb\x30\x0c\x23\x90\xff\x3a\xb9\x95\x71\xcc\x35\x06\xe0\x77\x38\xaa\x25\x3b\x7e\xb2\xec\xa3\xed\x46\x99\x63\xdb\x4a\xce\x80\x6b\xeb\xdf\x53\x19\xfc\xd0\x9a\x46\x41\xa2\x92\x54\xdf\x44\x9c\x5e\x76\xde\x97\xa9\xc2\x92\x53\x71\xf9\x5d\x4a\x3f\x43\x4e\xab\x85\x20\x9b\xa5\x78\xc1\x62\xc8\x28\xe1\x1e\x3f\xf2\x15\x80\x2c\xd2\xbe\x02\x04\xf2\x5d\xce\x80\x8b\xf4\x73\xec\x5a\xd4\x11\xa3\x72\xa9\x31\xe1\x2d\x2a\x81\xbe\x81\x14\x71\xb8\xa3\xe2\x99\xb5\x3d\x5f\x25\xf1\x8c\xe2\x72\x01\x85\xbc\x5d\xee\x73\x0e\x28\x35\xef\x00\x48\x93\x90\x46\x9d\xb9\xab\xe2\x9a\x28\x22\x85\x6f\x3a\x5a\xc4\x1b\x09\x7d\xe1\xee\xfe\x91\x90\x17\x84\xbf\xaf\x0e\x69\xb4\x70\x97\x76\xce\xff\x96\xd6\xba\x0e\xfd\x0d\x71\x70\x58\x57\xb3\xa1\xb4\x10\xfe\x31\xe5\x9d\x5f\x27\xe2\xf2\x75\x20\x36\x50\xd2\xa1\x5a\xd1\x1b\xb2\x52\x43\xb3\x20\x2e\x5f\x5b\xb3\x95\xe4\xfa\xf3\xff\x27\x6c\xf9\x23\xfe\xa4\x8a\x73\x69\x50\xd0\xc0\x64\x28\x44\xc6\xf3\x55\x93\x18\x99\x2c\x10\xfe\x13\x15\x0d\xd6\x41\xfc\x78\xc7\x0a\xc8\xce\x4d\x10\x94\xa1\x58\x57\x3f\xc6\xdc\x43\x03\x1d\xbd\x9a\x88\x03\x1d\xb9\x2e\xcf\x1e\xf3\xd9\xe5\xab\x1a\x92\xff\xee\x25\x79\xc4\xc3\xb8\xca\x87\x81\xb2\xd0\xca\x0a\xc2\xc2\x2a\x9f\x3a\x24\xc4\x73\x26\xde\xf9\xf5\xf4\x11\x4d\x6c\x04\x1d\x5c\x5c\xec\x94\x81\x82\x3a\x85\x19\xcc\x87\x2f\x5c\xf9\xff\x22\xe3\x81\x39\xcf\xef\x47\x5b\xb6\x22\xd4\x5c\xd9\x9e\xe3\x62\x51\x92\x3f\xc1\xd3\x6e\xc4\x2b\x17\x06\xf0\x01\x5e\x65\x5e\x3d\xca\xf3\x6b\x80\xee\x99\x4b\x96\xde\xb9\x2c\x97\xe3\x5a\x90\x2d\x69\x07\x65\xaa\x6a\x0c\xce\x4a\xae\x9c\x47\xe1\x15\xed\x10\xb3\x74\x6d\xe9\x35\x52\x87\x43\xda\x4a\x83\xab\xb8\x4b\xff\x09\x00\x00\xff\xff\x4f\x0d\x28\x0b\x2f\x68\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26671, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

