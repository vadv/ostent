// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x7b\x73\xdb\x36\xb6\xff\x3f\x9f\x02\x97\x6d\xef\xdc\x76\x2a\xea\x26\xdb\xee\x66\x52\xdb\x33\x8e\xa5\xa4\x9a\xc6\x8f\xb5\xe5\xec\xf6\xaf\x0e\x25\x42\x12\x62\x8a\x64\x09\x50\x8e\xaa\xd1\x77\xdf\x83\x17\xdf\x90\x48\x91\x72\x3c\xb3\xc9\x4c\x2c\x3e\x80\xf3\xc2\xc1\x0f\x07\xc0\x21\x4e\xfe\x67\x70\x7d\x31\xfe\xfd\x66\x88\x16\x6c\xe9\xbd\x38\x3b\x11\x3f\x08\xc1\x05\x76\x5c\xb8\xe0\x97\x4b\xcc\x1c\x34\x5d\x38\x11\xc5\xec\xd4\x8a\xd9\xac\xf7\xda\xca\xbe\x5a\x30\x16\xf6\xf0\x9f\x31\x59\x9d\x5a\xff\xee\xdd\x9f\xf7\x2e\x82\x65\xe8\x30\x32\xf1\xb0\x85\xa6\x81\xcf\xb0\x0f\xf5\x46\xc3\x53\xec\xce\x71\xae\xa6\xef\x2c\xf1\xa9\xb5\x22\xf8\x31\x0c\x22\x96\x29\xfc\x48\x5c\xb6\x38\x75\xf1\x8a\x4c\x71\x4f\xdc\xfc\x88\x88\x4f\x18\x71\xbc\x1e\x9d\x3a\x1e\x3e\x7d\xa9\x09\x31\xc2\x3c\x2c\xae\xe1\x6e\xb3\xb1\x07\x0e\x73\xec\x5f\x03\xca\x38\xf1\xed\x16\xc1\x15\x90\x3c\xe9\xa7\xe5\xce\x4e\x3c\xe2\x3f\xa0\x08\x7b\xa7\x16\x01\x96\x16\x62\xeb\x10\xe4\x20\x4b\x67\x8e\xfb\xa1\x3f\xb7\xd0\x22\xc2\xb3\x53\xab\x3f\x73\x56\xbc\x80\xcd\x9f\x95\xaa\x52\xb6\xf6\x30\x5d\x60\xcc\x34\x01\x86\x3f\xb3\xfe\x94\xd2\xa4\x3e\x5c\xf7\x89\xef\xe2\xcf\x36\x7f\xaa\x28\xd0\x69\x44\x42\x96\xad\xf2\xc9\x59\x39\xf2\xa9\x55\xb4\x33\xa2\xd1\x14\x08\x7d\xa2\xfd\x88\x5b\x38\xc2\x70\xf5\xca\x7e\x69\xbf\x7c\xad\x1f\xd8\x4b\xe2\xdb\x9f\x80\xa7\x0b\x8a\xf7\x96\x0e\xf1\x65\xf9\xcd\x86\xcc\x90\x3d\x3e\x7f\xff\x7e\x38\x98\x10\x7f\xbb\x85\x72\x4a\x18\x59\x63\xb3\xc1\x1e\x05\x0b\x01\x87\xfe\x92\x78\x0f\xea\xa5\x78\xe1\xbb\xdb\xad\xa5\x8d\x7a\xd2\x97\xc2\x29\xf9\xfb\xca\x35\xce\x4e\x26\x81\xbb\x56\x0f\x7d\x67\x85\xa6\x9e\x43\xe9\xa9\x05\x97\x13\x27\x42\xf2\xa7\xe7\xe2\x99\x13\x7b\x4c\xdf\xce\xc8\x67\xec\xf6\x58\x10\x5a\x28\x0a\xa0\x19\x79\x69\x32\x07\x67\x81\x66\x48\xf8\xb9\x24\x21\xc6\x3d\x02\x54\xc2\x50\xd3\x8b\x89\xab\xcb\x14\x4a\xb9\x51\x10\xba\xc1\xa3\xaf\xb9\x70\x09\x71\x94\x16\x16\xc2\xc6\x8c\x05\x7e\x5e\x48\x10\x64\x3e\xf7\x30\xf8\x9d\xe7\x39\x21\xc5\xae\x6e\x49\x59\x58\xd9\x54\x16\xe2\xb2\xc8\x52\xfa\xb1\x13\xcd\x79\x43\x7d\xa3\x68\x25\xaf\x33\x6c\x45\x7b\x87\x4e\xc2\x96\x46\xbd\xc0\xf7\xd6\xf9\x22\x50\x68\x2c\xe5\x48\x8d\x01\x36\x87\x6a\x3b\x28\x71\xbf\xec\x01\xdb\x12\xa9\x67\x53\xb3\x2f\x8d\x98\x6b\x04\x07\x11\x37\x6d\xae\x49\xe4\xf8\x60\xf2\x42\x23\xea\x46\x51\x66\x55\x85\x72\x2d\xa1\x8b\x5a\xc8\x89\x88\xd3\xc3\x9f\x81\xbb\x8b\x81\x32\x8b\x62\x9c\xf4\xbe\x62\x43\x70\x87\xe1\xec\x17\x0a\x1c\x4a\x6a\x94\xd1\xe3\xa4\x0f\x95\x8a\x7a\x39\x39\x95\x62\xaf\xa4\xc0\x12\xfb\xb1\xf6\x6f\x79\x2d\xc4\xf4\x9c\x09\xf6\x3c\xec\x4e\xd6\x45\x13\x14\x38\x78\xa4\x44\x52\x79\xb4\x22\x1a\x46\x98\x02\xa8\xe5\xba\x4d\x52\x3d\x8a\x7d\x9f\xf8\xf3\x93\xbe\x47\xca\x74\x6b\xd4\x87\x46\x2a\xb5\x08\xa0\x54\xb1\x5c\xc6\x5e\x83\xd1\xdd\xf8\x76\xf4\x96\x9b\xcb\x29\xbb\x46\x49\x8c\x7e\xec\xe5\x2c\x98\xb3\x71\xda\x4c\xc5\x6e\x95\x42\x82\x7c\x80\x76\xf4\xbb\x6c\xb3\x70\x68\x52\x45\xe1\xa7\xc2\xd6\x9c\x19\x09\xad\x22\x34\x54\xe8\x9c\x68\x3c\xba\xe1\xca\x56\x19\xb8\x60\xba\xb2\x75\xb5\x7a\xba\x84\xe7\x54\x71\x46\x85\xde\xd0\xa8\x03\x94\x5b\x2a\xe1\x0a\xdc\x4a\x6f\x33\x7a\x7d\x38\xaf\xf2\xf9\x8a\x66\x2a\x9b\xf9\x10\xef\xaf\x92\xa6\xa5\xfb\x0b\x12\x71\xc8\xc8\x12\x97\x1a\x28\x21\x5f\x93\x8c\x82\x2b\x49\xad\x02\xa7\x2a\x7b\x45\xce\x9e\xf7\xa2\x6a\x55\xc7\x50\x36\xad\x94\x30\xdf\x41\xaa\x4b\x96\xbb\x91\xc9\xe3\xf5\x65\x44\xe6\x0b\x66\x86\x9a\x5d\x6e\x9f\xa1\xed\x11\xca\x7a\xc4\x87\x30\x08\x1b\x7b\x95\x26\x6d\xb0\xa9\x84\xe7\x6f\x78\x10\x50\x6d\x3d\xfe\xaa\x99\xc5\xf6\xf1\x0a\xa9\x89\x55\x48\xbb\xe5\xb4\x9a\x9b\x38\xad\x9c\x39\x80\x3d\x3b\x86\x2b\x94\x7b\x0c\x72\xa6\x8c\xac\xca\x43\x5c\x61\x04\x5e\xe1\x88\x72\xef\x37\x8c\xc1\x87\x0c\xbb\x7c\x36\x40\xdf\xf4\xfb\x8f\x8f\x8f\x36\x8c\xa3\x11\xfc\xb7\xa7\xc1\xb2\x2f\xe3\x70\x88\x5a\x3d\xec\x50\x4c\xfb\x9e\xc3\x30\xad\x1a\x55\xae\xef\xc6\xc3\xab\x71\xd5\x50\xd2\x0e\x6c\xb4\xae\x47\x41\x1c\x45\xbc\x0b\xc8\xe9\xc6\x8c\x82\x9a\x86\xa1\x8f\xc3\xdb\xbb\xd1\xf5\xd5\xd3\xe0\x50\x61\x38\xcf\xdc\xc2\x0d\x60\x85\x9a\x31\xe8\x11\x49\xcc\x05\xaa\xa3\x7d\x14\x3a\xae\x0b\xa1\x0c\x9f\x2f\x50\xbc\x02\xbd\xd7\x74\x51\x39\x4d\x88\x82\xc7\xe2\xd4\x80\xd3\x5e\xe2\x25\x84\xe9\x72\x1e\x2a\x0b\x4e\xbc\x60\xfa\xc0\xe3\xfd\xde\xd2\xed\xbd\xd2\x17\xc1\x6c\x06\x73\xae\xde\xcb\x5c\x08\xb1\xd9\x30\xbc\x0c\xb9\x7d\x91\x05\xb3\x18\x10\x8b\xbe\x79\x23\x2f\xfe\x00\xc7\xc7\x1e\x50\xb7\x90\x5d\x1c\x30\x53\xee\x64\xb6\x8b\xf9\xdf\x9a\x31\x23\xb3\x9d\xbc\xa6\x61\xbc\x53\xd3\x66\xcc\x80\xda\x4e\x6e\x6e\x97\x9a\xb9\xd5\x9a\xe5\xfd\x46\xdf\xd4\x99\x1c\xd6\xf1\x8c\x90\xee\xd2\xe0\x75\xc1\x31\x1a\x9a\x0f\x46\x9b\xa7\xd7\x68\x35\x3f\xa2\x46\x30\xaa\x35\xd1\x68\xe7\x12\x87\xae\xb0\x72\x22\xc4\xd1\x09\x9d\x22\x85\x53\xdb\xed\x2f\xc5\xb5\x06\xb5\xc4\xc0\x57\x1d\xc4\x02\xd5\x66\xd3\xff\xe1\xc5\x0f\xfd\xed\x76\xb3\x91\xf2\x65\x04\x76\x38\x78\xf3\xf5\x19\x0b\x24\x55\x38\x0a\x94\x7f\x85\x5f\xbe\x0e\xe4\x5f\x78\x64\xfa\x70\xba\x61\x0b\x42\xed\x05\x8c\x5c\x1e\x16\x4f\xb6\x2f\x24\x52\x8e\x41\x4e\x89\x90\x67\x6a\x05\x64\x17\x33\x65\x9d\xa9\x07\x33\x07\xa8\x45\xfc\x30\x66\x5c\x8f\xd1\xe0\x9c\xb1\x08\xf8\xc1\x8d\x68\x88\xed\x36\x9d\xb2\xf4\xa6\x0b\x3c\x7d\x98\x04\x9f\xf5\x3a\x43\x7a\x2f\x86\xad\x05\x71\x5d\xec\x27\xe3\xa9\xb8\xe3\xd2\x7c\xa2\x9f\x2f\xbc\x00\xa6\x3c\x96\xe0\xc3\x19\x8a\x11\x8e\x33\x7c\x17\x44\x8a\x63\x96\x21\x17\x8b\xbf\xbd\xfc\xd7\x1d\x5f\xa6\x92\x25\x0a\x8a\x0a\x12\x8d\x94\x0d\x63\x70\x3e\x6a\xf1\x32\x8f\x84\x2d\x10\xbf\x03\x6f\xe2\xae\x01\x74\xf9\x1f\xb9\xa4\xb4\xd9\x40\xa4\x33\xc7\xe8\x5b\xf2\x23\xfa\x76\x1a\x44\x18\xbd\x39\x45\x72\x28\xba\xb8\xb9\xb7\x3f\x40\x0c\x09\x02\xb0\x08\x24\x14\xaf\xed\x2b\xfb\x37\xbc\xe6\x42\x22\x81\x64\x40\x77\xb2\xee\x5d\x59\x52\xe4\x13\xe6\x6a\x9f\xe6\xbe\x24\x03\x59\xe4\x07\x8f\x91\xa3\x22\xc8\xb3\x84\x0e\xd7\x8b\xb9\xc6\x5a\xc9\x1a\x1c\x5f\xd5\x48\xed\xa5\xab\xdf\x53\x1c\x5d\xc8\x67\xe9\x8a\x62\xfa\x8a\x13\x4f\x16\x3a\xce\xda\x30\xba\x5b\x53\xc5\x07\x15\x19\xc1\xab\xee\xf8\x8c\x84\x93\x57\x2a\xc4\x5f\x19\x18\xf5\x59\x94\x71\x8b\xfc\x4f\x1d\x27\x91\x38\xc4\x5b\x98\x5f\x24\x42\xf3\x9b\x97\x08\x62\x19\x12\x62\x85\x55\x52\xaf\xcc\x5a\x33\x70\xd6\x78\xc2\x16\x59\xa4\x49\xee\xf8\x8b\x3d\xee\x20\x8a\xf1\x06\xcb\xad\x5e\xc5\x3e\xc9\xc5\x49\x67\xdf\x15\x96\xad\x0e\xe1\x02\xad\x75\x7c\x26\xbc\xa9\xda\x70\xe9\x2b\xab\x8a\xa7\x7a\xf1\x96\xa5\xab\xb7\xbb\xe0\x5f\xf7\x79\x09\xff\x2c\xc5\x63\xd1\x80\x4d\xd0\xc3\x9d\x4d\xd6\x10\xab\xfe\xd1\x10\x42\x5c\x42\x1f\x52\xf8\x18\xbc\x13\x44\xf2\x10\xc2\x8b\xd8\x03\x12\x5d\x39\x4b\x9c\x02\x89\xe2\xa7\xc0\xc4\x25\x91\x58\xf3\x2b\x41\x4a\x01\x47\x76\x58\x42\x60\xea\xff\x29\x6e\x78\x25\xb8\xc1\x08\x12\xa2\x97\xaf\x38\xb7\x9e\x64\xe7\xe2\x95\x60\xf4\x7d\x25\x14\x1d\xc8\x4d\xe9\x26\xb8\xfd\x3d\xcb\x4c\x69\x55\xcd\xac\x04\x13\xda\x56\xe7\x2b\x87\x78\xcd\xaa\x40\x77\x82\x66\xfe\x5f\x7f\x42\xc3\x5f\x4e\x68\x1c\xa6\x70\x62\xd6\x21\xa6\x38\xc4\xd1\x14\xe2\x76\xd0\x24\xbd\x41\x09\xc5\x1b\xf9\x40\x48\xaf\x69\xd6\xc2\x3b\x2d\xd5\x38\x60\x4e\x56\x91\x56\xc8\xa5\x1d\xb4\x13\xf8\xaa\xb4\x0b\x5b\x24\x21\x0a\xd2\x57\xca\xb1\x6f\x9c\xc8\x59\x52\x7b\x78\x75\x7f\x69\xbb\x33\x64\xbd\xbb\xb3\x90\x25\xba\x49\x3b\x3a\x97\x37\xdd\xd0\x39\xff\x78\x3e\xfa\xd0\x01\x9d\xfb\xbb\xe1\xa0\x03\x32\xe3\xeb\xf1\x39\x17\xa7\x15\xb6\xe5\x10\xa9\x0b\x80\x23\x7e\xe0\xb6\x47\x38\x49\xa5\x1e\xc4\xc9\xb2\x4f\x87\x71\x8a\xdf\x13\x81\x5c\x2d\x6e\x46\x70\x18\xcd\x22\x8c\x1b\x56\x89\x3b\x87\x39\x4e\xb2\x35\xce\x8d\x84\x21\xba\x03\x3a\xe5\xa8\x5d\x05\x6a\xba\x66\x71\xdf\xf5\x6c\x20\x76\xf0\x0d\x21\x4f\xa9\xf4\x65\x10\xfb\x0c\xbb\x3b\x8b\xa3\xa2\x8d\x44\x31\x31\xa0\x1d\x50\x8f\x8f\x6a\x07\x54\x13\xc3\x4e\x67\x21\x56\x1e\x37\xda\xe3\x10\x39\x2c\xd0\x22\xb3\x14\x84\x46\x55\x61\x16\x99\xd9\x79\xf8\x21\xb9\x08\x2b\x0f\x3d\xf5\x3b\xbf\x26\x9b\xc0\x0c\xd1\xd1\x4d\xc3\x4e\x0f\x84\x06\xd8\x63\xce\xc8\x6f\x5c\xe5\x3a\x66\x4d\xea\x34\xe3\x90\x27\xde\xaa\xe7\x92\x2e\x43\x94\xdc\x0c\x6b\x04\x3d\x2f\x9a\x39\xc6\xce\x5a\x9e\x9f\x20\x91\x51\x73\x6a\xbd\x1d\x8d\xef\x10\x60\x1e\xa2\x78\x1a\x64\x37\xb3\x81\xe6\xee\x59\xcb\x49\x61\x29\x79\x72\xd2\xcf\x3e\x39\xe3\x7b\x33\x07\x4e\x9e\xf6\x0b\x07\xad\xf2\xc5\xa5\x63\x1c\x47\xd0\xdb\xdf\xc7\xc3\x3b\xb4\x0c\xdc\xd8\x0b\xd0\x4f\xef\x5b\x18\xf0\x6d\x41\xc4\xef\x7e\x7a\x7f\x74\x19\x1b\xdb\xb1\xa9\x90\x6d\xa0\x95\x74\x1b\xe1\x91\x19\x8e\xa2\x20\x6a\x09\xad\x92\xc6\x5e\x6c\x95\xc5\x8e\x00\xae\x8a\xf0\x57\x74\x35\x36\xef\x73\x82\x57\x03\xb2\xea\x10\x75\x57\xcf\xeb\x00\xa1\x4c\xd0\xf9\x44\xec\xab\x41\xb1\x0e\xf3\x2e\xa0\xcf\x00\x77\x5d\xb0\x6f\x07\x6a\x59\x14\xea\x02\xd5\x42\x67\xfa\x80\x59\x4b\x58\x53\x44\xf6\xe2\x9a\x2a\x77\x04\x60\xd3\x94\xbf\x22\x9b\xb9\x89\xbf\x42\xdb\x33\x81\x36\x19\x57\x7d\x59\x80\x33\xcb\xf0\x2c\x60\x2e\x07\x4b\xed\x71\x6e\x89\x97\x07\x6c\x5f\x42\xad\x14\xe5\x2e\x87\x97\x79\x7c\x83\xb7\xf6\x6f\xc4\x77\x53\x80\xe3\x39\x27\x12\xda\x1e\xe0\x79\x19\xda\x92\x2a\xb5\xa1\x80\x57\x78\xd7\x64\x29\x8b\x57\xe8\x74\xbd\x5e\x11\x6c\xb3\x8c\xc5\x49\x74\xba\x5a\x0f\x04\xbf\xc0\x3e\x63\xa6\x8b\xf0\x26\x69\x52\x7e\xc7\x5a\xd3\x13\x2c\x32\x69\xe7\x6f\xdf\x8d\x92\x0c\x21\x20\x94\x49\x4b\x11\x8f\x5f\x4a\x4b\xcb\xe4\x84\xec\x0b\x91\x4f\x47\xfc\x39\x9a\x30\xbf\x27\x32\x53\xf4\xce\xb5\xa3\xb3\x3f\xf4\x1a\xff\xdb\xeb\xeb\x0f\x36\xc0\xf2\x8c\xcc\x81\x8b\xfd\x36\x08\x3c\xf1\x46\xec\x63\xcb\x3e\xc6\x89\xc8\xf5\x39\x49\x4b\x67\x3b\x96\xdf\x58\x22\x2f\x62\x17\x7d\xf9\xe9\x05\x4f\x12\x49\x92\x24\x84\x60\x17\x37\xf7\x3a\x5b\xee\x4c\xe7\x4a\xf0\xcb\x7c\xde\x8e\xca\xbd\x92\xe4\xac\x03\x54\x01\x99\x93\xec\x10\x99\xf0\x61\xa5\x32\x9c\xcc\x82\x68\x99\xcd\xeb\x58\x04\x11\xf9\x8b\xe7\x08\x79\x3d\xf1\x6a\x12\x44\x42\xd5\x80\xb1\x60\x29\x1e\x95\x64\xf8\x67\x8c\xa3\x35\xcf\x12\x59\x9e\x4f\x79\xda\x61\x4e\x4b\x31\x3d\x17\xa9\x2b\x7a\xd5\x53\x88\xd0\xa3\xf1\x64\x49\x92\xef\x9a\xd4\x5d\xa6\x4e\xa6\xdd\x39\xd3\xde\x3c\x0a\xe2\xb0\xc7\xd3\xf5\xb0\x9b\x9f\xfc\x67\x4a\xf2\xb6\x11\x05\x51\x72\xd5\xa3\x4b\x9d\x62\x29\xee\x8b\xe9\xc9\xd5\xce\x01\x42\x62\x93\x3d\x13\x4f\x90\xce\x20\x58\xa9\x6f\x90\x4c\xbe\xa0\xc9\x19\x3c\x21\x91\xe6\x57\x61\x9b\x62\x0a\x65\x56\x48\x9e\xdc\x32\x14\x59\xb1\xbc\x53\xf1\x3b\x2e\x62\xbe\xb5\x5d\x42\xf9\x4b\xb7\xbe\x7c\x32\xcf\xb6\x8e\x84\x65\x39\x38\xb2\xc0\x5d\x39\xf3\xb3\x94\xcf\x5f\xf9\x1d\x46\xad\x36\xde\x05\x3b\x20\x6a\x84\xe9\xc2\xca\x6f\xe3\xdd\x0c\x6f\x47\xd7\x03\x5b\xbd\x04\xcd\x2a\x52\xcb\x38\xcf\x17\x25\xd1\x92\xcb\x62\x47\x6c\xea\x27\xe6\x4e\xb7\x27\x1b\x42\x25\xd9\xe5\xb2\xe1\x32\x52\x89\x8b\xa6\x68\xea\xce\x9e\x00\x4c\xdd\xd9\x51\xb1\x14\xc8\x9b\xa0\xb4\x50\x49\x6d\xe2\x32\x7b\xcc\xa3\xd0\xd4\x35\xf7\xc0\xac\x3b\xdb\x8f\xb2\x06\x1d\x5b\x81\xec\x7f\x0b\xa2\x1a\x6c\x77\x20\xa0\x9a\xdd\x21\x91\x65\x3f\x9e\xa6\x58\x3a\x78\xd7\x21\x94\xd6\x90\x2d\x2f\x01\x47\xd1\xc1\xbb\x67\x0d\xa2\xee\x6c\x1f\x86\x96\xbe\x0f\xe2\xb1\x31\xcd\xfa\xa0\x47\x10\xff\x6a\x98\x0d\xfd\x78\xc9\xcd\x42\x2b\x93\x2f\x18\xb2\x46\x57\xd7\x83\x21\x4f\x50\x51\xce\x91\xb3\x5f\xb5\x2a\x4e\xcd\xd4\x8e\x94\x7a\xe1\x0b\xbb\x06\xe2\x0d\xde\x89\xed\x8a\x63\xc9\xa7\xc9\x97\x04\x4c\xbf\x84\x68\x33\x62\x19\xfa\xe1\x0e\x00\x4b\x11\x52\x6e\x24\x5b\xc2\x4e\x57\x38\xad\xbd\xaf\x1d\x8d\xc4\x39\x79\xb1\x02\x90\xa5\x9f\x4e\xaa\x6a\xb9\x6f\x21\xdd\x40\x0e\x9d\xc5\x45\x83\x6c\x26\x79\xaa\x8f\xd8\xbd\xa9\xad\x4e\xda\xee\x75\xf5\x91\xfb\xcc\x4d\xd5\xc9\xee\xc1\xee\xd7\xa6\xb3\x28\x81\x3c\x45\x94\x40\x8e\x1b\x25\x90\x66\x51\x02\x69\x1c\x25\x90\x1a\x51\x82\x41\xc7\xaf\x51\x42\x52\xdb\x1c\x25\x18\x6c\x77\x60\x94\x60\x76\x87\x44\x96\x26\x51\xc2\xa8\xcb\x28\xa1\x86\x6c\xe5\x28\x61\xf4\xbc\xa3\x04\xf2\x44\x51\x02\xe1\x70\x7c\x73\x7e\xf1\xdb\x70\x7c\x8c\x61\x38\x47\xfe\xa0\x38\x41\x50\x18\xde\xde\x5e\xdf\x1e\x4d\x3e\x45\xfd\x70\xf1\x46\x47\x0b\x63\x72\xe4\x8f\x14\xc6\x18\x80\xa2\x46\x18\x93\x2c\xfc\xd7\x19\xf8\x0b\x9e\x56\x6f\xe0\x4f\x37\x21\x9b\x0d\xfd\xc5\x6d\xb4\xfa\xa1\x8c\xde\xb3\xad\xad\x52\xe2\x9b\x75\x35\x52\x59\x1d\x4d\x15\xca\x65\x3c\x34\xd1\xa7\x76\x68\x56\xf0\xe5\xba\xfa\x1c\x12\x9a\x91\x2f\x15\x9a\xf1\x4f\x81\x8f\x1f\x9b\xf1\x3d\x94\x63\x06\x67\x72\x8f\xa6\x3a\x3a\xbb\xc4\xcb\x20\x5a\xd7\x0c\xc2\x80\xd0\xfe\x28\xcc\xa4\xcd\xd7\x15\xf1\xc3\x22\x33\x93\x3d\x0f\x0c\xcd\x76\x38\x43\x22\xcd\xfe\xd8\xac\x48\x95\x3e\x3a\x61\x97\x52\x0a\x7a\x45\x31\x77\xea\x34\x50\xe1\xa0\x51\x23\x8c\x38\xd1\x67\x1c\xc4\x81\x16\xc7\x5b\x2f\x37\x79\xd1\x61\xeb\xe5\xc9\x26\x6d\xb7\xeb\xe5\x21\x7d\x02\xb4\x0d\xe9\x51\xc1\x16\xc8\x9b\xb0\xf6\x26\x0a\xa6\x98\x52\x4c\x6b\xc2\x6d\x48\xf7\xa3\xad\x41\x9b\x66\x60\x2b\xcf\xfd\x31\x01\x6d\xf6\x5b\x89\xe7\x85\xb9\x6d\x7b\x5c\x48\xab\xcf\xc2\xf8\xb2\x80\x6f\x68\xd2\x03\x91\xd4\xec\x8f\x59\x70\xdc\x07\xf7\x77\xa2\xbb\xc3\xaf\x1f\xb0\x01\x9e\x46\xd8\x11\x68\x5b\x9c\x96\x67\xe6\xe4\xb5\xa4\xfc\x30\xba\x1c\x8d\xed\x90\xfa\xf6\x07\xe8\x18\x66\x09\x7b\xb5\x85\x4b\x17\x0d\xba\x93\xed\x32\x88\x6a\x2c\x16\xa4\x62\x84\x5e\x4c\xd3\x53\x27\xf2\x62\xef\x1b\x6d\xba\xc2\x7b\x83\x13\x1d\x06\xf7\x21\x3d\x06\xda\xaf\xe6\x4f\x80\xf6\xab\xf9\x51\xd1\x1e\xc8\x9b\xd0\xfe\xa3\x3c\x17\x0c\xcd\xbd\x60\xc2\x8f\xb7\x65\x0e\x8b\xeb\x22\xff\x6a\xbe\x1f\xf9\x0d\x9a\x7d\x45\xfe\x3a\xc8\xbf\x9a\x3f\x47\xe4\x37\x34\xe9\x81\xc8\x6f\xf6\xcd\x44\x16\x13\xf2\x3f\x15\x4a\x19\x14\x3e\x0c\xa5\x56\xf3\xae\x51\x8a\x36\xcc\x2b\x0d\x21\xc0\x4b\x93\x4a\xf5\x80\x90\x4b\x2c\xe5\x45\xec\x9b\xd1\x80\xa7\x31\xfa\xf3\x34\xbd\x34\xd4\x89\xf3\x21\x71\x77\x9d\x8f\xa3\x30\x2f\x4b\xaa\x5e\xfe\x68\x52\xe3\xbe\x50\x43\xbd\xce\xfc\xab\x93\xa7\x2f\x49\x51\x1c\xa5\x99\xfa\x21\x8d\xe1\x5e\x28\x80\x0a\x7a\xd6\x4c\xda\x4f\xb5\x8a\x08\xcc\xff\xd9\xba\x61\xb5\x2b\x32\xad\x99\x4d\x9b\x54\xb9\x23\x7f\x35\xad\x72\x8b\x29\xb8\xae\xbf\xe3\x0b\x01\x9e\x4d\xab\xbf\x80\x3e\xd3\xd5\xc6\xea\xc4\xd0\xdd\x9f\xd5\x37\x6b\x80\xf4\x53\x89\x9f\x44\x03\xf0\x2f\x24\xf6\x36\x40\xab\xf4\x5c\x1d\x0a\x54\x66\xe7\xbe\x7a\x92\x63\x34\x42\x8a\x2c\x50\xac\xe5\x69\x13\x9c\xca\x7d\x37\x54\xee\x86\xb7\xed\x0f\xe3\x10\x5a\xdd\x8e\x3a\xa0\x72\x35\xba\x18\x76\x40\xe6\xe3\xe8\x76\xdc\x01\x99\x5b\xb1\x15\xd1\x96\xca\x78\x74\x39\xe4\x91\x8d\xec\x58\x1d\xd8\xe8\x5c\xd0\x6b\x7b\xd2\x88\x1a\x21\xda\x27\x5f\xeb\x98\x45\x05\xc4\x30\xbc\xdc\xca\x27\x99\x51\x51\x04\x54\x2a\xd8\xc8\x5c\x43\xb8\x81\x54\x75\xf9\x40\x0f\x1f\xb9\x23\xde\x33\xe5\x21\xa0\xd1\xa7\x94\x9e\x29\x2e\xc9\x72\xfa\x59\x72\xe2\x5d\x12\x22\x8a\x58\x88\x1f\x60\x08\x21\x4d\xc2\x48\x9e\x57\x97\x39\x09\xd0\x42\x60\xa2\x29\x5e\x04\x1e\xc4\x90\xfc\x78\xbe\x9b\xf4\x56\xc6\x28\x37\x18\x40\xdd\xe5\x88\x95\xae\xe6\xc9\x67\x1f\x1d\x2f\xce\x1d\x65\x57\x71\x2e\x5e\xd3\xb1\x3b\xf3\xcd\x03\xd4\x56\xc7\xa8\xd9\x89\x35\x93\x43\xf3\x04\xef\xed\x56\x1f\xb4\xd5\x80\xc3\x6a\x2e\xf6\x58\x2c\x39\xb4\x3f\xe0\x35\x0f\xdb\xe5\x23\x0d\xf0\x60\xc5\xc0\xe3\x74\xb9\x1d\x7f\x4e\xc6\x03\x75\x78\xab\x9c\x1f\x0c\x79\x0d\x23\x3a\xd7\x90\x22\x89\x51\x54\x10\xb2\x74\xa6\x8b\x34\x08\x51\x5c\x2e\xe1\x21\xaf\x57\xf8\xca\x05\x9e\xda\xf7\x80\x82\x69\x1c\xa2\x4e\x33\x56\xc1\x48\x1c\x93\xd2\xa7\x2e\x0d\x82\x84\x94\xbe\x18\xa3\xfe\x91\x92\x17\x84\xbf\x37\xc7\x21\x5a\xb8\x2b\xa7\x30\x68\x56\x96\xba\x89\x82\x15\x71\x71\xb4\xab\x64\x4d\x69\x21\x66\x63\x6a\x48\x7d\x9d\x8a\xcb\x27\x6f\x10\x58\xa6\x0a\xed\x14\xbd\x26\x2b\xd5\x34\x33\xe2\xf1\x09\x31\x5b\x48\xae\x3f\xff\x7f\xca\x96\xbf\xe2\x6f\x4c\x9c\x2b\x47\xf2\x1a\x2e\x43\x21\x9c\x9d\x2e\xea\x04\xb6\x64\x86\xf0\x9f\xa8\xec\xb0\x2e\xe2\x67\x59\x1a\x70\xb8\xd0\x41\x50\x8e\xe2\xae\xf2\x09\x98\x1e\x1a\x9d\xe8\x29\x40\x12\x9d\xc8\xc9\x74\xfe\x00\xd5\x36\x1f\x12\x91\xe2\xa7\x3e\xe9\x2b\x1e\x7b\x19\x5f\x86\xca\x43\x8d\x05\x84\x87\x19\xdf\xba\x24\xc2\x53\x26\x36\xea\x3a\xfa\x6e\x28\x71\x82\x16\x63\x57\x66\xbc\xe5\x06\x5f\xe4\xf6\xef\xe4\x31\x3b\xe0\x4e\xe7\x1e\x99\xfb\x17\xf2\xb9\xb4\x73\xe9\x0c\xd7\xec\x01\x97\xb6\x2a\x9a\x80\xa5\x5a\x49\x2b\x9d\x84\x69\x5f\x38\x11\x66\xd9\xd2\x42\xfc\xec\xb9\x97\x8e\xd2\x68\x91\xa8\xf3\x9f\x00\x00\x00\xff\xff\x3d\xd0\xcc\xb2\x19\x69\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26905, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

