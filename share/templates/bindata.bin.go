// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x6d\x73\xdb\x38\x92\xfe\x9e\x5f\x81\xd3\xec\x5e\x6d\xb6\x56\xd2\x25\x37\x7b\x3b\x95\xb1\x5d\xe5\x58\x72\xa2\x9a\xd8\xd6\x59\xb2\xef\xe6\xd3\x14\x25\x42\x12\x62\x8a\xe4\x90\x94\x1c\x8f\xca\xff\xfd\xba\xf1\xc2\x57\x80\x26\x45\xca\xe3\xe4\x32\x55\x53\xa6\x08\xa0\xbb\xd1\xe8\x7e\xba\x1b\x04\x99\xa3\x7f\x1b\x5c\x9d\x4d\x7f\x1d\x0f\xc9\x2a\x5a\x3b\xaf\x4e\x8e\xf8\x1f\x42\xe0\x82\x5a\x36\x5c\xe0\xe5\x9a\x46\x16\x99\xaf\xac\x20\xa4\xd1\x71\x67\x13\x2d\xba\x3f\x75\xd2\x4d\xab\x28\xf2\xbb\xf4\xf7\x0d\xdb\x1e\x77\xfe\xb7\x7b\x73\xda\x3d\xf3\xd6\xbe\x15\xb1\x99\x43\x3b\x64\xee\xb9\x11\x75\x61\xdc\x68\x78\x4c\xed\x25\xcd\x8c\x74\xad\x35\x3d\xee\x6c\x19\xbd\xf7\xbd\x20\x4a\x75\xbe\x67\x76\xb4\x3a\xb6\xe9\x96\xcd\x69\x97\xff\xf8\x07\x61\x2e\x8b\x98\xe5\x74\xc3\xb9\xe5\xd0\xe3\x37\x8a\x50\xc4\x22\x87\xf2\x6b\xf8\xb5\xdb\xf5\x06\x56\x64\xf5\x3e\x7a\x61\x84\xc4\x1f\x1f\x09\x5c\x01\xc9\xa3\x7e\xd2\xef\xe4\xc8\x61\xee\x1d\x09\xa8\x73\xdc\x61\xc0\xb2\x43\xa2\x07\x1f\xe4\x60\x6b\x6b\x49\xfb\xbe\xbb\xec\x90\x55\x40\x17\xc7\x9d\xfe\xc2\xda\x62\x87\x1e\xde\x2b\x0c\x0d\xa3\x07\x87\x86\x2b\x4a\x23\x45\x20\xa2\x5f\xa2\xfe\x3c\x0c\xe3\xf1\x70\xdd\x67\xae\x4d\xbf\xf4\xf0\xae\xa4\x10\xce\x03\xe6\x47\xe9\x21\x9f\xad\xad\x25\xee\x76\xf2\x7a\x26\x61\x30\x07\x42\x9f\xc3\x7e\x80\x1a\x0e\x28\x5c\xbd\xed\xbd\xe9\xbd\xf9\x97\xba\xd1\x5b\x33\xb7\xf7\x19\x78\xda\x30\xf1\xee\xda\x62\xae\xe8\xbf\xdb\xb1\x05\xe9\x4d\x4f\x3f\x7c\x18\x0e\x66\xcc\x7d\x7c\x84\x7e\x52\x18\x31\x62\xb7\xa3\x4e\x08\x1a\x02\x0e\xfd\x35\x73\xee\x64\x23\x6f\x70\xed\xc7\xc7\x8e\x52\xea\x51\x5f\x08\x27\xe5\xef\x4b\xd3\x38\x39\x9a\x79\xf6\x83\xbc\xe9\x5a\x5b\x32\x77\xac\x30\x3c\xee\xc0\xe5\xcc\x0a\x88\xf8\xd3\xb5\xe9\xc2\xda\x38\x91\xfa\xb9\x60\x5f\xa8\xdd\x8d\x3c\xbf\x43\x02\x0f\x96\x11\x7b\xb3\x25\x18\x0b\x2c\x43\xcc\xcf\x66\x31\x31\xb4\x08\x98\x12\x85\x91\xce\x86\xd9\xaa\x4f\xae\x97\x1d\x78\xbe\xed\xdd\xbb\x8a\x0b\x4a\x48\x83\xa4\x33\x17\x76\x13\x45\x9e\x9b\x15\x12\x04\x59\x2e\x1d\x0a\x76\xe7\x38\x96\x1f\x52\x5b\xad\xa4\xe8\x2c\x75\x2a\x3a\xa1\x2c\xa2\x97\xba\x6d\x05\x4b\x5c\xa8\x1f\x24\xad\xb8\x39\xc5\x96\xaf\xb7\x6f\xc5\x6c\xc3\xa0\xeb\xb9\xce\x43\xb6\x0b\x74\x9a\x0a\x39\x12\x65\x80\xce\x61\x58\x09\x25\xb4\xcb\x2e\xb0\x2d\x90\x7a\x31\x23\xfb\x42\x89\x99\x45\xb0\x08\xb3\x93\xe5\x9a\x05\x96\x0b\x2a\xcf\x2d\xa2\x5a\x14\xa9\x56\xd9\x29\xb3\x12\xaa\x6b\x87\x58\x01\xb3\xba\xf4\x0b\x70\xb7\x29\x50\x8e\x82\x0d\x8d\xbd\x2f\xbf\x10\x68\x30\xc8\x7e\x25\xc1\xa1\x30\x8d\x22\x7a\x1c\xf5\x61\x50\x7e\x5e\x56\x66\x4a\x1b\xa7\x30\x81\x35\x75\x37\xca\xbe\xc5\x35\x17\xd3\xb1\x66\xd4\x71\xa8\x3d\x7b\xc8\xab\x20\xc7\xc1\x61\x05\x92\xd2\xa2\x25\x51\x3f\xa0\x21\x80\x5a\xc6\x6d\xe2\xe1\xc1\xc6\x75\x99\xbb\x3c\xea\x3b\xac\x48\xb7\xc2\x78\x58\xa4\xc2\x8a\x00\x4a\xe5\xfb\xa5\xf4\x35\x18\x4d\xa6\xd7\xa3\xf7\xa8\x2e\xab\x68\x1a\x05\x31\xfa\x1b\x27\xa3\xc1\x8c\x8e\x93\x65\xca\xbb\x55\x02\x09\xe2\x06\x29\xf1\xbb\xf4\xb2\x20\x34\xc9\xae\xf0\x47\xa3\x6b\x64\xc6\xfc\x4e\x1e\x1a\x34\x73\x8e\x67\x3c\x1a\xe3\x64\x75\x0a\xce\xa9\xae\xa8\x5d\x35\x3d\xd5\xc3\xb1\x74\x9c\x49\xce\x1b\x6a\x39\x40\x71\xa5\x62\xae\xc0\xad\xd0\x9a\x9a\xd7\xa7\x53\x9d\xcd\x6b\x96\xa9\xa8\xe6\x7d\xac\x5f\x27\x4d\x43\xf3\xe7\x24\x36\x7e\xc4\xd6\xb4\xb0\x40\x31\xf9\x8a\x64\x24\x5c\x09\x6a\x1a\x9c\xd2\x7a\x45\x46\x9f\x37\x7c\xa8\xce\x31\xa4\x4e\xb5\x12\x66\x1d\x44\xdf\xb3\xe8\x46\x26\x8b\x57\x97\x01\x5b\xae\x22\x33\xd4\x94\x99\x7d\x8a\xb6\xc3\xc2\xa8\xcb\x5c\x48\x83\xa8\xd1\xab\x14\x69\x83\x4e\x05\x3c\xff\x80\x49\x80\x5e\x7b\xd8\x54\x4f\x63\x4f\xf1\xf2\x43\x13\x2b\x3f\x6c\x97\xd3\x76\x69\xe2\xb4\xb5\x96\x00\xf6\xd1\x21\x4c\xa1\xe8\x31\xc4\x9a\x47\x6c\x5b\x0c\x71\xb9\x08\xbc\xa5\x41\x88\xd6\x6f\x88\xc1\xfb\x84\x5d\xac\x06\xc2\x77\xfd\xfe\xfd\xfd\x7d\x0f\xe2\x68\x00\xff\xf7\xe6\xde\xba\x2f\xf2\x70\xc8\x5a\x1d\x6a\x85\x34\xec\x3b\x56\x44\x43\x5d\x54\xb9\x9a\x4c\x87\x97\x53\x5d\x28\x69\x06\x36\x6a\xae\x07\x41\x1c\x49\xbc\x0d\xc8\x69\x47\x8d\x9c\x9a\x82\xa1\xdb\xe1\xf5\x64\x74\x75\xf9\x3c\x38\x94\x0b\xe7\xa9\x9f\xf0\x03\xb0\x42\x56\x0c\x2a\x22\xf1\x5a\x40\x9f\xed\x13\xdf\xb2\x6d\x48\x65\xb0\x5e\x08\xe9\x16\xe6\xfd\x10\xae\xb4\x65\x42\xe0\xdd\xe7\x4b\x03\xa4\xbd\xa6\x6b\x48\xd3\x45\x1d\x2a\x3a\xce\x1c\x6f\x7e\x87\xf9\x7e\x77\x6d\x77\xdf\xaa\x0b\x6f\xb1\x80\x9a\xab\xfb\x26\x93\x42\xec\x76\x11\x5d\xfb\xa8\x5f\xd2\x81\x2a\x06\xc4\x0a\xdf\xbd\x13\x17\xbf\x71\x32\x40\xbd\x43\x7a\xf9\x80\x99\x91\x2b\xc3\xee\x3f\xb3\x19\x4a\xaa\x1b\xf8\x11\x75\xde\x14\xb0\x19\x8d\x38\x9f\xf5\x08\xd3\x26\x7c\x04\x37\x52\xd0\x0f\x99\x45\x90\x97\x23\xab\x0e\x59\x78\x01\x58\xf1\x66\xbd\x7e\x60\x0b\x50\xe7\x82\x2d\xe7\x2b\x3a\xbf\x9b\x79\x5f\x78\x5b\x37\xc4\xd2\xf5\x07\xd5\x56\x92\xfc\x21\x4d\xe1\x04\x82\x34\xaf\x27\xe9\xef\xa4\xb3\xb0\x1c\xcc\xc6\xfe\xf6\x39\x84\x72\x4a\xd8\xd7\x99\xc3\x60\x71\x7a\x1f\x99\x4d\x05\xdd\xd1\xf9\x6b\x28\xbd\x05\x06\xa9\x72\x52\x21\x24\x5b\x94\xa4\x92\x92\xd2\xd4\x9a\x8d\xce\x7b\x53\x2c\xd9\xf5\x59\x25\x73\xfd\x4d\x24\xa0\x4c\x3f\xd7\xbc\xda\x92\x16\x51\xe1\x25\xbf\x39\x60\xac\x98\x6d\x53\x37\x46\x32\xfe\x4b\x63\xfb\xa8\xfb\x57\x3a\x49\xda\x66\xc7\xcd\xc3\x98\x3b\xc6\xcb\xa7\xf8\xc6\x8b\x23\x08\x3e\xbd\x36\xb1\xa0\x82\x77\xae\xe4\x4f\xf3\x04\xa3\x59\x2b\x36\x2b\x2f\x60\x7f\xa0\x8f\x3a\x5d\xbc\xad\x47\xb0\x94\x5d\x63\xa7\xee\x32\xf0\x36\x7e\x17\x5d\x99\xda\x06\x9c\xca\xb8\x0c\xd8\x1d\x1f\x42\xe2\xab\x6e\xb8\xce\x45\x22\x51\x5a\x1a\x82\x7a\xc1\x77\x80\x10\x27\xa6\xf6\x22\x60\xce\xcc\x35\xc4\xe9\xf4\xa2\xe6\x96\xce\xdc\xff\x23\x57\xa2\xce\x3e\xaa\xca\x54\xc1\xbb\x86\x3c\xdc\x22\x9a\x09\xef\xb2\x59\x88\x3f\xec\x2a\xfe\xb5\xf7\xcc\x72\x7e\x29\x64\xc0\x1c\x71\x74\xce\x2b\xa0\xd2\x09\x6b\x0b\x89\xd2\xa6\xbd\xac\x67\xb7\xbb\x67\xd1\x2a\xab\xac\x6b\xba\x80\x50\xbb\x42\x29\xb5\x38\x1e\x88\x76\x8e\xdf\x52\x81\x66\x99\xfa\x28\x89\xc6\x35\x0a\x19\x37\x06\x1b\xad\x51\xa6\x53\x0c\xb6\xe8\x86\x20\xf0\x7c\x15\xef\x23\xcd\xd0\xa7\xe3\xd2\xf2\x7c\x7a\xfa\x7e\xd2\x63\xe7\xe3\xd3\xb3\x5f\x86\xd3\x49\xef\x86\xb9\x91\xce\x35\x05\x5d\x2b\x59\x76\xdf\x9a\xdf\xd1\xc8\xec\x14\x63\xd1\xae\xcf\x01\x4c\x59\xc0\x7e\xb2\x0f\xaf\xaf\xaf\xae\x6b\x88\x4e\x83\xc0\x0b\xcc\x92\x0f\x79\x73\x2b\x82\xab\xc4\xb8\x5c\xfe\xf7\xbf\x4e\x87\x35\xc4\x9f\x3d\x40\x12\x66\x94\xfe\x3d\xb6\xd6\x17\xbe\x98\x7d\x19\xab\x70\xcd\x2e\x55\x79\xf8\x50\xa6\x92\x52\x0f\xa8\x82\x83\x10\xd4\x75\x69\xf0\xd1\x9a\xe3\x6b\x1d\x3e\x89\x98\xcd\x9b\x01\x9d\x0c\x01\x46\xaa\x1d\x03\x7b\x89\xc9\xcb\xc0\xdf\xd0\x41\xe4\xe6\x65\x66\xc6\x32\x1d\xd4\xef\x81\x98\xf3\xbd\x78\xfc\x6f\x32\x9d\xe4\x69\x5f\x61\xd3\xb3\x64\x89\x12\xdd\x4b\x5b\xaf\xa1\xfa\x94\x37\x1d\x4a\xf3\x92\x45\x35\xc5\x3f\xe1\xdd\x19\xbd\x8b\xd9\xee\xad\x76\x31\xbc\x05\xad\x0b\x17\xad\xa1\xf4\x04\x02\x0e\xa5\x73\xc1\xa1\x9a\xca\xcb\x01\x29\xa3\x71\x3e\xd3\xbd\x15\xce\x47\xef\xad\x6f\xdd\x76\x79\xf6\x96\x76\xbb\x57\x5b\x9c\x3d\x6f\xb5\x34\xf7\x37\xe6\x72\x29\x6e\x3c\x54\xbd\x74\x36\xbe\x31\x17\x4c\xc0\x5d\xb3\xe4\x30\xa4\x42\x61\xa4\x99\xd6\x37\x5d\x19\x25\x2b\xb5\x4f\x69\x24\x96\xa1\x95\xda\x88\xcc\xbc\x80\xdb\x82\x07\x95\xca\xfa\xab\x2e\x97\xb2\xce\x94\xf3\x8b\xaf\xb7\x8a\x92\x3e\x67\x2a\xa3\xda\x9d\x9b\xb1\x8e\x02\x29\xbe\x86\x42\x8a\x8b\x79\xb8\x4a\xaa\x8d\xac\x16\x17\xac\x9e\xd3\xd7\x75\xf7\x38\xc8\x02\xab\x3d\x03\x2c\x8c\x7c\x01\xb1\xf5\x99\x77\x22\xed\x92\x9d\x48\xfb\xc0\x3b\x91\x83\x92\x9d\x48\xbb\xda\x4e\xe4\xa0\xce\x4e\x64\x71\xae\xdf\x74\xbc\xb5\x9b\xec\x44\x0e\xbe\xef\x44\x7e\xe5\x3b\x91\x83\xd2\x9d\x48\x9d\x7f\xed\x3d\x33\x63\x04\x1d\x7c\x15\x3b\x91\x83\x17\xb8\x13\x69\x97\xef\xe6\x0d\x44\xf1\x69\x9f\x8f\x2e\xaf\x06\xd5\xb7\xc3\x6c\x98\x98\x67\x97\xec\x87\x8d\x78\x73\x93\xdd\x3c\xbb\xd2\x6e\x5e\x2c\x7f\xad\xdd\x3c\xfb\x6b\xdb\xcd\x8b\xf5\x9d\xd2\x8e\x61\x73\x43\xb7\xa2\xa6\xdd\x8d\xc1\x7e\xbb\x1b\x79\x16\xa5\xdb\x1b\x55\x2d\x2c\x95\x7a\xa9\xd9\xee\x99\x7f\xa9\xe1\x8d\x77\x94\xec\xdc\x8e\x52\x05\xa5\x3f\xbd\xa3\xd4\x54\xe7\x15\x76\x94\x2a\x3a\x45\x46\xe3\x4d\x76\x94\xec\xe7\xdf\x51\xca\x9e\x38\x50\x3f\xaa\x1c\x2b\x7e\xea\x4c\x81\x2e\x97\xfe\x29\x77\x88\xe0\x99\xf7\xad\xfc\xd0\x9c\x5b\xab\xb6\x43\xe5\xd6\xe3\x89\x39\xb7\xd6\x9d\xb8\x3a\x19\x07\xde\x9c\x86\xa1\x0e\x3f\x0b\x89\x74\x71\x62\xdf\x74\x22\x1d\xaf\xd5\x3e\x89\x34\x5f\x88\xfd\x12\x69\x71\x94\xcf\xb4\x65\x45\x30\xc1\xd2\x9d\x1c\xd4\x98\x77\x0b\x49\xd2\x78\xd2\x46\x92\xf4\xf2\xd3\x7e\xf3\x8e\x9a\xe9\xa0\xa2\x20\x7a\xf8\x62\xc0\x01\xf7\x24\xa6\x8a\xc0\x68\x89\xe3\x89\xeb\x45\x03\x3a\x0f\xa8\xc5\x2b\x81\xb2\xa2\xc0\x0f\x91\x47\x8b\xb3\xec\xd6\x9a\xe0\xda\x0b\xe8\x9e\x13\x4c\xca\x9e\xf2\xf9\x21\x8b\xc3\x15\x3e\xe3\x89\xef\x6c\xc2\x29\xf8\xe5\x61\xca\x9e\x43\x6e\xd1\xf9\x61\x4d\x78\xab\x09\x6c\x71\xce\xe2\xef\x9b\xae\xf8\xe1\xf7\x44\xe5\x30\x89\xca\x76\x69\x4e\x54\x54\xdb\xa1\x12\x95\xdb\x0f\xe6\x44\x45\x77\x60\xfb\xe4\x56\x9c\xd5\x26\x4b\xc7\x9b\xe1\x2b\x87\x91\x15\x6d\xaa\x24\x2d\xc5\x49\x7e\xd3\x49\x4b\xbc\x6e\xfb\x24\x2d\x7c\x51\xbe\x81\xa4\xe5\xf6\xc3\xff\xf7\xa4\xc5\xf4\xce\x83\x20\x7a\x90\xa4\xe5\xa5\x45\xb6\x6d\x5d\x1f\xa8\x69\xfd\x71\x64\xdb\x2e\xf7\x8c\x6c\xdb\xe5\x0b\x88\x6c\xa5\xef\x3e\xab\x01\x5b\x2b\x20\xa8\x2e\x72\x4c\x64\xee\xf3\xf8\xf8\x73\xfe\x25\x64\xf9\xee\x31\xbe\x8e\xcc\xdf\x5c\xdf\xed\xfa\x7f\x7f\xf5\xf7\x3e\x7a\x9a\x98\x70\xc9\xa1\x7d\x50\x80\x36\xda\xe5\x1c\xc0\x14\xd4\xa4\x08\x16\xc1\x95\x3e\xc3\xbe\xa7\x51\x14\xc8\x25\xfe\xc4\xdc\xbb\xb0\x37\xb6\x02\x6b\x1d\xf6\xde\x5f\x5d\x7d\xea\x85\x2b\xef\x5e\x20\x1e\xf0\x26\x85\x40\x16\x6f\x61\x16\x5a\x40\x4e\x60\x21\x9c\xf7\x23\x80\x49\x75\x2e\x8f\x8f\x4a\x97\x17\x14\xb2\xd1\x07\x15\xb9\x52\xa1\x23\x31\xe7\xcc\xeb\x12\x0a\xcf\xf7\x9a\x1a\xcc\x21\x67\xd1\x9d\x44\x12\x01\xe0\xbb\x1d\x57\xee\xe3\x63\xa5\x03\x13\xd0\x1d\xff\x9e\xce\xf1\x7d\x19\x93\x24\xff\xbd\xa1\xc1\x43\xcc\xc7\x1c\x0a\xa5\x44\xd2\xf8\xc2\xcd\x6c\xcd\x22\x43\xde\x54\x8a\xc0\x95\x70\x57\xbc\xee\xc3\x7f\xe7\xf3\xa8\xaa\x76\x03\xf2\x52\xae\xd6\xd8\x40\x84\x8d\xa4\x41\xb9\x96\x89\x48\x82\x29\x55\x49\x91\x14\xe4\x5a\x0d\x24\x0d\xef\x2d\xbf\x5d\x51\x91\x22\x1f\xc3\x16\x03\x59\x6b\xed\x3d\x3d\x4a\x90\x5a\x71\x86\x35\x1e\xa0\x97\xdb\x44\x19\xf2\x26\x79\x40\x51\xf2\xf1\xf0\x7a\x74\x35\xe8\xc9\x2e\x5c\xfc\x02\x96\xa6\xc2\x56\x06\x4c\xe5\x65\xde\x93\x6b\x5a\x97\xd9\x63\xcb\xe6\x04\x43\xd3\xe1\x44\x23\x14\xbf\x38\x91\x21\xad\x02\x3a\xcf\x1d\xe6\x23\x32\x0b\xe7\x05\xe0\x1f\x0d\x70\x02\x60\x01\x69\xd0\x68\x94\xd8\x9e\x20\x21\x2f\xa4\x53\x6b\x49\x3a\x9c\x0f\x32\x14\x98\x0f\x0c\xcf\xbd\x40\x72\x4c\x33\x44\xb1\xb0\xf5\xe2\x7f\x26\xf8\xc1\x0f\xd1\xe3\x95\xa8\xcb\xb3\x55\x78\x9d\xc9\xfa\x1b\xa8\xda\xc2\x0e\xf6\x11\x89\xe5\xd5\xed\xf0\xfa\x7a\x34\x18\xe2\x1d\x91\x2f\xf2\x8f\x73\xec\x76\x50\x87\x2c\x29\xf9\x0b\xfb\x07\xf9\xcb\x1c\xf7\x2e\xde\x1d\xab\x64\x62\x7c\x03\xeb\x1a\xa2\x00\x51\xb0\xdb\xdd\xd1\x07\xc2\x0f\xa6\x00\xe1\xd9\x43\xf7\xb2\x23\xfa\xf7\x2e\x85\xb4\x47\x91\xad\x2c\x39\x49\x8f\x89\xeb\xdd\x07\x96\x44\x28\x10\x3f\x1e\x71\xd4\x8f\x6c\xe3\x28\x15\x00\x79\x4e\x92\xa8\x4a\x0d\xbf\x09\x69\x70\x26\xee\x25\x96\x94\x34\x65\xb2\x8f\x93\x26\x8c\x26\x0f\xa1\xe4\x43\xf2\x8c\xa0\xa9\x3d\x3e\x23\xdb\xa1\x86\x09\x61\x93\x81\x51\x3f\x0a\x52\x16\x91\xfd\x53\xc5\x3e\x84\x7b\xe1\xe2\xe2\x45\x2c\x34\xfe\x78\x43\xc2\x08\x72\x21\x9a\x64\x82\x30\xaf\xd4\x07\x7b\x80\xb3\x82\x8b\x68\x95\x46\x92\xf8\x17\x36\x3c\x61\x0e\xbc\x1b\x2e\x58\xe6\x13\x20\x1b\x97\x65\x8a\xaa\x93\xbf\xe6\x72\xc9\x7d\xb8\xc0\x6a\x1d\x9e\x09\x2e\x55\x13\x2e\x7d\xa9\x55\x7e\x57\x7d\x01\x27\x4a\x3e\x81\xf3\xc4\xa9\x2f\xee\xee\x02\x2c\xa3\x24\x77\xe5\x0b\x58\x07\x38\xd4\xe3\xb4\x9a\xe8\x61\xb3\xf0\x2e\x41\x8e\xc1\x39\x27\x52\x40\x0f\xf5\xa4\x4f\x20\x88\xcd\x02\xfe\x95\x14\x31\xba\x37\x60\xc1\x25\xff\x26\x4a\xce\x8d\x72\x10\x52\xa2\x04\x8e\xa4\x7f\xc3\x3f\xe4\xcd\x5b\xe4\xd6\x15\xec\x6c\xba\xcd\x30\xa2\x5b\x64\xf4\x5a\x8b\x42\x7b\x71\xfb\xaf\x34\x33\xed\xac\xf4\xcc\x0a\x08\x01\x6e\xcf\x47\x9d\x6e\x2d\xe6\xd4\x1b\x02\x9e\x04\x2b\xfc\xef\xee\x2c\xf4\x7f\x3e\x0a\x37\x7e\x95\x20\xbb\x09\xa9\x4f\x83\x39\x94\x8c\x30\x93\xe4\x07\x89\x29\x8e\xc5\x0d\x2e\xbd\xa2\x59\x09\xea\x94\x54\x53\x0f\xd2\xef\xd4\x44\x1a\x81\x56\xf6\x51\x6f\x43\xe4\xd2\xea\x25\x5a\xe1\xfb\xf9\xf8\x09\xae\x0e\x51\x57\xba\x0c\x67\x78\x79\x73\xd1\xb3\x17\xa4\x73\x3e\xc1\x5c\xd4\xb0\x3f\x53\x9b\xda\xc5\xb8\x4d\x6a\xa7\xb7\xa7\xa3\x4f\xad\x51\xbb\x99\x0c\x07\xad\x11\x9b\x5e\x4d\x4f\x51\xb4\x46\xa0\x97\x81\xaa\x36\x90\x4f\x9e\xdc\x68\x08\x7d\x82\x8a\x06\xfb\xe4\xb9\x92\x67\x03\x3f\xc9\xef\x99\xd0\xcf\xc0\x6d\x2f\xf8\x1b\x41\xb1\x42\x6b\x0e\xd9\xb4\x8e\x7f\x48\xb2\x31\x00\x8a\xb3\x68\xed\x21\x60\xe6\x74\x51\xf3\xe4\x2d\x3e\xee\x9a\xfb\xa0\xdd\xc9\x80\x7f\x1a\xd1\x90\x06\x15\x7a\x5f\x78\x1b\x37\xa2\x76\x69\x77\xed\xae\xf9\x09\x8f\x74\x7b\x8c\xc3\x70\xb7\xc7\x30\x1e\x8f\x5a\x4b\xbb\xb2\x90\xd1\x1c\x82\xd8\x7e\xc9\x17\x5b\x24\xf8\x33\x32\xa4\x5e\x2c\x93\x7a\x49\x17\x65\x8b\x5e\x06\x75\xea\xc3\x0c\x53\x69\x4f\x96\x62\x75\x7f\x87\x01\x03\xea\x44\xd6\xc8\xad\x3d\xe4\x6a\x13\xd5\x19\x53\x8f\x43\x96\x78\x23\xa7\x65\x6d\xa6\x2d\x99\x82\x6b\x04\x4e\x17\x2c\x2c\xa3\x9f\x16\xcb\x15\x22\x4f\xf6\xbd\x1f\x4d\x27\x04\xe0\x8e\x84\xf8\xb0\x2c\xfd\xd9\xcb\x91\x5b\x5e\xc4\x1c\xe5\x3e\xcf\x33\x3b\xea\xa7\xef\x9c\xe0\xf7\xae\xf6\xac\xa5\x9e\x16\x0e\x56\xe5\x4f\x97\x2e\x42\x08\x21\xfc\x74\x23\x59\x7b\xf6\xc6\xf1\xc8\x8f\x1f\x1a\x28\xf0\x7d\x4e\xc4\xbf\xfe\xf8\xe1\xe0\x32\xd6\xd6\x63\x5d\x21\x9b\xa0\x2a\x6b\x37\xaf\x8b\xdf\xf1\x6e\x84\xaa\x82\x86\x06\x56\xe5\xfb\xe7\xed\xe3\xaa\x24\xfc\x1d\x58\x9f\x5e\xd9\x97\x84\xac\x06\x50\x55\x89\x69\x99\xd3\xb5\x00\x4e\x26\xd4\x7c\x26\xf6\x7a\x3c\xac\xc2\xbc\x0d\xd4\x33\x20\x5d\x1b\xec\x9b\xe1\x59\x1a\x80\xda\x00\x34\xf5\xad\x90\x46\x88\x26\x89\x68\x20\x4d\x7d\xca\xa4\x7d\x4c\x53\x94\xbf\x83\x5a\x85\xd5\xfd\x8e\x6a\x2f\x04\xd5\x44\x36\xf5\xe7\x62\x9b\x59\x86\x17\x81\x70\x19\x44\x6a\x0e\x71\x6b\xba\xde\xe3\xf1\x25\x3e\x6e\x8e\x01\xee\x62\x78\x51\x80\x36\xfc\x5c\xa7\x00\xb5\x3b\x86\xdf\x7c\xc7\x11\xbd\x5f\x18\x0a\x95\x43\xb5\x54\x4b\x45\x14\xc0\x01\xe7\x75\xb6\xad\x70\x40\xab\x9b\xf6\x92\x60\x93\x2d\x2b\x24\xd1\xea\x96\x7d\xfc\x18\xff\x59\x9f\x33\xa6\xbc\x03\x97\xa4\x4e\xff\x92\x7d\xa5\x67\xd8\x50\x52\x76\xdf\xdc\x83\xfc\xb0\xa6\x03\xf9\x81\x37\x4f\xbc\x67\x3c\xe1\x1c\x0b\x1e\xe4\xab\xac\xc0\x67\xe8\x3f\x38\xa8\x37\x1e\x0d\x70\x19\xdd\x65\xc9\x41\x00\x69\x62\x04\x6c\x4c\x8d\xa9\xe6\x28\xf1\x88\x9b\xdc\x08\xd9\x9c\xfa\xaf\x4e\x2e\xe2\x87\xe0\x39\x81\x76\x16\xf2\x37\x3e\x99\xae\x98\x98\x24\xb3\x0a\x98\x17\xb0\xe8\xa1\xe6\xb0\x4b\x36\xaf\x08\x1b\xf1\x90\x09\xfb\xa3\xee\x90\x6b\x1a\x32\x9b\xba\x25\x59\x10\xc2\x86\xda\xd6\x3d\x51\xc3\xa6\xf2\xfb\xf2\xe5\xcf\x0a\x6a\x2d\xc0\x8f\x7c\x01\x30\x07\x2c\x5b\x80\x7c\x66\xd8\x08\x87\xd4\x6b\x17\x5a\x18\x7a\xfb\x8c\x0f\x0d\xfd\x90\x74\x60\xa6\xad\x3c\x49\x43\x5a\x37\x6d\xd2\x9a\x0c\xaf\xdb\x7a\x00\xc9\xe7\x79\x3d\x6a\x8d\xd6\xe5\xe8\x6c\xd8\x1a\xb1\xdb\xd1\xf5\xb4\x35\x62\xd7\xc3\x49\x6b\xb4\xa6\xa3\x8b\x21\x1e\x72\x15\x8e\xd8\x9a\xee\x4e\x39\xd5\xa6\xcf\x5b\x65\x48\x69\x1e\x9b\xd4\x79\x45\x79\x4c\x1a\x42\x90\xfc\x06\x14\xfa\x24\xe9\xc9\xa3\x73\xf2\xd8\x6b\xea\xba\x1b\xae\x89\xec\x2a\x6e\x74\x64\xc4\xc9\xfc\x1b\x42\xa9\xfe\x96\x6d\xab\xcf\xe0\x9f\xc8\x97\x29\xe2\x1c\xf8\x24\x3e\x08\x18\x1f\xc5\xe3\x27\x30\xf1\x85\xa8\xc0\x73\x62\x46\xe2\x18\x5f\xea\x44\x79\x87\x80\x7e\xe6\x74\xe5\x39\x36\x0d\x8e\x21\x98\x8e\x93\x9f\xfc\x68\x1f\x24\x64\xcc\xb3\x11\xbe\xc4\x01\xc9\xd4\xcd\x5b\xcb\xd9\xc4\x77\x5f\x71\x7d\x6b\x0e\x0c\xd6\x3d\xd9\x98\xca\x08\x61\xb4\x3c\x64\xd6\x8b\x8f\x68\xc6\xa7\x09\x39\xf7\xc7\x47\x75\x0c\xa9\x06\x87\xed\x92\x6f\x61\x70\xf8\x0c\x08\x64\x02\xf8\x9e\x80\xb8\x15\x47\x05\xcf\x41\xaa\xc7\x9d\x7f\xc6\x01\x44\xfe\xdb\x00\xe2\x55\x27\xfe\x89\x5d\x23\x9c\x57\x90\x20\xce\x67\x64\xc2\xb2\xb6\xe6\xab\x24\x61\x91\x5c\x2e\xe0\x26\x8e\x2b\x24\x2e\xf2\x1f\xc7\x90\xd9\xcb\x66\xc3\xe3\x0e\x92\xe8\xdd\xf0\xcc\x42\x97\x55\x54\x8d\x67\xff\x4a\xc8\xe7\x09\xbf\x36\xe7\x2c\x98\x6e\x63\xb7\x4b\x2b\x17\x60\xb5\xbd\xc6\x81\xb7\x65\x36\x0d\xca\x7a\x56\x93\xf6\xa7\x44\x5a\x7c\xed\x8c\xa6\xc5\x95\x97\x13\xbc\x5f\x2a\x7a\x35\x56\xff\xfc\x8f\x84\xd7\x82\x39\xd4\xb7\xa2\x95\x86\x9d\x5c\x3b\xec\xf1\x1b\x76\x79\x32\xea\x57\xb0\x16\xf9\xdd\x99\x0a\xf9\xaf\xf1\x65\x9a\xb4\xe1\xda\xaf\x0d\x60\x9c\x73\x10\x92\x21\x5d\xd6\x3f\xc6\xd2\x7d\x53\x1a\xf5\xbe\x4d\x9c\xd2\x88\xb7\x77\xb2\xff\x1c\x45\x93\x32\x8b\xe5\x0b\xa1\xa4\x09\x73\x37\x63\xa3\x2f\x4d\xd5\xd8\x81\x9b\x9d\xb1\xd5\x66\x01\x9d\x47\xfc\xa5\x92\x96\xaa\xaa\xd8\x1a\x1a\x84\xae\x5c\xcc\x2a\x06\x9b\xf2\x40\xd5\x38\x4c\xa5\x5f\x12\xa8\x19\xa2\xf8\xa7\x59\xc4\x3b\x12\xd2\xde\x53\x1f\x90\x11\xf7\xe3\xef\xc5\x8c\x79\x98\x7a\x8d\xaf\xaf\x6e\x31\x5a\xf0\xc1\xe2\x66\x6c\x9b\x62\x32\x95\x83\x54\x2a\x5d\x41\x53\x5d\x65\x5e\xd1\x11\x47\x35\x80\xc7\xa9\xc3\x96\xae\x3c\x04\x2d\x18\xc8\x0f\x26\x41\x1b\xbe\xcd\x91\x39\x34\xaf\xa2\x9b\x3c\x2f\x9d\x3a\x29\x5f\x38\x61\xdd\x3b\xb3\x02\x1a\xe5\x4e\x57\x67\xcf\x53\x5b\xaf\xd4\x9e\x82\x9a\xce\xff\x05\x00\x00\xff\xff\xd5\x58\x25\x0d\xb6\x74\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 29878, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

