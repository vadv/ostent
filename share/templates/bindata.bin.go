// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\xdd\x73\xdb\x36\x12\x7f\xcf\x5f\xc1\xe3\xb5\xf7\xd0\xa9\xa8\x73\x27\x9d\xe9\xa4\x96\x6f\x1c\x4b\x4e\x39\xf1\x87\xce\x96\x33\xd7\xa7\x0e\x44\x82\x12\x62\x8a\x64\x09\x48\x8e\x4f\xa3\xff\xfd\x16\x5f\xfc\x14\x25\x52\xa4\x12\xf7\xc6\x0f\x89\x49\x10\x58\xfc\xb0\x58\xfc\x76\x49\xac\x70\xfa\xb7\xe1\xed\xc5\xe4\xf7\xf1\xc8\x98\xb3\x85\xff\xe6\xec\x54\xfc\x31\x0c\xb8\xc0\xc8\x85\x0b\x7e\xb9\xc0\x0c\x19\xce\x1c\xc5\x14\xb3\x81\xb9\x64\x5e\xef\x17\x33\xfb\x68\xce\x58\xd4\xc3\x7f\x2e\xc9\x6a\x60\xfe\xa7\xf7\x70\xde\xbb\x08\x17\x11\x62\x64\xea\x63\xd3\x70\xc2\x80\xe1\x00\xda\xd9\xa3\x01\x76\x67\x38\xd7\x32\x40\x0b\x3c\x30\x57\x04\x3f\x45\x61\xcc\x32\x95\x9f\x88\xcb\xe6\x03\x17\xaf\x88\x83\x7b\xe2\xe6\x47\x83\x04\x84\x11\xe4\xf7\xa8\x83\x7c\x3c\x38\xd1\x82\x18\x61\x3e\x16\xd7\x70\xb7\x5e\x5b\x43\xc4\x90\xf5\x5b\x48\x19\x17\xbe\xd9\x18\x70\x05\x22\x4f\xfb\x69\xbd\xb3\x53\x9f\x04\x8f\x46\x8c\xfd\x81\x49\xa0\x4b\xd3\x60\xcf\x11\xe0\x20\x0b\x34\xc3\xfd\x28\x98\x99\xc6\x3c\xc6\xde\xc0\xec\x7b\x68\xc5\x2b\x58\xbc\xac\xd4\x94\xb2\x67\x1f\xd3\x39\xc6\x4c\x0b\x60\xf8\x0b\xeb\x3b\x94\x26\xed\xe1\xba\x4f\x02\x17\x7f\xb1\x78\xa9\x92\x40\x9d\x98\x44\x2c\xdb\xe4\x33\x5a\x21\x59\x6a\x16\xf5\x6c\xd0\xd8\x01\x41\x9f\x69\x3f\xe6\x1a\x8e\x31\x5c\xfd\x64\x9d\x58\x27\xbf\xe8\x02\x6b\x41\x02\xeb\x33\xf4\xe9\xc2\xc0\x7b\x0b\x44\x02\x59\x7f\xbd\x26\x9e\x61\x4d\xce\x3f\x7c\x18\x0d\xa7\x24\xd8\x6c\xa0\x9e\x02\x23\x5b\xac\xd7\xd8\xa7\xa0\x21\xe8\xa1\xbf\x20\xfe\xa3\x7a\x28\x1e\x04\xee\x66\x63\x6a\xa5\x9e\xf6\x25\x38\x85\xbf\xaf\x4c\xe3\xec\x74\x1a\xba\xcf\xaa\x30\x40\x2b\xc3\xf1\x11\xa5\x03\x13\x2e\xa7\x28\x36\xe4\x9f\x9e\x8b\x3d\xb4\xf4\x99\xbe\xa5\x0c\x0c\xc3\xe9\xb1\x30\x32\x8d\x38\x84\x79\xe4\xd5\xc9\x0c\x0a\x61\x1e\x92\x0e\x5d\x92\x48\xe3\x26\x01\x63\xc2\x71\xcf\xf3\x97\xc4\xd5\x75\x0a\xb5\x94\x74\x8e\x0c\xc7\x60\x46\x7e\x6f\xe1\xf6\x4e\x8c\x08\xb9\x2e\x09\x66\x3d\x1f\x7b\x30\xf9\x7a\x0a\x74\xfb\xe9\x92\xb1\x30\x28\x88\x60\xe1\x6c\xe6\x63\x2e\xc2\x47\x11\xc5\xae\x9e\x5b\x59\x59\x69\x59\x56\xe2\xe0\x64\x2d\x5d\x8c\xe2\x19\x9f\xba\xbf\x2b\x59\xc9\xe3\x4c\xb7\xc2\x02\x22\x94\x74\x4b\xe3\x5e\x18\xf8\xcf\xf9\x2a\x50\x69\x22\x71\xa4\xda\x81\x59\x80\x66\x3b\x24\x71\x4b\xed\x41\xb7\x25\x51\x2f\xa6\x65\x5f\x2a\x31\x37\x09\xc8\x20\xee\xc0\x9c\x83\x66\xf3\xf3\x30\x8d\x51\xe0\x42\x19\x01\x43\x11\x2b\x6d\x60\x2e\xd0\x17\xc9\x05\xef\x8c\x93\x9f\x9c\x79\xb2\xca\x60\x8a\xf8\xda\x06\x29\x6a\xd5\x1b\x65\x1a\x28\x4c\x41\xb9\xc2\x69\x1f\xe5\x70\xf5\xc1\xba\x0a\xb6\xc6\x81\x16\x67\x36\x35\x53\x59\x60\xec\x98\xfa\xb3\xd3\xa5\x9f\x19\xa5\xae\x0a\x7f\x8a\x06\xe2\x13\x5d\x0f\x39\x8c\xac\x70\x59\xbd\x48\x0d\x9e\x73\x2f\x7d\xd7\xef\x3f\x3d\x3d\x59\x30\x96\x18\xfe\x59\x4e\xb8\xe8\x4b\xd6\x03\x8e\xf0\x31\xa2\x98\xf6\x7d\xc4\x30\x65\xff\x72\x16\xd1\x40\x8f\xfd\xd3\xe8\xee\xde\xbe\xbd\x29\xea\x46\xc8\xd7\xa4\x89\xca\xf3\xea\x93\x4a\xb0\x7a\x09\x01\xa7\x19\x99\x6b\x20\xa5\x78\x46\x02\xbe\x00\x0d\x8f\xc4\x94\x89\xd2\xf2\x98\x9c\xd0\xc5\x05\x51\xbc\x08\x18\xb7\xa4\x00\x01\x31\x99\xe6\xa1\x7d\x3f\xb9\xb3\xdf\xf3\x49\xe4\x0d\x3a\xc6\xdc\x16\x28\x89\xfe\x11\x4c\x69\xf4\xab\x5c\x38\xdc\x88\xc0\xa6\x4b\xd5\x32\x46\x69\x8f\xf9\x48\x4a\xeb\x47\x8d\xe5\x05\x8e\x70\x59\x1a\xe1\x72\xf7\x08\x1f\x22\x46\xe4\xa2\xfb\x0b\x8d\xd2\x47\xc5\x51\xfa\x68\xe7\x28\xaf\xce\x3b\x18\x61\x7f\xe9\xef\xe2\xa5\xcc\x2d\xdc\xc0\x20\x94\x3f\xde\xef\x41\x73\x75\xe2\xf0\xa9\xe8\x59\xf9\x00\x17\x78\x01\x4e\x4d\xc6\x71\x09\xcf\x71\xd7\xfa\x56\xfb\xd8\xd0\xf3\x20\x5a\xe9\x9d\xe4\x78\x6e\xbd\x66\x78\x11\x71\xca\x31\x4c\xf0\xff\xd0\x37\x7d\xf7\x4e\x5e\xfc\x01\xda\xc0\x3e\xc8\x35\x0d\x8b\x6b\x67\x3b\xcb\xba\xde\xf6\x6e\x7f\x6e\xd7\xad\xeb\x6d\xed\x35\xa7\xc3\xfd\x4a\x71\xa2\xe5\x51\x94\x02\x72\x77\x2a\x85\x1c\x47\x29\xa4\x13\xa5\x44\x74\x3b\xb8\x93\x7f\xb6\x43\x17\xd1\x2e\xd0\xad\x66\xc7\x41\xb7\x9a\xed\x47\x97\xdc\xec\x89\xfc\x75\x83\x15\xc4\xce\x9c\x3e\x8c\x81\xf6\x6f\x9b\xcd\xaf\xc5\x10\x5c\x45\xde\x3c\x18\x17\xef\x6d\xeb\x75\xff\x87\x37\x3f\xf4\x37\x9b\xf5\x5a\xe2\x2b\x03\x06\xf3\x02\xed\x50\x93\xd7\x79\x22\x6c\x6e\xf0\x3b\x18\x33\x1f\x00\x74\xc4\xff\x93\xef\x03\xeb\x35\x84\x5e\x33\x6c\x7c\x47\x7e\x34\xbe\x73\xc2\x18\x1b\xef\x06\x86\x64\xb4\x8b\xf1\x83\x75\x45\x28\x83\x21\xb3\x18\xe0\x89\xc7\xd6\x8d\xf5\x11\x3f\x9f\x33\x28\x11\x6b\x03\xe4\x4e\x9f\x7b\x37\xd0\x91\x40\xc8\x5c\xad\x74\xc1\xc7\x31\x99\xcd\x81\xa1\xc3\xa7\x18\x29\x1f\x71\x96\xc8\xe1\x9a\x64\x6e\x65\xab\xe4\x05\x8a\xf3\xef\x7a\x2d\x9e\x6f\x36\xe0\x6c\x28\x8e\x70\xec\x40\xc0\x22\x03\x0b\x19\x8c\xa7\xa5\x03\xdd\xc1\x03\xc5\xb1\x40\x95\xeb\x56\x96\x66\x88\xfa\xec\xb8\x28\xee\x9f\x69\x19\x84\x28\xec\x1a\x43\x8f\x04\x2b\x1c\x27\xaf\x27\x5b\xb0\xd8\xae\x8f\xcb\x60\x64\xe9\x56\x34\x7d\x16\x73\x6b\x13\x2f\x88\xc5\x3f\x75\x4c\x50\x2e\x43\x6e\x3f\xfc\x22\x19\x99\xb8\x11\xff\xc3\x1b\x22\x18\x3a\x16\x6e\x0a\x06\x9f\xf9\x0c\x01\x3d\xeb\x35\xc5\xe6\xd9\xd5\x96\xdc\xf1\x07\x7b\x8c\x4d\x54\xe3\x33\x9e\x7b\x8d\x59\x06\x24\x17\x8f\x9e\x7d\x5f\xf0\xdb\x87\xf4\x02\x53\x7a\xfc\x4e\xf8\x54\xb5\xe9\xa5\xaf\xb4\x2a\x4a\xf5\x7b\x3d\x4b\x5f\xec\x77\x51\xa0\x66\x14\x49\x81\x2c\xe5\x24\x31\x91\x19\x33\xd9\x6b\x18\xae\x37\x7d\x86\xf7\x93\x3f\x1a\x12\x94\x4b\xe8\x63\x4a\x4e\xc3\x4b\x21\x24\x4f\x50\xbc\x8a\x35\x24\xf1\x0d\xbc\xe4\xa5\x34\xa5\xfa\x53\x54\xe5\x92\x98\xbf\x03\xa6\x84\x95\xd0\x92\x6c\x8d\x57\x37\xea\x15\x31\x59\x92\x85\x1a\x52\x7e\x3d\xfa\xd2\x8d\xce\x57\x88\xf8\x75\x9b\x54\x4f\x42\xba\xa8\x4d\xa9\x10\xce\x67\x63\x59\xb2\xd9\xc8\x88\x55\x77\x09\x4f\xdc\x66\x20\x27\x21\x43\x59\x90\xad\x96\xbf\x9e\xe5\x4e\x38\x60\xab\x4e\xe4\xf7\x1f\x1c\x2c\x17\xfc\x33\x9d\xa9\x0c\x63\x8c\x62\xb4\xa0\xd6\xe8\xe6\xe1\xda\x72\x3d\x6b\x04\x8f\xaf\xf8\x57\x3c\xf3\xf2\xde\x34\x4c\x61\x6f\xed\x65\x5d\x8f\xbb\x93\x75\xfe\xe9\xdc\xbe\xea\x48\xd6\xc3\xfd\x68\xd8\x91\xa8\xc9\xed\xe4\x9c\xc3\x6a\x45\x1a\xb9\xa5\xde\x05\x73\x90\x00\x5e\xa4\x5a\x53\x87\x94\x52\x8f\x3b\x64\xdd\x6f\x4a\x1e\xb6\x17\xe3\xda\x4d\x9a\x90\x87\xbd\xac\x64\x0f\xfe\xa8\x21\x7d\xd8\x42\x53\xdd\xf1\x87\x9a\xeb\xae\x82\x08\xdd\x52\xae\x83\x8c\x57\x1d\x8a\x8d\x87\x0a\x77\x5c\xaa\x7d\x1d\x2e\x03\x86\xdd\x9d\xd5\x8d\xa2\x8e\x44\x35\xe1\x03\x0e\x68\xc7\x89\xfc\x80\x66\x82\xcd\x3b\x73\xff\xf9\xa5\xd7\x7e\x29\x93\xc3\x82\x00\xe2\xa5\xeb\xd8\xde\x16\x02\x10\xcf\xca\xaf\x60\x92\xf3\xfe\x15\xab\x57\xb5\xaa\x6d\xef\x50\x7f\x88\x7d\x86\xec\xa0\x71\x93\xdb\x25\x6b\xd2\xa6\x59\x0f\x79\xe1\xad\xd6\x1f\xe9\xd2\x7f\xe7\x62\x78\x1b\xd6\x4f\xec\xa1\xca\x25\x57\x8e\x80\xf5\x27\xff\xf7\xf6\xe4\xde\x00\x0e\x33\x28\x76\xc2\x20\xbb\x3d\x64\x07\xbb\xe3\xe2\xd3\xc2\x97\xb6\xe9\x69\x3f\x5b\x72\x16\xd1\x83\xc3\xf3\xfd\xe0\x60\x56\xbe\x39\x3a\xc6\xd9\xc0\x78\xff\xfb\x64\x74\x6f\x2c\x42\x77\xe9\x87\xc6\xdb\x0f\x2d\x14\xf8\xbe\x00\xf1\xfb\xb7\x1f\x8e\x8e\xb1\xb1\x1e\x9b\x82\x6c\x43\x90\xa4\xdb\x50\x87\x78\x38\x8e\xc3\xb8\x25\x41\x4a\x19\x7b\x19\x52\x56\x7b\xa5\xc8\xc6\x14\xa9\xe6\xe8\x25\x71\x64\x05\x3d\x66\x77\x33\xaa\x96\x4f\x07\x34\x53\xc5\x7f\x5f\xa9\xfb\xed\xcc\x56\xa7\xf3\x2e\xf8\xab\x82\xb3\xba\xe8\xbe\x1d\x33\x65\xa9\xa4\x0b\x6a\x8a\x90\xf3\x88\x59\x4b\x6e\x52\x42\xf6\x92\x93\xaa\xf7\xca\x4e\x8d\xd9\x49\x4f\xd3\x2b\x3d\xbd\x10\x7a\x92\x01\xce\xb7\x25\xa9\x6a\x0c\x2f\x82\xaa\x72\xd4\xd2\x9e\xab\x16\x78\x71\xc0\x3e\x18\xb4\x4a\x99\xea\x7a\x74\x9d\xe7\x28\x78\x6a\x7d\x24\x81\x9b\x92\x14\xdf\x39\x97\xf4\xf4\x08\xe5\x5b\xe8\x49\x37\xa9\x4d\x05\xbc\xc1\x65\xf7\x5f\x7d\xb8\xd8\xad\x5f\x8c\xd5\x83\x66\x00\x3b\xfd\x5e\x0c\x02\xbf\xc1\x76\x51\xc6\xfc\xb9\xba\x9b\xd4\xdf\xf1\x59\xe6\x2b\x7c\x8f\xd1\x86\xdd\x7e\x89\x24\xe9\x08\x20\x48\xee\x5e\x9f\x9d\xa6\xbb\xd8\x88\xff\xd1\x39\x2e\xea\x63\xf1\xfb\xdb\xdb\x2b\x0b\x48\xd4\x23\x33\x68\x67\xc9\xe4\xc5\xdf\x62\xec\xf1\xd5\xb0\xd9\x64\xf7\x28\xa7\x2c\xe8\x4d\xfd\xd0\x79\x4c\x13\x51\xd4\x36\xe6\x2e\x89\xef\xc3\xd0\x17\x4f\x2e\xb8\x1c\xb9\xc6\xe6\x6f\x8d\xe9\xac\x47\x02\x2f\x34\xf9\x8d\x99\x6c\x64\x82\xcc\x8b\xf1\x43\x8e\x92\xce\x74\x2e\x5b\xb2\x21\x9f\x1d\x52\x26\xb5\x43\x76\x69\x1e\x00\x47\x3e\x55\x09\x47\x22\xc1\xb5\x54\x94\xa4\x95\xf6\xe6\xc4\x75\x71\x90\x42\x3e\x3b\xf5\xc2\x78\x91\xd5\x13\xbf\x87\xc1\x89\x64\xa4\x22\x9a\x7f\x2f\x71\xfc\x6c\x5d\x42\x8d\x73\x87\xe7\x86\x4a\x2d\x67\x8c\x9c\x04\xd1\x92\x25\x9f\x04\x45\x5f\x3d\xba\x9c\x2e\x48\x92\xab\xac\xee\x32\x6d\x32\x69\x14\x7c\x8e\x18\x0c\xb1\x90\xd9\x59\xaa\x33\x8b\xc3\x65\x64\x24\x57\x3d\xba\xd0\x59\xbd\xe2\xbe\x98\xd6\x88\xb6\x6a\x15\xe0\xe1\x2a\x9d\x82\x68\x21\x5e\x67\x11\xab\x74\xc8\xd2\x03\x53\xd8\x58\xb5\xec\xa2\x41\xe6\x80\x01\xb4\xdf\x84\x8a\x8a\xf9\x8e\x59\xc4\x3c\xf5\x61\xf4\x05\x0c\xca\xe5\xab\x89\xdf\x71\xbc\xd5\x50\xcb\x18\x0d\x97\x50\xde\xd6\xad\x02\x8b\x85\xf8\x3a\x70\xcb\xa0\x38\xbf\xc0\x5d\x31\x8f\x35\x63\xef\x1d\x4d\xe2\x2e\x06\x02\xbc\x31\xa6\xf3\xc2\x46\xd2\x78\x74\x67\xdf\x0e\x2d\xf5\x10\x86\x57\x4c\x98\x29\x81\x84\x5b\x6e\xfd\x6f\x4a\x0f\x2b\x17\x6f\x53\xbb\x2a\xae\x43\xb1\x75\xf7\xa6\xc6\x10\x93\x14\x86\x7c\xde\x4f\x06\x98\xb8\x68\x4a\xb6\xae\x77\x10\xd7\xba\x5e\xc7\x54\x0b\x02\x9b\x32\x6d\x41\x98\xda\x36\x64\xd6\x84\x07\x97\x85\x04\xc8\x7a\x2c\xec\x7a\xfb\x49\xb8\x02\xe8\x2b\x07\x1f\xce\xc1\x15\x2a\xed\x82\x82\xb7\xd8\x69\x73\x06\x4e\xd9\x77\x78\x79\x2c\xf2\xad\x01\x34\x0f\x87\xf3\xee\xf0\xf2\xe5\xd3\xae\xeb\x35\x66\xdd\xd2\x8f\x15\x78\x0e\x25\x35\x4a\x4b\x2c\x23\xc0\x27\x45\xdd\x26\x74\xc0\xd3\x08\x32\x13\x66\xdf\xdc\x0e\x47\x3c\xfd\x42\x99\x53\x4e\xcf\xdb\x47\xbb\x3b\x4f\x81\x65\x12\x15\x94\x70\x3e\xe2\x4c\x3e\x75\x13\x78\xc3\x4b\xb1\xe7\x70\x24\x7c\x5a\x7a\x09\x60\x9a\xec\xdd\xc6\xe9\x55\x72\xe3\x0e\x9f\xb7\x4d\xe0\xde\xb9\x33\xcb\x42\xf3\x9e\xa1\xc6\xe6\xf1\x36\x6f\xda\x10\x4f\x3a\x59\xad\x00\x65\x37\x37\xcb\x78\x3a\x73\xf5\xe4\x30\x57\x4f\xba\x76\xf5\xa4\x1b\x57\x4f\x5a\xb9\x7a\x52\xc3\xd5\x57\x00\x7d\x75\xf5\x87\xbb\xfa\x0a\x95\x76\xe1\xea\xb7\xd8\x69\x1b\x57\x6f\x1f\xcd\xd5\xd7\x00\x5a\x76\xf5\xf6\x5f\xc0\xd5\x93\x6f\xe9\xea\x49\x99\x9e\xc7\xe7\x17\x1f\x47\x93\xee\x7c\x29\xc9\xf9\x52\x2d\xbd\xae\xb3\xdf\x02\x70\x74\x77\x77\x7b\x77\x2c\x7c\x4a\x78\x0b\x78\x76\xc7\xb1\x48\x1e\x9f\x7d\xdc\x58\xa4\x92\xbc\x0f\x89\x45\x76\x1a\x57\x0b\xdf\x5f\xdc\x17\xab\x1f\x8d\xec\xb2\xa6\x56\x80\x72\x69\x04\xad\xf0\xd8\x5d\x44\x47\xe4\x6b\x45\x47\xfc\x97\x81\x87\x84\x47\x72\xf3\xa1\xcb\xf8\x88\x4b\x6c\x1a\x20\x5d\xe3\x45\x18\x3f\x1f\x10\x07\x41\x67\xfb\x03\xa1\x2a\x44\xaf\x91\xd0\xe1\x91\x50\x95\x4e\xbb\x08\x85\xb6\xd9\x64\xf3\x58\xa8\x28\x95\x3e\xa1\xe8\x68\x90\x85\xf0\x2d\xeb\xa8\x7a\x80\x43\x15\x6c\x55\x0e\x0f\x1b\x5c\xe8\x4b\x0f\x9a\x60\x28\x5f\xf1\xb3\x74\xf5\x4a\x3e\xf0\xb3\x74\xb2\x55\xda\xed\x67\xe9\x88\x1e\x44\xc6\x11\xed\x98\x8b\x41\x60\x53\x2a\x1e\xc7\xa1\x83\x29\xc5\xf4\x00\x36\x8e\xe8\x7e\x32\xae\x80\x74\x3c\x2e\xce\xa6\xf4\xff\xdf\xd3\x72\x85\x76\xbb\xa0\xb8\x2d\xc6\x79\x00\x29\xdf\x8b\xe5\x06\x7f\x83\x90\x0d\xb1\x13\x63\x24\x68\xb0\xd3\x97\xd5\x2b\xfb\xda\x9e\x58\x11\x0d\xac\x2b\xb0\xe4\x6a\xb8\xbd\xda\x48\xd3\xf7\xea\x23\x01\xbd\x0e\xe3\x1a\xef\xd3\x29\xa6\xc8\x5f\xd2\x09\xd8\xf5\xcb\x7f\xab\x8e\xe8\x57\xf4\x0f\x95\xe4\x72\xa0\x7b\x88\xe8\x31\xbc\xc3\x6a\x76\x90\x77\x58\xcd\x3a\xf6\x0e\x20\xb0\xa9\x77\xf8\x84\x66\x31\x0a\x98\x31\xf3\xc3\x29\x3f\x52\x8e\x21\xb6\x3c\xc4\x53\xac\x66\xfb\x3d\x45\x05\xbc\xd7\xa8\xfd\x70\xf7\x50\xa1\xd2\x2e\xdc\xc3\x16\xeb\xac\xeb\x1e\x5e\x16\x61\xad\x66\x5f\x91\xb0\x2a\x6d\xfc\x40\xc2\x5a\xcd\xba\x26\x2c\xda\x30\xe9\x33\x82\xf8\x31\xcd\xf8\xd4\x1e\x2b\x97\xf5\xc9\xab\x58\x63\x7b\x98\x66\x7d\x46\x3a\x27\x3d\x22\xee\xae\xf3\x4f\x54\xd2\x64\x56\x48\xbd\x34\xcb\xa4\xc5\x43\xa1\xc5\x1b\xa5\x52\xf5\x54\x1d\x69\xd2\x40\xe0\x38\x26\x61\x4c\xd8\x73\xc3\x66\x37\xc4\xa9\x99\x91\x9a\x34\xb9\x27\xff\x6d\xda\xe4\x0e\x53\x30\xb2\x60\x47\x96\x3d\x4f\x5e\xd5\x3f\xca\x4d\xd4\x30\x21\x55\xbf\xbc\x96\xd8\xf3\x3f\x0f\x68\x95\xab\xaa\x3d\x6c\x8d\x54\x55\x75\x37\x0f\x57\x12\x70\xc7\x27\x1c\x40\xec\x90\xf9\x3a\x6e\xb7\xf8\xf1\x7f\x4e\xd2\x43\x77\x92\xee\x47\x77\xad\xce\x4a\xc8\x8f\xf0\xce\xee\x48\xd2\x8d\x7d\x31\xea\x48\xd4\x27\xfb\x6e\xd2\x91\xa8\x3b\xf1\x6d\xbe\x0b\x49\x13\xfb\x7a\xc4\x83\x0c\xb9\x52\x3a\xd2\xd9\xb9\x90\xd9\xf6\x50\x08\xc5\xce\xed\x33\x97\xb5\x63\x94\x71\x29\x77\x57\x77\xb2\x24\xe3\x94\x44\xb0\xa3\x9c\x71\xe6\x1a\xdc\xb1\xa1\x9a\xcb\x02\x4d\xe0\xb9\xf3\x4e\x33\xf5\x91\xeb\xea\x33\x6b\xcf\x54\x2f\x49\x04\xa9\x43\xaa\x62\x80\xc6\xcf\xe2\x03\x97\x9f\x74\x24\x6b\x89\x43\x4d\x7b\x5e\xb8\x8c\xf9\xb9\x78\xe9\xf1\x60\xa6\x01\xfa\x72\xf0\x3c\xf4\x61\x4e\xf8\xb9\x9d\xe3\xf4\x56\x86\x30\x63\x0c\xb4\xed\x72\x22\x4b\x3f\xd5\xc9\xb2\x4f\xc8\x5f\xe2\x24\x7e\x01\x15\x7e\xa6\x5f\x2e\xfc\x90\x62\xa5\x00\x53\x3b\xd6\x06\xda\xcd\xfc\x70\x00\x5a\x17\x0f\x9f\xf2\xd1\x14\xfb\xdb\x8e\x9a\xb2\x34\x04\xb8\xd0\xa7\x11\x35\xe8\x75\x35\x13\x9b\x21\xa6\xf4\xbb\x8f\xf8\x99\x87\xdd\xb2\x48\x7b\x02\x40\x11\xfa\x5c\x2e\xc7\xf1\x73\xe2\x05\xd4\x39\xa7\x32\xd6\x1f\xf1\x16\x95\x74\x5f\x03\x45\x12\x40\xa8\x08\x61\x81\x9c\x79\x1a\x21\xa8\x5e\xae\xa1\x90\xb7\x2b\xfc\x3e\x04\x4a\xad\x87\x87\x6c\xa8\xb0\x92\xf5\x55\xbc\xb0\x5c\x92\xad\x3f\x12\xd1\xed\xb6\x7b\x31\xf1\xb8\xfa\x78\x11\xf1\x78\x1c\x87\x2b\xe2\x16\xc2\x81\x7c\x15\x88\x6d\xd8\x2e\x11\x6a\x68\x1e\xf1\xf9\x8b\x1f\x9b\xef\xf3\x99\x35\x74\x49\x21\x08\x73\xe6\x75\xc2\x31\xe2\x19\xf8\x4f\xa3\x3c\x93\xe0\x46\xe3\x25\xae\x60\xb1\x82\xe5\x18\x39\x89\xbb\xea\x27\x34\x74\x68\x1c\xa0\x03\xd7\x24\x0e\x90\x6f\x89\xf9\xd3\x07\xdb\xfc\x7e\x85\x14\x7f\x61\x92\x3e\xe2\x3f\x84\xac\x7c\x18\x29\x3b\xa8\xac\xc0\xdf\x81\xab\x9b\xbb\x24\xc6\x0e\x13\x9b\x5b\x1d\xfd\x5c\x25\x31\x82\x16\xac\x9f\xf8\x29\x90\xa0\x4e\x44\x06\xf3\xe1\x6f\x6e\xfc\xe0\xf7\xe0\xc2\x27\xce\xe3\x60\xcd\xe6\x84\x5a\x73\x14\xb8\x3e\x16\x25\x9a\x8d\xd2\x0f\x4f\x75\xfa\x2a\x78\x46\x3e\xc1\xf3\x2c\xfd\xa9\x83\x57\x40\xee\xb9\x4f\x66\xc1\x85\x2c\x97\xf3\x5a\xc2\x96\xb6\x83\x32\x55\x35\x61\x2d\x85\xab\xc0\xaf\xbc\x22\x8a\x31\xcb\xd6\x16\xea\xca\x9e\xd2\x87\x94\x06\xe7\xc9\x90\xfe\x17\x00\x00\xff\xff\x5a\x29\xaf\x37\xe2\x5f\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 24546, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

