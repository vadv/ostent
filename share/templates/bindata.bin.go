// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7d\x73\xdb\x36\xd2\xff\x3f\x9f\x82\x0f\x9f\xf6\x99\xa7\x9d\x8a\xba\xf4\xd2\xbb\x4c\x6a\x7b\xc6\xb1\x94\x94\xd3\xf8\xe5\x6c\x39\x77\xfd\xab\x03\x89\xa0\x84\x98\x22\x59\x00\x94\xe3\xd3\xe8\xbb\xdf\xe2\x85\xef\xa4\xcc\x37\x39\xee\x4d\x3a\x13\x8b\x04\x81\xdd\xc5\x62\xf1\xdb\x05\xb8\x44\x8f\xfe\x67\x72\x79\x36\xfb\xed\x6a\x6a\xac\xf8\xda\x7b\x71\x72\x24\x7f\x0c\x03\x2e\x30\x72\xe0\x42\x5c\xae\x31\x47\xc6\x62\x85\x28\xc3\xfc\xd8\x8c\xb8\x3b\x7a\x6d\x66\x1f\xad\x38\x0f\x47\xf8\x8f\x88\x6c\x8e\xcd\x7f\x8d\x6e\x4f\x47\x67\xc1\x3a\x44\x9c\xcc\x3d\x6c\x1a\x8b\xc0\xe7\xd8\x87\x76\xf6\xf4\x18\x3b\x4b\x9c\x6b\xe9\xa3\x35\x3e\x36\x37\x04\xdf\x87\x01\xe5\x99\xca\xf7\xc4\xe1\xab\x63\x07\x6f\xc8\x02\x8f\xe4\xcd\x0f\x06\xf1\x09\x27\xc8\x1b\xb1\x05\xf2\xf0\xf1\xcb\x98\x10\x27\xdc\xc3\xf2\x1a\xee\xb6\x5b\x6b\x82\x38\xb2\x7e\x09\x18\x17\xc4\x77\x3b\x03\xae\x80\xe4\xd1\x38\xad\x77\x72\xe4\x11\xff\xce\xa0\xd8\x3b\x36\x09\xb0\x34\x0d\xfe\x10\x82\x1c\x64\x8d\x96\x78\x1c\xfa\x4b\xd3\x58\x51\xec\x1e\x9b\x63\x17\x6d\x44\x05\x4b\x94\x95\x9a\x32\xfe\xe0\x61\xb6\xc2\x98\xc7\x04\x38\xfe\xcc\xc7\x0b\xc6\x92\xf6\x70\x3d\x26\xbe\x83\x3f\x5b\xa2\x54\x53\x60\x0b\x4a\x42\x9e\x6d\xf2\x09\x6d\x90\x2a\x35\x8b\x7a\x36\x18\x5d\x00\xa1\x4f\x6c\x4c\x85\x86\x29\x86\xab\x1f\xad\x97\xd6\xcb\xd7\x71\x81\xb5\x26\xbe\xf5\x09\x78\x3a\xd0\xf1\xd1\x1a\x11\x5f\xd5\xdf\x6e\x89\x6b\x58\xb3\xd3\xf7\xef\xa7\x93\x39\xf1\x77\x3b\xa8\xa7\x85\x51\x2d\xb6\x5b\xec\x31\xd0\x10\x70\x18\xaf\x89\x77\xa7\x1f\xca\x07\xbe\xb3\xdb\x99\xb1\x52\x8f\xc6\x4a\x38\x2d\xff\x58\x9b\xc6\xc9\xd1\x3c\x70\x1e\x74\xa1\x8f\x36\xc6\xc2\x43\x8c\x1d\x9b\x70\x39\x47\xd4\x50\x3f\x23\x07\xbb\x28\xf2\x78\x7c\xeb\x92\xcf\xd8\x19\xf1\x20\x34\x0d\x1a\xc0\x30\x8a\xda\x64\x09\xc6\x02\xc3\x90\xf0\x73\x48\x42\x4c\x58\x04\x74\x09\x43\x4b\x2f\x22\x4e\x5c\xa7\x50\xcb\xa1\x41\xe8\x04\xf7\x7e\xcc\x45\x48\x88\x69\x5a\x59\x0a\x1b\x71\x1e\xf8\x79\x21\x41\x90\xe5\xd2\xc3\x60\x77\x9e\x87\x42\x86\x9d\x78\x24\x55\x65\xad\x53\x55\x49\xc8\xa2\x6a\xc5\xc5\x88\x2e\xc5\x40\xfd\xaf\xa6\x95\x3c\xce\xb0\x95\xe3\x1d\xa2\x84\x2d\xa3\xa3\xc0\xf7\x1e\xf2\x55\xa0\xd2\x4c\xc9\x91\x2a\x03\x74\x0e\xcd\xf6\x50\x12\x76\x39\x02\xb6\x25\x52\xcf\xa6\xe5\x58\x29\x31\x37\x08\xc8\x20\x4e\x3a\x5c\x73\x8a\x7c\x50\x79\x61\x10\xe3\x41\xd1\x6a\xd5\x95\x72\x23\x11\x57\x35\x0d\x44\x09\x1a\xe1\xcf\xc0\xdd\xc1\x40\x99\xd3\x08\x27\xb3\xaf\x38\x10\xc2\x60\x04\xfb\x95\x06\x87\x52\x37\xca\xe8\x71\x34\x86\x46\xc5\x7e\xa1\x5c\x97\x22\xaf\xd4\x81\x35\xf6\xa3\xd8\xbe\xd5\xb5\x14\xd3\x43\x73\xec\x79\xd8\x99\x3f\x14\x55\x50\xe0\xe0\x91\x12\x49\x6d\xd1\x9a\x68\x48\x31\x03\x50\xcb\x4d\x9b\xa4\x39\x8d\x7c\x9f\xf8\xcb\xa3\xb1\x47\xca\x74\x1b\xb4\x87\x41\x2a\x8d\x08\xa0\x54\xb1\x5e\x46\x5f\x13\xfb\x66\x76\x6d\xbf\x15\xea\x42\x65\xd3\x28\x89\x31\x8e\xbc\x9c\x06\x73\x3a\x4e\x87\xa9\x38\xad\x52\x48\x50\x05\xc6\x9e\x79\x97\x1d\x16\x01\x4d\xba\x2a\xfc\x54\xe8\x5a\x30\x23\xa1\x59\x84\x86\x8a\x3e\x27\x3d\xb6\xaf\x44\x67\xab\x14\x5c\x50\x5d\x59\xbb\x71\xf7\xe2\x1a\x1e\xaa\xe2\x6c\x14\x66\x43\xab\x09\x50\x1e\xa9\x84\x2b\x70\x2b\x3d\xcd\xf4\xeb\xc3\x69\x95\xcd\x57\x0c\x53\x59\xcd\x5d\xac\xbf\x4a\x9a\x9e\xe6\x2f\x49\x44\x21\x27\x6b\x5c\x1a\xa0\x84\x7c\x43\x32\x1a\xae\x14\xb5\x0a\x9c\xaa\x9c\x15\x39\x7d\xde\xca\xa6\x55\x13\x43\xeb\xb4\x52\xc2\xfc\x04\xa9\xae\x59\x9e\x46\x75\x16\x1f\x5f\x52\xb2\x5c\xf1\xc7\xa1\xc6\x40\x0b\x4e\x36\x65\x70\x2c\x60\xf7\x06\x53\x26\xf4\x56\x83\xde\x5d\x00\x5b\xc4\x91\xec\xcd\x78\x7c\x7f\x7f\x6f\x01\x02\x53\xf8\x67\x2d\x82\xf5\x58\x45\x70\x10\xef\x78\x18\x31\xcc\xc6\x1e\xe2\x98\x55\xe1\xd1\xe5\xcd\x6c\x7a\x31\xab\x02\xa1\x7e\x66\x1a\xf7\xf5\x20\xb6\xaa\x89\x0f\x61\xac\xc3\xa8\x51\x52\x8b\x0d\xf8\xe3\xf4\xfa\xc6\xbe\xbc\x78\x1a\x0b\x2e\x38\x82\xcc\x2d\xdc\x80\x15\xeb\x58\xb3\x3e\x3c\x34\x42\xe4\x38\xe0\xfb\x44\x80\xc9\xf0\x06\xba\xfb\xc0\x56\x95\x71\x25\x0d\xee\x8b\xb1\xa4\xb0\xee\x35\x5e\x43\x5c\xa7\x16\x2e\x89\xb7\x19\xad\x9d\xd1\x5f\x73\xde\x65\xbb\xe5\x78\x1d\x0a\x05\x1a\x26\x04\xb8\x20\x00\x7b\xf3\x46\x5d\xfc\x0e\x96\x8d\x3d\xa0\x63\x1a\x56\x11\x4b\x53\x3e\xc4\x1d\x84\x0d\x71\xf7\x72\x59\x84\xd1\x20\x6c\x80\xce\x5e\x3e\xce\x30\xbd\x71\xaa\x7b\x93\x37\x83\xf8\xa6\xc9\x2a\xa1\xc9\x88\x87\xac\x5a\xf6\xd7\x86\xbe\x08\x5c\x17\xd6\x63\xa3\x1f\xdb\xf5\x25\x64\x5f\xa0\x2f\x9b\xe5\x41\xfa\xb2\x59\xb6\xea\xcb\xde\xf5\x6d\xdc\x60\x03\x2b\x44\x01\x30\xc6\xb1\xa1\xa1\x66\xb7\xfb\xb9\xb8\xd0\xd4\xeb\x4b\xb1\xe4\x94\xbb\x13\xdb\xed\xf8\xfb\x17\xdf\x8f\x77\xbb\xed\x56\xc9\x57\x16\x78\xe1\x41\x24\x07\xb2\x12\x3f\x8c\xb8\x20\x6d\x4f\x4e\x39\xa7\xbb\x9d\x01\x37\x52\x2b\xbb\x5d\x1a\x42\x8e\x16\x2b\xbc\xb8\x9b\x07\x9f\xe3\x75\x5f\x7a\x2f\x9d\xc1\x8a\x38\x0e\xf6\x13\x2f\x25\xef\x84\x18\x9f\xd8\xe7\x33\x2f\x80\x10\xd4\x94\x7c\x04\x43\xe9\x37\x04\xc3\x77\x01\xd5\x1c\xb3\x0c\x85\x58\xe2\xe9\xf9\x3f\x6f\xc4\xb6\x81\xaa\xf1\x42\x01\xed\x0c\x74\x24\xc3\x49\x41\x42\x90\x97\xcb\xef\x26\x9d\x0d\x23\xb0\x04\x66\x8a\x3a\xf7\x84\xaf\x0c\x71\x07\x03\x2c\x46\x0b\xe8\x8a\x3f\x6a\x89\xbf\xdd\xc2\x32\x63\x89\x8d\x6f\xc8\x0f\xc6\x37\x8b\x80\x62\xe3\xcd\xb1\xa1\x00\xfe\xec\xea\xd6\xfa\x40\x98\x10\x80\x53\x90\x50\x3e\xb6\x2e\xac\x5f\xf1\x83\x10\xd2\x90\x20\x02\x74\xe7\x0f\xa3\x0b\x53\x89\x7c\xc4\x9d\xd8\xc0\xc4\xf0\xaa\xc0\xc2\xf0\x83\x7b\x8a\x42\xbd\xc9\x91\xd0\x11\xfd\xe2\x4e\x6d\xab\x64\x4f\x44\xac\x32\x33\xfa\x8a\x18\x0e\x31\x5d\x00\x80\xab\x28\x4b\x45\x13\x69\xe9\x71\xcc\xe0\x96\x61\xa5\xc8\x1c\x5b\x55\x9a\x59\x95\x9e\x1c\x56\x8a\x9b\x07\x56\x16\x42\x16\x0e\x2d\xc3\x88\xc8\x68\x04\xd7\xcb\x62\x3b\x1e\x2e\x0b\xa3\x4a\x2b\xa5\x19\x73\x9a\x31\xba\xfc\x4f\x13\x13\x54\x90\x23\xec\x47\x5c\x24\x3d\x93\x37\xf2\xef\x08\x82\x10\x12\x62\x47\xdf\x01\xc0\xc1\x34\x12\x9b\x2d\x4a\x19\x99\x9d\x46\x90\x24\x06\x14\xbe\xca\x42\x4d\x72\x27\x1e\x3c\x62\x7c\xb2\x9a\xb0\x80\xdc\xde\x45\xe4\x93\x5c\xac\x73\xf2\x6d\x61\xd3\xa2\x0b\x17\x18\xe2\xc3\x33\x11\x43\xd7\x87\xcb\x58\x6b\x55\x96\xc6\x5b\x77\x3c\xdd\xbb\xdb\x87\xff\x31\xc2\x28\xfc\xe7\x29\x20\xcb\xa1\x6c\x83\x55\x8e\x3b\x7f\x80\x78\xf3\xf7\x96\x80\xe5\x10\x76\x97\x82\xd5\xe4\x9d\x24\x92\x07\x2c\x51\xc5\x9a\x10\x7a\x81\xd6\x38\x85\x2d\xcd\x4f\x43\x97\x43\xa8\xdc\xf1\x29\x01\x58\x01\xb5\xf6\x68\x42\x22\xf8\xff\x6b\x6e\x78\x23\xb9\x9d\x41\xa1\xf1\xf2\xa5\xe0\x36\x52\xec\x1c\xbc\x91\x8c\xbe\xab\x04\xbe\x8e\xdc\x74\xdf\x24\xb7\xbf\x65\x99\xe9\x5e\x55\x33\x2b\x61\x4b\xac\xab\xd3\x0d\x22\x5e\xd3\x26\xf5\x32\xa6\xd8\x63\xaa\x71\x12\xb0\x7b\xa5\x4a\x76\xbb\xff\xf3\xe7\x2c\xfc\x39\x66\x09\x4f\x9c\x76\x42\xce\x02\x8e\xb2\x42\xf6\x42\xa9\xd8\xf8\x0e\x02\x55\x95\x3a\x52\x8b\x40\x58\x56\xae\xc5\x0b\x03\x53\xdb\xef\x15\xa2\x68\xcd\xac\xe9\xc5\xed\xb9\xe5\xb8\xd6\x14\x1e\x7f\x10\xef\x13\xcc\x77\x37\xa6\x61\xca\x69\xd1\x9f\xd6\xf9\xd5\x70\xb4\x4e\x3f\x9e\xda\x1f\x06\xa2\x75\x7b\x33\x9d\x0c\x44\x6a\x76\x39\x3b\x15\x62\xf5\xc2\xb6\x1c\x22\x0d\x01\x70\xc4\x0f\x9c\xfe\x08\xa7\xa8\x34\x83\x38\x55\xf7\xe9\x30\x4e\xf3\x7b\x22\x90\x6b\xc4\xad\x16\x40\x6c\x97\x62\x7c\x08\x94\xb3\xa3\x5a\x98\x13\x8f\x5a\xe2\x9c\x2d\x3b\x39\x1c\xd0\x69\x23\x3c\x54\x50\x16\x53\x2a\xbe\x61\x3b\x99\xc8\x77\xb5\x35\xe1\x4d\xa9\xf6\x79\x10\xf9\x1c\x3b\x7b\xab\x1b\x45\x9d\xc9\x6a\xd2\x79\x75\x68\x27\x3c\x50\x87\x66\xd2\x0d\x0d\x16\x4e\xe5\x31\xa2\x3f\xe6\x90\x6e\x41\x15\x71\x53\xc0\xb1\xab\x42\x2a\xe2\x5a\x79\xa8\x21\xb9\x68\x2a\x0f\x33\xcd\x27\x7a\x4c\x36\x81\x14\x12\x47\x32\x2d\x27\x38\x10\x9a\x60\x8f\x23\xdb\x6f\xdd\xe4\x32\xe2\x6d\xda\xb4\xe3\x90\x27\xde\x6b\x26\x93\x43\x86\x2c\xb9\xd5\x95\x0d\x33\x91\xba\xa8\x76\xf2\x96\xd7\x26\x86\xcc\xa5\x38\x36\xdf\xda\xb3\x1b\x03\xd0\xd1\x60\x58\xb0\xcd\xae\x59\xfc\xfd\x2b\x96\xa3\xc2\x56\xf0\xfc\x68\x9c\x2d\x39\x09\x59\xe7\x85\xd3\xe3\xc2\xc1\x28\x7d\x71\xe9\xb8\xc0\x15\xe3\xed\x6f\xb3\xe9\x8d\xb1\x0e\x9c\xc8\x0b\x8c\x57\xef\x7b\x28\xf0\x6d\x41\xc4\x6f\x5f\xbd\x3f\xb8\x8c\xad\xf5\xd8\x56\xc8\x3e\x50\x4b\x86\x8d\xee\x88\x8b\x29\x0d\x68\x4f\xa8\x55\x34\x1e\xc5\x5a\x55\xed\x00\x60\xab\x09\x7f\x45\xdb\xda\xe1\x7d\xce\x70\x5b\x83\xb4\x2a\x04\xdd\x3f\x13\x07\x40\xac\x3a\x28\x7d\x22\xf6\xd5\x20\xd9\x84\xf9\x10\x50\x58\x03\x7f\x43\xb0\xef\x07\x72\x59\x54\x1a\x02\xe5\x42\xb4\xb8\xc3\xbc\x27\xcc\x69\x22\x8f\xe2\x9c\xae\x77\x00\xa0\x8b\x29\x7f\x45\xba\xfa\x21\xfe\x0a\x75\xcf\x14\xea\x54\xdc\xf5\x65\x01\xaf\x5e\x86\x67\x01\x7b\x39\x98\xea\x8f\x7b\x6b\xbc\xee\xf0\x22\x15\x5a\xa5\xa8\x77\x3e\x3d\xcf\xe3\x1d\x3c\xb5\x7e\x25\xbe\x93\x02\x9e\x48\x2e\x51\x50\x77\x07\xe5\x65\xa8\x4b\x9a\x34\x86\x06\xd1\xe0\xdd\xf0\xdb\x5c\x82\x6c\xe5\x5e\xbe\x7e\xd0\x4e\xc0\x41\x77\xf2\x81\xe0\x33\x78\xdf\x98\x99\x0e\x42\xfd\x6d\xea\xef\xd9\x87\x7a\x82\x0d\xa8\xd8\xd0\xfb\x4f\x99\x24\x31\x08\x08\xa9\xdc\x8f\x93\xa3\x34\x07\x04\x89\x9f\x38\x87\x4c\x6f\xe3\xbf\xbd\xbc\xfc\x60\xc1\x60\xb8\x64\x09\xed\x2c\x95\xf2\xfe\x0b\xc5\x6e\x39\x5d\x62\xce\x7d\x03\xfe\x8d\xe6\x5e\xb0\xb8\x93\x57\xf2\xb3\x0b\x79\x81\xdd\x34\x8b\x24\x7e\x5b\xbe\x8f\xcf\xdb\x20\xf0\xe4\x93\x33\x41\x5d\xcd\xc4\xd5\x2b\x63\xbe\x1c\x11\xdf\x0d\x4c\x71\x63\x26\xef\xcb\x81\xe6\xd9\xd5\x6d\x0e\xb8\x92\x84\xef\x24\xc9\x25\xdb\xd1\x4c\xaa\x95\x62\x69\x76\x10\x07\x84\x48\x32\x52\x54\x92\x49\x2a\xd1\xc9\x91\x1b\xd0\x75\x56\x39\xe2\x1e\x64\x07\x8d\xe0\x12\xb3\x7f\x44\x98\x3e\x88\x14\x94\xf5\xe9\x42\x64\x0a\x26\x79\x26\x31\x31\x95\x17\x13\x6f\x7c\x4a\x5e\x23\x16\xcd\xd7\x24\xf9\x88\x45\xdf\x65\xda\x64\x12\x8f\xc4\x08\x70\xe8\x41\xe1\x23\x80\x52\x9d\x25\x0d\xa2\xd0\x48\xae\x46\x6c\x1d\xe7\x43\xca\xfb\x62\x16\x2a\xaa\x54\x1a\x88\x87\xeb\x54\xa6\x93\x54\xa5\xee\x62\x6b\xd1\x9f\x9a\x98\xd2\x96\xea\xc9\x15\x0d\x2f\x27\x0b\x48\xf3\x8b\xd4\x4a\x31\xdf\x31\x2b\xa4\xc8\x99\x99\xca\x14\x56\x31\x6b\xc4\x9d\x10\x31\x3f\xa0\x0e\x61\xe2\xa1\xd3\x5c\x3e\x95\x14\xdb\x44\xc2\xb2\x1c\x02\x3a\xe0\xae\x9c\xa6\x59\x4a\xdb\xee\x39\x54\xfb\xc0\x05\xe4\xa5\x98\xad\x0a\x6f\xef\xae\xa6\xd7\xf6\xe5\xc4\xd2\x0f\xa1\x7b\xe5\x0c\xf3\x72\xe6\xa7\xb0\xf1\x17\xa5\x87\xb5\x33\xb0\xad\xf5\xd4\xcf\xb6\x47\x92\x21\x74\x7a\x5d\x2e\x1b\x2e\x23\x95\xbc\x68\x0b\xa2\x8e\xdb\x09\x43\x1d\xf7\x49\x20\x14\xd8\xb4\x45\xd0\x02\x31\xfd\xfa\x96\x5b\x33\x11\x5a\xe6\x92\x90\x9a\xa2\xab\xe3\x3e\x0e\xae\x35\x82\x7e\xc5\xd6\xda\xd9\x51\xa3\xb1\x8e\xd0\x5a\x61\x8f\xed\x91\x35\x45\xd5\xc9\xbb\x01\x41\xb5\x81\x6c\x79\x09\x04\x9e\x4e\xde\x3d\x7f\x38\x75\xdc\xd6\x68\x1a\x66\x9e\x94\x3e\x19\x11\xf9\xc3\x2c\x6f\x7d\x1e\x29\x2a\x36\x99\xd0\x22\x21\x23\x33\x40\xf6\xc5\xe5\x64\x2a\x12\x59\xb4\x05\x15\x94\x5c\xdd\xd9\xfd\x39\x1f\x3c\x93\xf4\xa1\xc9\x97\x3e\xbc\x6a\x23\xe2\xe4\x9d\x7c\x9d\x71\x30\x19\x63\xfa\x15\x42\x66\x3f\x76\x80\xbb\x70\x00\xf7\x56\x33\x81\xf7\xe0\x5d\x05\xb5\x47\x47\x73\x1f\x82\x3e\x62\xc2\x85\x74\x84\x62\x16\x79\x2b\x79\xd2\xa1\xeb\x25\x50\xf6\xad\x6a\x59\x9e\xc1\x9c\x3a\xe9\xe6\xd4\xc9\xd3\x38\x75\x32\x8c\x53\x27\xbd\x9c\x3a\x69\xe0\xd4\x6b\x04\xfd\xea\xd4\x6b\x31\xa1\x46\x63\x1d\x9d\x7a\x85\x3d\xf6\x71\xea\xf6\x90\x4e\xbd\x81\x6c\x65\xa7\x6e\xff\x09\x9c\x3a\xf9\x62\x4e\x9d\x94\x61\xf7\xea\xf4\xec\xd7\xe9\x6c\x48\x8f\x49\x72\x1e\x33\xa6\xdf\xdc\xad\x57\x08\x39\xbd\xbe\xbe\xbc\x3e\x9c\x8c\x9a\x7c\x2f\x11\xed\xc1\x23\x8f\xbc\x8c\xf6\x93\x46\x1e\x35\x28\xd3\x21\xf2\xd8\x6b\x72\x3d\x3c\x7d\xf1\x3d\x57\xf3\xd8\x63\x9f\x7d\xf5\x12\x28\x97\x62\xd0\x4b\x1e\x7b\x88\x58\x88\x3c\x55\x2c\x24\x3e\x86\xed\x12\x0c\xa9\x97\x07\x87\x8f\x86\x04\x9f\xb6\xe1\xd0\x39\x5e\x07\xf4\xa1\x43\xd4\x03\xcc\x1e\x0f\x7b\xea\x24\xfa\x1a\xf7\xd4\x22\x52\x9d\xca\x3a\x06\x3e\x55\xb6\xd7\x3e\xf2\x29\x52\x65\xf7\x28\x1c\x52\x4a\x49\xaf\x62\x8a\xd4\xf7\x69\xa2\x83\xad\xda\x1e\x61\x43\x10\x7d\xee\x21\x12\x74\xe5\x09\xb7\x91\xeb\x6c\xab\xdb\x36\x72\xf2\x0a\x73\xd8\x6d\xe4\x90\x75\x02\xd9\x90\x3d\x09\xc6\x02\x9b\xb6\x10\x7b\x45\x83\x05\x66\x0c\xb3\x0e\x28\x1b\xb2\xc7\x41\xb6\x46\xa4\xce\x18\x9b\xfd\x80\xe0\xbf\x1e\x6e\x6b\x94\xd7\x11\xc7\x2a\x8c\xb0\x29\xd8\x3e\x2f\x5c\x0a\x59\x15\x2c\x0d\x36\x08\x37\x12\x38\xe0\xd7\x0f\xf8\x04\x2f\x28\x46\x12\xcd\x8b\x8b\xea\xcc\x8a\xba\xd1\x38\x7c\xb0\xcf\xed\x99\x15\x32\xdf\xfa\x00\x13\xae\x7e\x0c\x46\x7b\x7d\x5d\x56\xb8\x74\xc9\x3f\x9c\x6c\xe7\x01\x6d\xb0\xd4\x4f\xc5\x08\xbd\x88\xc5\x47\x2b\x3c\x6a\x35\x07\xf2\x1c\x35\xd3\xa4\x9b\xe3\x08\xd9\x21\xfc\xc6\x66\xd9\xc9\x6f\x6c\x96\x4f\xe2\x37\x80\x4d\x5b\xbf\xf1\x11\x2d\x29\xf2\xb9\xb1\xf4\x82\xb9\x38\x2e\x94\x23\x1e\x75\xf1\x21\x9b\xe5\xe3\x3e\xa4\x46\xbc\xaf\x71\x7a\xed\x8c\xa8\xd1\x58\x47\xc7\x51\x61\x85\x7f\x4e\xc7\xb1\x59\x3e\x61\x3c\x5b\x33\x06\xdd\x50\x69\xb3\x1c\x1a\x95\x58\xcb\x5c\xcc\x10\x02\xc5\x34\x11\x33\x76\x00\xb9\x64\x4c\x51\xc5\xba\xb2\x27\x22\x33\xd0\x5f\xa6\x29\x99\x61\x9c\x7c\x1e\x12\x67\xdf\xe9\x36\x3a\xa3\x31\x4b\xaa\x59\x0e\x64\xd2\xe2\xb6\xd0\x42\x3f\xce\xfc\xd7\x24\xd7\x5d\x91\x62\x98\xa6\xd9\xee\x21\x8b\xe0\x5e\x76\xc0\x28\xf4\xb3\x61\xe2\x7b\xda\x2b\x4a\x02\x4a\xf8\x43\xcb\x66\x17\x64\xd1\x30\x03\x35\x69\x72\x43\xfe\xdd\xb6\xc9\x35\x66\x60\xba\xfe\x9e\x2c\x7b\x91\xac\x1a\x7f\x65\x7c\x12\x37\x9b\xe9\xf3\x17\xf7\x7f\xa6\xde\x6e\x00\xd2\xcf\x0d\x5e\xfd\x28\x06\x40\x7c\x65\xf0\xe8\x00\xf4\x4a\x7b\x8d\x5d\x7f\x87\xac\x57\x7d\xbf\x0a\x36\x4a\x37\x03\x1f\x63\x01\x11\x4e\x66\x33\xdf\xee\x71\xc2\x43\x8e\xd2\xed\x70\x94\x6e\xa6\xd7\xbd\x0e\xc4\xc8\xf7\xf0\xda\x1e\x88\xd2\x85\x7d\x36\x1d\x88\xd4\x47\xfb\x7a\x36\x10\xa9\x6b\xf9\x0a\x61\x08\x4a\x33\xfb\x7c\x2a\xe2\x20\x35\x29\x07\xd2\xd9\xa9\xa4\xd9\xf7\xe4\x0f\xed\x61\xfa\x27\x41\xc7\x9e\x5d\x05\xd0\xc2\xdf\x5e\xab\x92\x8c\x57\x95\x01\x9a\x8e\x26\x32\xd7\x10\x4f\x18\xba\xb9\x2a\x88\xdd\x4f\xee\xc0\xed\x4c\x7d\xe4\x38\xf1\xc9\x9f\x27\x9a\x4b\x12\xd4\x9e\x24\xe7\xdd\xe5\x83\x4a\x71\x96\x20\xc4\x2c\x09\x23\x55\x4b\x9e\xa7\x3f\x72\x83\x88\x8a\x53\x2a\xd3\x73\xfa\x4c\x03\xf4\xb5\xc0\xab\xc0\x83\x31\x39\x86\xce\x5c\xa5\xb7\x2a\x06\xbb\xc2\xe0\x21\x1c\x01\x7f\xe9\x56\xa3\x2a\xfb\x88\xbc\x28\x77\xaa\x5d\xc5\x11\x79\x6d\x03\x81\xcc\x37\x09\xd0\xba\x78\x30\x9a\x3c\x2d\xaf\xea\x18\x34\x2b\x39\x58\x6f\xb7\x8b\x4f\xc6\x6a\xc1\x75\xb3\x94\xef\x69\x4c\x15\x3b\xdc\xe1\x07\xb1\x12\x50\x45\xb1\x07\x01\x29\x02\x4f\xd0\x15\x72\xfc\x94\x38\x1c\x7d\x62\xaa\x5a\x7e\x4c\x45\x8b\x5a\xf8\x6f\x20\x45\x12\x04\xe9\x28\x67\x8d\x16\xab\x34\xca\xd1\x5c\xce\xa1\x50\xb4\x2b\x7c\x7a\x02\xa5\xd6\x2d\x40\x68\x1a\xe8\x6c\x54\x7d\x1d\xed\x44\x11\x29\x7d\x7f\xd2\x22\x0a\x49\xe9\x4b\x27\xf8\xf7\x94\xbc\x24\xfc\x5d\x7d\xa0\x13\x0b\x77\x81\x0a\x5e\xb9\xb2\xd6\x15\x0d\x36\xc4\xc1\x74\x5f\xcd\x86\xd2\x42\x50\xc8\xb5\xcf\x7e\x9d\x8a\x2b\xd6\x86\xd8\x34\xd2\x0e\xed\x15\xbd\x21\x2b\x3d\x34\x2e\xf1\xc4\x0a\x9b\xaf\x14\xd7\x9f\xfe\x92\xb2\x15\x8f\xc4\x93\x3a\xce\x95\xa1\x42\x03\x93\x61\x10\x2f\x2f\x56\x4d\x22\x67\xe2\x1a\xf8\x0f\xa3\x6c\xb0\x10\x2d\xd0\x08\xd7\x80\x75\x61\x82\x18\x39\x8a\xfb\xea\x27\x68\xdb\x35\xfc\x89\xd7\x18\x49\xf8\xa3\xd6\xe7\xf9\xc3\x4e\x87\xfc\x02\x88\x14\xbf\xd1\x49\x1f\x89\x60\xaf\xf6\x61\xa8\x2d\xb6\xb6\x82\xb4\xb8\xda\xa7\x0e\xa1\x78\xc1\xe5\x8b\xc5\x81\x3e\xf8\x49\x8c\xa2\x87\xb3\x4b\xdc\x33\x50\xd0\x87\x4c\x83\x39\x89\x15\xb7\xf8\xdf\xab\xf8\x60\xde\x8b\xbb\xe3\x2d\x5f\x11\x66\xad\x90\xef\x78\x58\x96\x14\x4f\x37\x45\x8d\x78\x15\x02\x02\x31\xe0\xab\x2c\xea\xeb\xb3\x7a\x80\xee\xa9\x47\x96\xfe\x99\x2a\x57\xe3\x5a\x92\x2d\x6d\x07\x65\xba\x6a\x02\xd6\x5a\xae\x82\x5b\x11\x15\x11\xc5\x3c\x5b\x5b\xaa\x2b\x7b\x70\x26\xd2\x1a\x5c\x25\x5d\xfa\x4f\x00\x00\x00\xff\xff\x4e\x2b\x21\x3d\x48\x67\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26440, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

