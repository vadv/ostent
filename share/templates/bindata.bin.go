// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x7b\x73\xdb\x36\xb6\xff\x3f\x9f\x02\x97\x6d\xef\xdc\x76\x2a\xea\x26\xdb\xee\x66\x52\xdb\x33\x8e\xa5\xa4\x9a\xc6\xb6\xd6\x96\xb3\xdb\xbf\x3a\x94\x08\x49\x88\x29\x92\x25\x40\x39\xae\x47\xdf\x7d\xcf\xc1\x83\x6f\xca\xa4\x44\x2b\x9e\xd9\x64\x26\x16\x1f\xc0\x79\xe1\xe0\x87\x03\xe0\x10\x47\xff\x33\xb8\x3c\x9b\xfc\x3e\x1e\x92\xa5\x58\x79\x2f\x4e\x8e\xe4\x0f\x21\x70\x41\x1d\x17\x2e\xf0\x72\x45\x85\x43\x66\x4b\x27\xe2\x54\x1c\x5b\xb1\x98\xf7\x5e\x5b\xd9\x57\x4b\x21\xc2\x1e\xfd\x33\x66\xeb\x63\xeb\xdf\xbd\x9b\xd3\xde\x59\xb0\x0a\x1d\xc1\xa6\x1e\xb5\xc8\x2c\xf0\x05\xf5\xa1\xde\x68\x78\x4c\xdd\x05\xcd\xd5\xf4\x9d\x15\x3d\xb6\xd6\x8c\xde\x85\x41\x24\x32\x85\xef\x98\x2b\x96\xc7\x2e\x5d\xb3\x19\xed\xc9\x9b\x1f\x09\xf3\x99\x60\x8e\xd7\xe3\x33\xc7\xa3\xc7\x2f\x0d\x21\xc1\x84\x47\xe5\x35\xdc\x3d\x3c\xd8\x03\x47\x38\xf6\xaf\x01\x17\x48\x7c\xb3\x21\x70\x05\x24\x8f\xfa\x69\xb9\x93\x23\x8f\xf9\xb7\x24\xa2\xde\xb1\xc5\x80\xa5\x45\xc4\x7d\x08\x72\xb0\x95\xb3\xa0\xfd\xd0\x5f\x58\x64\x19\xd1\xf9\xb1\xd5\x9f\x3b\x6b\x2c\x60\xe3\xb3\x52\x55\x2e\xee\x3d\xca\x97\x94\x0a\x43\x40\xd0\xcf\xa2\x3f\xe3\x3c\xa9\x0f\xd7\x7d\xe6\xbb\xf4\xb3\x8d\x4f\x35\x05\x3e\x8b\x58\x28\xb2\x55\x3e\x39\x6b\x47\x3d\xb5\x8a\x76\x26\x3c\x9a\x01\xa1\x4f\xbc\x1f\xa1\x85\x23\x0a\x57\xaf\xec\x97\xf6\xcb\xd7\xe6\x81\xbd\x62\xbe\xfd\x09\x78\xba\xa0\x78\x6f\xe5\x30\x5f\x95\x7f\x78\x60\x73\x62\x4f\x4e\xdf\xbf\x1f\x0e\xa6\xcc\xdf\x6c\xa0\x9c\x16\x46\xd5\x78\x78\xa0\x1e\x07\x0b\x01\x87\xfe\x8a\x79\xb7\xfa\xa5\x7c\xe1\xbb\x9b\x8d\x65\x8c\x7a\xd4\x57\xc2\x69\xf9\xfb\xda\x35\x4e\x8e\xa6\x81\x7b\xaf\x1f\xfa\xce\x9a\xcc\x3c\x87\xf3\x63\x0b\x2e\xa7\x4e\x44\xd4\x4f\xcf\xa5\x73\x27\xf6\x84\xb9\x9d\xb3\xcf\xd4\xed\x89\x20\xb4\x48\x14\x40\x33\x62\x69\xb6\x00\x67\x81\x66\x48\xf8\xb9\x2c\x21\x86\x1e\x01\x2a\x51\xa8\xe9\xc5\xcc\x35\x65\x0a\xa5\xdc\x28\x08\xdd\xe0\xce\x37\x5c\x50\x42\x1a\xa5\x85\xa5\xb0\xb1\x10\x81\x9f\x17\x12\x04\x59\x2c\x3c\x0a\x7e\xe7\x79\x4e\xc8\xa9\x6b\x5a\x52\x15\xd6\x36\x55\x85\x50\x16\x55\xca\x3c\x76\xa2\x05\x36\xd4\x37\x9a\x56\xf2\x3a\xc3\x56\xb6\x77\xe8\x24\x6c\x79\xd4\x0b\x7c\xef\x3e\x5f\x04\x0a\x4d\x94\x1c\xa9\x31\xc0\xe6\x50\x6d\x0b\x25\xf4\xcb\x1e\xb0\x2d\x91\x7a\x36\x35\xfb\xca\x88\xb9\x46\x70\x08\x73\xd3\xe6\x9a\x46\x8e\x0f\x26\x2f\x34\xa2\x69\x14\x6d\x56\x5d\x28\xd7\x12\xa6\xa8\x45\x9c\x88\x39\x3d\xfa\x19\xb8\xbb\x14\x28\x8b\x28\xa6\x49\xef\x2b\x36\x04\x3a\x0c\xb2\x5f\x6a\x70\x28\xa9\x51\x46\x8f\xa3\x3e\x54\x2a\xea\xe5\xe4\x54\x8a\xbd\x92\x02\x2b\xea\xc7\xc6\xbf\xd5\xb5\x14\xd3\x73\xa6\xd4\xf3\xa8\x3b\xbd\x2f\x9a\xa0\xc0\xc1\x63\x25\x92\xda\xa3\x35\xd1\x30\xa2\x1c\x40\x2d\xd7\x6d\x92\xea\x51\xec\xfb\xcc\x5f\x1c\xf5\x3d\x56\xa6\xdb\xa0\x3e\x34\x52\xa9\x45\x00\xa5\x8a\xe5\x32\xf6\x1a\x8c\xae\x27\x57\xa3\xb7\x68\x2e\xa7\xec\x1a\x25\x31\xfa\xb1\x97\xb3\x60\xce\xc6\x69\x33\x15\xbb\x55\x0a\x09\xea\x01\xd9\xd2\xef\xb2\xcd\x82\xd0\xa4\x8b\xc2\x4f\x85\xad\x91\x19\x0b\xad\x22\x34\x54\xe8\x9c\x68\x3c\x1a\xa3\xb2\x55\x06\x2e\x98\xae\x6c\x5d\xa3\x9e\x29\xe1\x39\x55\x9c\x49\xa1\x37\xb4\xea\x00\xe5\x96\x4a\xb8\x02\xb7\xd2\xdb\x8c\x5e\x1f\x4e\xab\x7c\xbe\xa2\x99\xca\x66\xde\xc5\xfb\xab\xa4\xd9\xd3\xfd\x25\x89\x38\x14\x6c\x45\x4b\x0d\x94\x90\x6f\x48\x46\xc3\x95\xa2\x56\x81\x53\x95\xbd\x22\x67\xcf\x1b\x59\xb5\xaa\x63\x68\x9b\x56\x4a\x98\xef\x20\xd5\x25\xcb\xdd\xa8\xce\xe3\xcd\x65\xc4\x16\x4b\x51\x0f\x35\xdb\xdc\x3e\x43\xdb\x63\x5c\xf4\x98\x0f\x61\x10\xad\xed\x55\x86\x74\x8d\x4d\x15\x3c\x7f\x83\x41\x40\xb5\xf5\xf0\x55\x3b\x8b\x3d\xc6\x2b\xe4\x75\xac\x42\xde\x2d\xa7\xf5\xa2\x8e\xd3\xda\x59\x00\xd8\x8b\xa7\x70\x85\x72\x8f\x21\xce\x4c\xb0\x75\x79\x88\x2b\x8c\xc0\x6b\x1a\x71\xf4\xfe\x9a\x31\x78\x97\x61\x17\x67\x03\xfc\x4d\xbf\x7f\x77\x77\x67\xc3\x38\x1a\xc1\x7f\x7b\x16\xac\xfa\x2a\x0e\x87\xa8\xd5\xa3\x0e\xa7\xbc\xef\x39\x82\xf2\xaa\x51\xe5\xf2\x7a\x32\xbc\x98\x54\x0d\x25\xfb\x81\x8d\xd1\xf5\x49\x10\x47\x13\xef\x02\x72\xba\x31\xa3\xa4\x66\x60\xe8\xe3\xf0\xea\x7a\x74\x79\x71\x18\x1c\x2a\x0c\xe7\x99\x5b\xb8\x01\xac\xd0\x33\x06\x33\x22\xc9\xb9\x40\x75\xb4\x4f\x42\xc7\x75\x21\x94\xc1\xf9\x02\xa7\x6b\xd0\xfb\x9e\x2f\x2b\xa7\x09\x51\x70\x57\x9c\x1a\x20\xed\x15\x5d\x41\x98\xae\xe6\xa1\xaa\xe0\xd4\x0b\x66\xb7\x18\xef\xf7\x56\x6e\xef\x95\xb9\x08\xe6\x73\x98\x73\xf5\x5e\xe6\x42\x88\x87\x07\x41\x57\x21\xda\x97\x58\x30\x8b\x01\xb1\xf8\x9b\x37\xea\xe2\x0f\x70\x7c\xea\x01\x75\x8b\xd8\xc5\x01\x33\xe5\xce\xe6\xdb\x98\xff\xad\x1d\x33\x36\xdf\xca\x6b\x16\xc6\x5b\x35\x6d\xc7\x0c\xa8\x6d\xe5\xe6\x76\xa9\x99\x5b\xad\x59\xde\x6f\xcc\x4d\x93\xc9\x61\x13\xcf\x08\xf9\x36\x0d\x5e\x17\x1c\xa3\xa5\xf9\x60\xb4\x39\xbc\x46\xeb\xc5\x13\x6a\x04\xa3\x5a\x1b\x8d\xb6\x2e\x71\x98\x0a\x6b\x27\x22\x88\x4e\xe4\x98\x68\x9c\xda\x6c\x7e\x29\xae\x35\xe8\x25\x06\x5c\x75\x90\x0b\x54\x0f\x0f\xfd\x1f\x5e\xfc\xd0\xdf\x6c\x1e\x1e\x94\x7c\x19\x81\x1d\x04\x6f\x5c\x9f\xb1\x40\x52\x8d\xa3\x40\xf9\x57\xf8\xc5\x75\x20\xff\xcc\x63\xb3\xdb\xe3\x07\xb1\x64\xdc\x5e\xc2\xc8\xe5\x51\xf9\x64\xf3\x42\x21\xe5\x04\xe4\x54\x08\x79\xa2\x57\x40\xb6\x31\xd3\xd6\x99\x79\x30\x73\x80\x5a\xcc\x0f\x63\x81\x7a\x8c\x06\xa7\x42\x44\xc0\x0f\x6e\x64\x43\x6c\x36\xe9\x94\xa5\x37\x5b\xd2\xd9\xed\x34\xf8\x6c\xd6\x19\xd2\x7b\x39\x6c\x2d\x99\xeb\x52\x3f\x19\x4f\xe5\x1d\x4a\xf3\x89\x7f\x3e\xf3\x02\x98\xf2\x58\x92\x0f\x32\x94\x23\x1c\x32\x7c\x17\x44\x9a\x63\x96\x21\x8a\x85\x6f\xcf\xff\x75\x8d\xcb\x54\xaa\x44\x41\x51\x49\xa2\x95\xb2\x61\x0c\xce\xc7\x2d\x2c\x73\xc7\xc4\x92\xe0\x1d\x78\x13\xba\x06\xd0\xc5\x3f\x6a\x49\xe9\xe1\x01\x22\x9d\x05\x25\xdf\xb2\x1f\xc9\xb7\xb3\x20\xa2\xe4\xcd\x31\x51\x43\xd1\xd9\xf8\xc6\xfe\x00\x31\x24\x08\x20\x22\x90\x50\xbe\xb6\x2f\xec\xdf\xe8\x3d\x0a\x49\x24\x92\x01\xdd\xe9\x7d\xef\xc2\x52\x22\x1f\x09\xd7\xf8\x34\xfa\x92\x0a\x64\x89\x1f\xdc\x45\x8e\x8e\x20\x4f\x12\x3a\xa8\x97\x70\x6b\x6b\x25\x6b\x70\xb8\xaa\x91\xda\xcb\x54\xbf\xe1\x34\x3a\x53\xcf\xd2\x15\xc5\xf4\x15\x12\x4f\x16\x3a\x4e\xf6\x61\x74\x7d\xcf\x35\x1f\x52\x64\x04\xaf\xba\xe3\x33\x92\x4e\x5e\xa9\x10\xbe\xaa\x61\xd4\x17\x51\xc6\x2d\xf2\x3f\x4d\x9c\x44\xe1\x10\xb6\x30\x5e\x24\x42\xe3\xcd\x4b\x02\xb1\x0c\x0b\xa9\xc6\x2a\xa5\x57\x66\xad\x19\x38\x1b\x3c\x11\xcb\x2c\xd2\x24\x77\xf8\xe2\x11\x77\x90\xc5\xb0\xc1\x72\xab\x57\xb1\xcf\x72\x71\xd2\xc9\x77\x85\x65\xab\x5d\xb8\x40\x6b\x3d\x3d\x13\x6c\xaa\x7d\xb8\xf4\xb5\x55\xe5\x53\xb3\x78\x2b\xd2\xd5\xdb\x6d\xf0\x6f\xfa\xbc\x82\x7f\x91\xe2\xb1\x6c\xc0\x36\xe8\xe1\xce\xa7\xf7\x10\xab\xfe\xd1\x12\x42\x5c\xc6\x6f\x53\xf8\x18\xbc\x93\x44\xf2\x10\x82\x45\xec\x01\x8b\x2e\x9c\x15\x4d\x81\x44\xf3\xd3\x60\xe2\xb2\x48\xae\xf9\x95\x20\xa5\x80\x23\x5b\x2c\x21\x31\xf5\xff\x34\x37\xba\x96\xdc\x60\x04\x09\xc9\xcb\x57\xc8\xad\xa7\xd8\xb9\x74\x2d\x19\x7d\x5f\x09\x45\x3b\x72\xd3\xba\x49\x6e\x7f\xcf\x32\xd3\x5a\x55\x33\x2b\xc1\x84\xb1\xd5\xe9\xda\x61\x5e\xbb\x2a\xd0\x9d\xa0\x99\xff\xd7\x9f\xf2\xf0\x97\x23\x1e\x87\x29\x9c\xd4\xeb\x10\x73\x1a\xd2\x68\x06\x71\x3b\x68\x92\xde\x90\x84\xe2\x58\x3d\x90\xd2\x1b\x9a\x8d\xf0\xce\x48\x35\x09\x84\x93\x55\x64\x2f\xe4\x32\x0e\xda\x09\x7c\x55\xda\x45\x2c\x93\x10\x85\x98\x2b\xed\xd8\x63\x27\x72\x56\xdc\x1e\x5e\xdc\x9c\xdb\xee\x9c\x58\xef\xae\x2d\x62\xc9\x6e\xb2\x1f\x9d\xf3\x71\x37\x74\x4e\x3f\x9e\x8e\x3e\x74\x40\xe7\xe6\x7a\x38\xe8\x80\xcc\xe4\x72\x72\x8a\xe2\xec\x85\x6d\x39\x44\xea\x02\xe0\x98\x1f\xb8\xfb\x23\x9c\xa2\xd2\x0c\xe2\x54\xd9\xc3\x61\x9c\xe6\x77\x20\x90\x6b\xc4\xad\x16\x1c\x46\xf3\x88\xd2\x96\x55\xe2\xce\x61\x0e\x49\xee\x8d\x73\x23\x69\x88\xee\x80\x4e\x3b\x6a\x57\x81\x9a\xa9\x59\xdc\x77\x3d\x19\xc8\x1d\xfc\x9a\x90\xa7\x54\xfa\x3c\x88\x7d\x41\xdd\xad\xc5\x49\xd1\x46\xb2\x98\x1c\xd0\x76\xa8\x87\xa3\xda\x0e\xd5\xe4\xb0\xd3\x59\x88\x95\xc7\x8d\xfd\x71\x88\xed\x16\x68\xb1\x79\x0a\x42\xa3\xaa\x30\x8b\xcd\xed\x3c\xfc\xb0\x5c\x84\x95\x87\x9e\xe6\x9d\xdf\x90\x4d\x60\x86\x99\xe8\xa6\x65\xa7\x07\x42\x03\xea\x09\x67\xe4\xb7\xae\x72\x19\x8b\x36\x75\xda\x71\xc8\x13\xdf\xab\xe7\xb2\x2e\x43\x94\xdc\x0c\x6b\x04\x3d\x2f\x9a\x3b\xb5\x9d\xb5\x3c\x3f\x21\x32\xa3\xe6\xd8\x7a\x3b\x9a\x5c\x13\xc0\x3c\xc2\xe9\x2c\xc8\x6e\x66\x03\xcd\xed\xb3\x96\xa3\xc2\x52\xf2\xf4\xa8\x9f\x7d\x72\x82\x7b\x33\x3b\x4e\x9e\x1e\x17\x0e\x5a\xe5\x8b\x4b\x27\x10\x47\xc8\xdb\xdf\x27\xc3\x6b\xb2\x0a\xdc\xd8\x0b\xc8\x4f\xef\xf7\x30\xe0\xdb\x82\x88\xdf\xfd\xf4\xfe\xc9\x65\x6c\x6d\xc7\xb6\x42\xee\x03\xad\xac\xdb\x08\x8f\xcd\x69\x14\x05\xd1\x9e\xd0\xaa\x68\x3c\x8a\xad\xaa\xd8\x13\x80\xab\x26\xfc\x15\x5d\x6b\x9b\xf7\x39\xc1\x6b\x0d\xb2\x9a\x10\x75\x5b\xcf\xeb\x00\xa1\xea\xa0\xf3\x40\xec\xab\x41\xb1\x09\xf3\x2e\xa0\xaf\x06\xee\xba\x60\xbf\x1f\xa8\x65\x51\xa8\x0b\x54\x0b\x9d\xd9\x2d\x15\x7b\xc2\x9a\x26\xf2\x28\xae\xe9\x72\x4f\x00\x6c\x86\xf2\x57\x64\xab\x6f\xe2\xaf\xd0\xf6\x4c\xa0\x4d\xc5\x55\x5f\x16\xe0\xea\x65\x78\x16\x30\x97\x83\xa5\xfd\x71\x6e\x45\x57\x3b\x6c\x5f\x42\xad\x14\xe5\xce\x87\xe7\x79\x7c\x83\xb7\xf6\x6f\xcc\x77\x53\x80\xc3\x9c\x13\x05\x6d\xb7\xf0\xbc\x0c\x6d\x49\x95\xc6\x50\x80\x15\xde\xb5\x59\xca\xc2\x0a\x9d\xae\xd7\x6b\x82\xfb\x2c\x63\x21\x89\x4e\x57\xeb\x81\xe0\x17\xd8\x67\xcc\x74\x11\x6c\x92\x36\xe5\xb7\xac\x35\x1d\x60\x91\xc9\x38\xff\xfe\xdd\x28\xc9\x10\x02\x42\x99\xb4\x14\xf9\xf8\xa5\xb2\xb4\x4a\x4e\xc8\xbe\x90\xf9\x74\xcc\x5f\x90\xa9\xf0\x7b\x32\x33\xc5\xec\x5c\x3b\x04\xbf\x54\x79\x3b\x96\xdb\xd4\xb2\x0b\xe5\x56\xfc\xdf\x5e\x5e\x7e\xb0\x01\xa4\xe7\x6c\x01\x3c\x89\x85\xf5\xd5\xd2\x9c\x22\x63\x12\x1d\xcb\x6f\x2c\x99\x12\xb1\x85\x98\xad\xbe\xba\xc0\xfc\x90\x24\x3f\x42\xca\x74\x36\xbe\x31\x89\x72\x27\x26\x4d\x02\x2f\xf3\x29\x3b\x3a\xed\x4a\x91\xb3\xda\x69\x01\xe2\x26\x39\x21\x2a\xcd\xc3\x4a\xd9\x1f\xcd\x83\x68\x95\xcd\xe6\x58\x06\x11\xfb\x0b\x33\x83\xbc\x9e\x7c\x35\x0d\x22\xa9\x65\x20\x44\xb0\x92\x8f\xac\xa2\xa6\xff\x8c\x69\x74\x8f\xb9\x21\xab\xd3\x19\x26\x1b\xe6\x14\x94\x93\x72\x99\xb0\x62\xd6\x3a\xa5\x08\x3d\x1e\x4f\x57\x2c\xf9\x9a\x49\xdf\x65\xea\x64\x5a\x1b\x99\xf6\x16\x51\x10\x87\x3d\x4c\xd2\xa3\x6e\x7e\xca\x9f\x29\x89\xcd\x22\x0b\x92\xe4\xaa\xc7\x57\x26\xb1\x52\xde\x17\x93\x92\x9b\xb8\x04\x88\x4c\xa5\x29\x93\xf6\x57\x2e\x20\xb9\xe8\x8f\x8e\xea\x3c\x40\xd7\xad\x6b\xff\x44\x90\x5f\xa5\x59\x8a\x39\x93\x4a\xbe\x34\x9b\x65\x28\xd3\x60\xb1\x17\xe1\xdd\xdb\x20\xf0\x52\xb9\x51\x28\x97\x71\x7c\xe9\x36\x97\x4f\x25\xd6\x36\x91\xb0\x2c\x07\x42\x09\xdc\x95\x53\x3d\x4b\x09\xfc\x95\x1f\x5e\x34\x6a\xde\x6d\x38\x03\xa2\x46\x94\x2f\xad\x7c\x93\x8d\x87\x57\xa3\xcb\x81\xad\x5f\x82\x66\x15\xb9\x64\xc8\xf3\x45\x49\xb4\xe4\xb2\xd8\xfd\x5a\xb8\x48\x7d\x57\x7b\x24\xf3\x41\x27\xd4\xe5\x32\xdf\x32\x02\xc9\x8b\xb6\xc8\xe9\xce\x0f\x0e\x9c\xb8\x61\xda\x15\x6e\xba\xf3\x5a\xd8\x2c\x54\xd2\x7b\xb5\xc2\x9e\x60\xb0\x99\x3a\xe4\x23\x90\xea\xce\xdb\x22\x2a\xaa\xb7\x17\xa0\xfe\x77\xa2\x27\x9a\x6d\x47\xf0\xac\x77\x82\x44\x8c\xc7\xb1\x33\xc5\xcd\xc1\xbb\x0e\x61\xb3\x81\x6c\x79\x09\x10\x31\x07\xef\x9e\x35\x60\xba\xf3\xc7\xf0\xb2\xf4\xf1\x0f\x06\xbe\x3c\xeb\x7e\x1e\x93\x7e\x21\x86\x7e\xbc\x42\xb3\xf0\xca\xcc\x0a\x41\xac\xd1\xc5\xe5\x60\x88\xd9\x27\xda\x39\x72\xf6\xab\x56\xc5\x69\x98\xb7\x91\x52\x2f\x7c\x3e\xd7\x42\xbc\xc1\x3b\xb9\x17\xf1\x54\xf2\x19\xf2\x25\x01\xd3\xcf\x1c\xba\x1b\x9d\xb0\x0b\x6e\x81\xad\x14\x12\xd5\x06\xb1\x82\xc4\x0b\x5a\x43\xb6\xa2\x09\x6b\x89\x23\x79\x39\xb3\xcf\xd2\x4f\x27\x4b\x8d\x3c\xb7\x90\x46\xa0\x86\xc9\xe2\x62\x40\x36\x43\x3c\xd5\x47\xee\xca\x34\x56\x27\x6d\xf2\xa6\xfa\xa8\xfd\xe3\xb6\xea\x64\xf7\x56\x1f\xd7\xa6\xb3\x88\x80\x1d\x3e\x22\x60\x1d\x46\x04\xac\x5d\x44\xc0\x5a\x47\x04\xac\x75\x44\xc0\xbe\x46\x04\xd9\xda\x4d\x23\x02\xb6\x7b\x44\x50\xef\x04\x89\x18\x6d\x22\x82\x51\x97\x11\x41\x03\xd9\xca\x11\xc1\xe8\x79\x47\x04\xec\x40\x11\x01\x43\xfc\x1d\x9f\x9e\xfd\x36\x9c\x3c\xc5\x90\x9b\x23\xbf\x53\x4c\x20\x29\x0c\xaf\xae\x2e\xaf\x9e\x4c\x3e\x4d\x7d\x77\xf1\x46\x4f\x16\xb2\xe4\xc8\x1f\x24\x64\x61\xcd\x42\x96\x64\xf1\xbe\xc9\x20\x5f\x70\xb2\x66\x83\x7c\xba\x91\xd8\x6e\x98\x2f\x6e\x85\x35\x0f\x5b\xcc\xbe\x6b\x63\x95\x12\xb7\x6c\xaa\x91\xce\xcc\x68\xab\x50\x2e\x6b\xa1\x8d\x3e\x8d\xc3\xb0\x82\x1b\x37\xd5\x67\x97\x30\x8c\x7d\xa9\x30\x0c\x3f\xe7\x3d\x74\x1c\x86\x9b\x4b\x9d\x05\x62\x6a\x8b\xa5\x3a\x12\x3b\xa7\xab\x20\xba\x6f\x18\x70\x01\xa1\xb6\x11\x97\x54\xe4\xeb\xaa\x76\x17\x51\x98\x34\xe5\x8e\x61\xd8\x16\x17\x48\x04\xd9\x16\x87\x35\x91\x8f\xdf\x39\xe1\xce\x02\x62\xe5\x92\x84\x5b\xd5\x19\xe8\xa8\xaf\x56\x19\x4a\x90\xe8\x33\x8e\xd5\x40\x8b\x43\x2d\x77\x4b\xdf\xd9\x6d\xb9\x3b\xd9\x4f\xed\x76\xb9\x3b\xe4\x07\x07\xd5\x90\x77\x87\xa9\x21\xaf\x85\xd4\x71\x14\xcc\x28\xe7\x94\x37\x44\xd5\x90\xb7\x05\x55\x54\xa4\x1d\xa6\xaa\x83\x79\xea\xf0\x34\xfb\x31\xc3\xf3\x82\xd6\x7d\xbb\x58\xc8\xab\x0f\xab\x78\x4e\xb8\x8e\xad\xb9\x23\x6a\xd6\x7b\x61\x16\x08\x1f\x99\x5d\x8f\xaf\x65\xff\x86\x5f\x3f\x10\x03\x3a\x8b\xa8\x23\x91\xb5\x38\xd3\xce\x4c\xb3\x1b\x49\xf9\x61\x74\x3e\x9a\xd8\x21\xf7\xed\x0f\xd0\x1d\xea\x25\xec\x35\x16\x2e\x5d\x07\xe8\x4e\xb6\xf3\x20\x6a\x30\xff\x4f\xc5\x08\xbd\x98\xa7\x27\x42\xe4\xc5\x7e\x6c\x64\x79\x1a\x6c\x47\xff\xd9\x0d\xda\x43\xfe\x14\xc8\xbe\x5e\x1c\x1c\xd9\xd7\x8b\xee\x90\x7d\xbd\xa8\x45\xf6\x8f\xea\xa4\x2e\xb2\xf0\x82\x29\x1e\x38\x2b\x1c\x11\x37\x45\xf9\xf5\xa2\x2d\xca\xa3\x52\x5f\x51\xbe\x09\xca\xaf\x17\xcf\x1f\xe5\xb1\x35\x77\x44\xf9\x7a\x8f\x4c\xc4\xa8\x43\xf9\x2f\x83\x48\xa8\xeb\x6e\x88\xb4\x5e\x74\x8d\x48\xbc\x65\x6a\x67\x08\xd1\x5b\x9a\xd7\x69\x70\x3f\x97\xdb\x89\x45\xec\xf1\x68\x80\x99\x84\xfe\x22\xcd\xf0\x0c\x4d\xee\x7a\xc8\xdc\x6d\x47\xd4\x68\x7c\xcb\x92\x6a\x96\xc2\x99\xd4\xb8\x29\xd4\xd0\xaf\x33\xff\x9a\xa4\xca\x2b\x52\x9c\x46\x69\xb2\x7c\xc8\x63\xb8\x97\x0a\x90\x82\x9e\x0d\xf3\xe6\x53\xad\x22\x06\x13\x79\x71\xdf\xb2\xda\x05\x9b\x35\x4c\x68\x4d\xaa\x5c\xb3\xbf\xda\x56\xb9\xa2\x1c\xfc\xd4\xdf\x92\xa4\x8f\x09\xad\xe6\x23\xe4\x13\x53\x6d\xa2\x0f\xed\xdc\xfe\x65\x7b\xbb\x06\x48\xbf\x56\xf8\x49\x36\x00\x7e\xa4\xf0\x68\x03\xec\x95\x21\x6b\x86\xfd\xca\x04\xd9\x57\x07\x39\xc9\x02\x63\x16\x50\x6c\xcf\x03\x1f\x90\xca\x4d\x37\x54\xae\x87\x57\xfb\x9f\x87\x21\xb5\xba\x1a\x75\x40\xe5\x62\x74\x36\xec\x80\xcc\xc7\xd1\xd5\xa4\x03\x32\x57\x72\x13\x61\x5f\x2a\x93\xd1\xf9\x10\xe3\x19\xd5\xb1\x3a\xb0\xd1\xa9\xa4\xb7\xef\x61\x1f\x7a\x84\xd8\x3f\xff\xd9\x44\x2a\x3a\xf8\x85\xe1\xe5\x4a\x3d\xc9\xcc\x53\x64\x18\xa5\x43\x8c\xcc\x35\x04\x19\x44\x57\x57\x0f\xcc\xf0\x91\x3b\x65\x3d\x53\x1e\xc2\x18\x73\x50\xe8\x89\xe6\x92\xac\x86\x9f\x24\x87\xce\x25\x81\xa1\x8c\x80\xf0\x0c\x41\x08\x64\x12\x46\xea\xc8\xb8\xcc\x61\x7c\x16\x01\x13\xcd\xe8\x32\xf0\x20\x72\xc4\x13\xf2\xc6\xe9\xad\x0a\x4f\xc6\x14\x40\xdd\x45\xc4\x4a\x17\xe8\xd4\xb3\x8f\x8e\x17\xe7\x4e\x93\xab\x38\x9a\xae\xed\xd8\x9d\xf9\xec\x00\x6a\xeb\x93\xcc\xec\xc4\x9a\xc9\xb9\x75\x92\xf7\x66\x63\xce\xba\x6a\xc1\x61\xbd\x90\x5b\x24\x96\x1a\xda\x6f\xe9\x3d\xc6\xe9\xea\x91\x01\x78\xb0\x62\xe0\x21\x5d\xb4\xe3\xcf\xc9\x78\xa0\xcf\x4f\x55\x13\x82\x21\xd6\xa8\x45\xe7\x06\x52\x24\x31\x8a\x0e\x42\x56\xce\x6c\x99\x06\x21\x9a\xcb\x39\x3c\xc4\x7a\x85\x0f\x4d\xe0\xa9\x7d\x03\x28\x98\xc6\x21\xfa\x40\x61\x1d\x8c\xc4\x31\x2b\x7d\x6d\xd2\x22\x48\x48\xe9\xcb\x31\xea\x1f\x29\x79\x49\xf8\xfb\xfa\x38\xc4\x08\x77\xe1\x14\x06\xcd\xca\x52\xe3\x28\x58\x33\x97\x46\xdb\x4a\x36\x94\x16\x62\x36\xa1\x87\xd4\xd7\xa9\xb8\x38\x5b\x83\xc0\x32\x55\x68\xab\xe8\x0d\x59\xe9\xa6\x99\x33\x0f\x27\xbf\x62\xa9\xb8\xfe\xfc\xff\x29\x5b\x7c\x85\x6f\xea\x38\x57\x8e\xe4\x0d\x5c\x86\x43\x38\x3b\x5b\x36\x09\x6c\xd9\x9c\xd0\x3f\x49\xd9\x61\x5d\x82\xc7\x49\xd6\xe0\x70\xa1\x83\x90\x1c\xc5\x6d\xe5\x13\x30\xdd\x35\x3a\x31\x53\x80\x24\x3a\x51\xb3\xe7\xfc\x19\xa6\xfb\x7c\xcb\xc3\x8a\x5f\xdb\xa4\xaf\x30\xf6\xaa\x7d\x19\x6a\x0f\xad\x2d\x20\x3d\xac\xf6\xad\xcb\x22\x3a\x13\x72\xb3\xad\xa3\x4f\x77\x12\x27\xd8\x63\xec\xca\x8c\xb7\x68\xf0\x65\x6e\x23\x4e\x9d\x74\x03\xee\x74\xea\xb1\x85\x7f\xa6\x9e\x2b\x3b\x97\x8e\x51\xcd\x9e\x31\x69\xeb\xa2\x09\x58\xea\x05\xb3\xd2\x61\x94\xf6\x99\x13\x51\x91\x2d\x2d\xc5\xcf\x1e\x3d\xe9\x68\x8d\x96\x89\x3a\xff\x09\x00\x00\xff\xff\x8b\x04\xa6\xf7\x9c\x68\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26780, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

