// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _defines_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\x20\x84\x74\x58\x81\x46\xc1\x86\xee\xa5\x73\x04\xb8\xb1\xd3\x0a\x8d\x93\xc0\x7f\x02\xec\xa9\x50\x2c\x3a\xe6\x22\x8b\x1a\x49\xb9\xf3\x02\x7f\xf7\xf1\x28\x51\x7f\x2c\xd1\x96\x64\x67\xd8\x43\xf3\x50\x8b\xe4\x4f\xc7\xe3\xdd\xfd\x8e\x47\xaa\x2f\x2f\x3e\x5e\x90\x10\x23\x2b\xf9\xe5\x1f\x3f\x26\x0f\xdf\xe6\x51\xcc\xe8\x77\x6e\x6d\xb7\x2f\x2f\xdf\x89\x58\x22\xfb\xee\x61\x38\x1e\xbb\x83\x21\xf4\xd8\xf0\x0f\x0e\x38\x86\xdf\xb3\x2b\xf4\xf1\x12\x51\x86\xec\xab\x9b\xfe\x64\x72\xdb\x1f\x0d\x91\x35\x0f\x3c\x9e\xbc\xcd\xbc\xf0\x09\xa3\x33\xf2\x1e\x9d\xcd\x29\xc3\x80\xb5\x07\x9e\xf0\xec\xab\xfb\x99\x7d\x43\xb8\xd8\x6e\x7b\x82\xa1\x67\xbc\xb9\x94\xb2\x00\x62\xdf\x6e\xb7\x4e\x4f\xf8\x48\x09\xb9\xb4\x04\xfe\x5b\x9c\x33\xf2\xb4\x14\x28\xa4\xdf\x99\x17\x59\x4e\x01\xd9\xbb\x10\x7e\x3d\xda\x72\x7a\x3c\xf2\x42\x04\x2a\x6e\xb7\x99\xf4\x19\xc7\xec\x0a\xb0\x72\x96\x62\x1f\x88\x02\xbc\xd3\x5a\xe2\x64\xc3\x53\x81\xc8\x29\xf4\x75\x17\xe8\xfa\x01\xde\x55\x11\xfa\x76\x24\x5e\x08\x26\x87\x71\xe8\x2b\x77\x14\x7e\xde\xec\x75\xac\xf0\x1e\x03\x6c\x81\xd9\xe1\x21\x53\x0a\x1a\xbf\x20\x2e\x18\x89\xf0\x79\x82\x91\x4a\x2f\xb1\x07\xba\x33\x78\x84\x19\x97\xf0\xb0\xc7\x33\x60\xc9\x64\x4d\x29\x26\x0e\x89\x5c\xe6\xdb\x5c\xf1\x43\x12\xa4\xe5\x8e\x13\x00\x96\x3a\x28\x01\x6c\x07\x4f\xc9\xf2\x1e\xa9\xbf\x91\xa6\x14\x78\x15\x05\x9e\xd8\xc3\x07\x64\xab\x88\x53\x78\xf9\x0b\x56\x72\x0e\x1b\xdd\x5f\x3c\x6e\x04\xe6\xdf\x4e\x4b\x29\x9f\xf0\xe7\x9c\x4e\x83\x6b\x35\x47\x95\x52\x00\xb3\x07\x84\xdd\x7a\x2b\xfc\x15\x6f\xca\xdc\x2a\x10\x2a\xc5\xf1\x67\x00\x7e\x99\x8e\x6e\xaa\xdc\xaa\xa2\x99\x19\x5c\x8c\x72\xfd\x42\x7f\xed\x91\xa0\x19\x54\x06\x92\x34\xea\x4f\xe1\x23\x8f\x7e\xef\xf1\x38\xaa\x30\x45\xa3\xee\x31\x9b\xe3\x50\x14\xf8\xb2\x33\xb2\xdd\xe6\xae\x57\x82\x1a\xcc\x3e\xa5\xc2\xcb\x14\xed\xc2\x33\xed\x72\x4d\xb6\x03\x4e\x6d\xc7\xc5\x34\x80\xce\x6e\x72\xf7\xdf\x90\xf0\x19\x32\x4e\xce\x0c\x40\x63\x66\x39\x28\xff\xeb\x79\x68\xc9\xf0\x02\xac\x77\x23\x03\xe6\x7a\x62\x7f\x91\x4d\x99\xb6\xe4\x5f\x6e\xd8\x74\x48\xa7\x34\x84\x9c\x01\x5e\x93\x79\xca\xa9\x1a\xa0\xc7\xb0\x28\xa0\x33\x63\x7b\x15\xb6\x1e\xd6\x69\x74\x6f\xd4\x49\x0e\x15\x66\x19\xd1\x38\x14\xd8\xdf\x8d\x0a\x0d\x6c\xab\x13\x2a\x25\xe5\xb2\x4e\xfd\x87\xbe\x7b\xa3\xd5\x2a\x4f\x95\x0c\xe9\xd8\x53\xe1\x9d\x9a\xa9\x1e\x58\x50\xeb\x38\x9d\x66\x93\xe1\x20\xb3\x54\x79\x2a\x35\x94\x6d\x48\xc0\x23\xad\x52\x2d\xb0\x68\xa9\xe3\x74\x9a\xde\x4d\xfb\x06\x3b\x25\x43\x7a\xe5\x8a\x5d\xf5\x76\x4a\x81\xfb\xec\x94\x92\xaf\x6d\x0a\x2f\x25\xe1\xae\x79\x9c\x84\xd4\x7f\xf5\x44\x9e\x4c\xf2\xff\xce\xe4\xee\x82\x61\xdc\x10\x1a\x37\x4a\xe5\x00\x33\xe4\xf2\xc2\x50\x97\x64\xee\x2a\x7b\x1e\x97\xcd\x53\xc7\x77\xae\x9d\x76\x33\x60\x9a\x52\x0d\xf9\x51\x27\xb7\xc3\x14\x4c\x52\xce\x61\x9c\x4a\x03\x87\x61\x09\x33\xbb\x54\x48\x65\x6e\x74\xe3\x17\x69\x59\x27\xe9\xb3\xc5\x22\x67\x8f\x6b\x2a\x83\xc8\xc2\x2e\xf1\xc6\xc9\xfb\x1a\x45\xbd\xc4\x0e\x70\x20\x3c\x37\x6c\x0c\xbd\x8b\x45\x13\x6c\x33\x89\x05\x61\x5d\x22\x98\xec\xd4\x23\xed\x8b\x7f\x57\x46\x24\x5b\x78\xd5\xa0\xad\x96\xe0\x48\x10\x11\xe0\x4b\xeb\x93\x3b\x9d\xa0\x48\x86\x18\xc7\x73\x1a\xfa\xb2\x34\x0f\x6b\x0a\xf3\x1e\x71\x1e\x7b\x17\xc4\x89\x78\xe3\x1a\xdf\x38\x81\xb4\xd2\x69\x67\x10\x40\x08\xf4\xe9\x8f\xe9\x70\x82\x56\xd4\x8f\x03\x8a\x3e\x7c\x36\x2f\xe4\x13\x4c\xf3\xf6\xc3\xe7\x53\xcd\x63\x5c\x4f\xed\x44\x2d\x29\x4b\x8e\xdf\x11\xc9\x02\x33\x46\xd9\x91\x94\x4d\x64\xfc\xe0\xac\xc9\xb8\xff\x29\x69\xcb\x7c\xd5\xbb\x76\x25\x06\x3b\x70\x69\x87\xa8\xa7\x14\x5d\xa2\xa6\x51\x70\x17\x62\x96\xc9\xd8\x58\x74\x6b\x2a\x16\x79\xd4\x95\x8b\x91\x37\x7f\xc6\xe2\x48\x32\xa6\x42\x7e\xb0\xd1\x68\xde\x1f\x74\x6c\xb6\x9b\xbd\x1e\x29\x2b\xf2\x5f\x95\x9a\x25\x5a\x75\xe3\xe6\x0a\xaf\xda\x92\xf2\x3d\x3a\x93\x6f\xe5\xcc\x1c\x0d\x47\x55\x4e\x4a\x84\xfd\x95\xc0\xe4\x9a\x91\x79\xcf\x01\x46\x00\xf0\xba\xc9\x21\x0e\x80\x95\xdb\xb8\xbc\x3f\x3d\x98\xe9\x14\xd0\xe0\x50\x06\x2f\x1e\x7d\xc1\x26\x85\xbc\xc6\x45\xb6\xe5\x80\x4d\xf6\x8d\xd7\x9d\xa4\x4e\x73\x84\xd2\x41\xd2\x2d\xc4\x22\xde\x32\xc2\x22\x46\xe7\x79\x78\xdd\x4f\xd4\x44\xd5\x10\x03\x98\x7d\xef\x0e\x4c\x1f\x65\x2c\x07\x95\x50\xfb\x9c\x9f\x21\x67\x45\x64\xf1\x3a\x30\x47\x70\xcc\x0e\x6f\x2b\xf9\xd4\x8c\x50\x46\xc4\xa6\x21\xfc\x56\x1e\xbe\x1b\x42\x27\xe4\x9f\xa6\xd0\x31\xe6\xc4\x57\x97\x14\xb5\x70\xa0\x09\x9c\xee\x35\x7c\x4a\x56\x35\x92\xf5\xd5\x4c\xc9\x1a\xbb\x9b\x6c\x17\xc6\x44\xbc\xfb\x65\xf4\xaf\x27\xb9\x8c\x2e\x5d\x35\x94\x6f\x7e\xef\x27\x32\x78\x6a\x2f\x34\x93\x91\xec\x86\x52\x36\xb2\xeb\xcc\x3a\xdc\x11\xd7\x99\xbb\x1a\xcd\x8c\x1a\xcd\x8a\x1a\xcd\xcc\x1a\xcd\xda\x6b\x54\xba\x1c\xaf\x68\x34\x19\x8e\xeb\x2e\x58\xd3\x11\x7d\x6f\x06\x8d\xda\x3b\x5f\x8d\xeb\x7e\x0d\x5d\xf1\xda\xd8\x35\x79\x4d\x8e\xe4\x5e\xcb\xf5\xa9\xc5\x9d\xd0\x6b\xb7\xee\xd5\xb0\xde\x46\x6a\x44\x2f\xfb\xd6\x35\x6a\x94\xe0\x4e\x67\xa3\x07\x77\x3c\xad\xd7\x48\x8d\xe8\x49\xa0\x61\xf0\x5a\x82\x3b\x9d\x46\xe3\xe1\xc4\xe0\x35\x18\xc9\x1c\x21\x1b\xa6\xc8\x56\xb8\x2e\x5e\xd3\x49\x70\x47\xa3\xa9\x3b\x32\x78\x4d\x8d\x64\x5f\x0e\x64\xc3\x60\xa3\x04\xd7\xca\x46\x7b\xb9\x06\x39\xd1\x10\x47\xfd\x82\x46\x57\x77\xa3\x51\xff\x76\x50\xfd\x0e\xa5\x71\xaf\xf0\x29\x23\xdd\xea\xbb\xd5\x09\x82\xd2\x40\x90\x48\xd7\x4e\x89\x42\xc5\xaa\xb9\x08\x40\xbe\xcc\xe7\xe7\xf2\x8c\x20\xa4\xdb\x2e\xad\xeb\x38\x08\xd2\x3e\xa9\xda\x1c\xaf\x54\xaf\x17\x0b\x8a\x02\xbc\x50\xd5\x9d\x3d\x59\x52\x26\xf2\xff\xa9\x60\x90\xec\x53\xc1\x91\xaa\xcf\xdb\x4e\x61\xdb\xf6\x9b\x37\xf9\x37\x00\xf8\x39\xbc\xe8\x98\xe3\x28\xa9\x53\x1b\x6c\x7f\x45\x57\x5a\x72\x45\xa9\xf7\xd4\xea\x1e\xbc\x20\xc6\xf9\x47\x88\xc3\x33\xaf\x9f\xd4\xc9\xde\xca\x6b\x2a\x4b\x77\x25\xbb\x3e\x0d\x40\xd2\xa5\xf5\x9b\x92\xaf\xf6\xcf\x07\xef\x49\xd6\x68\x62\x08\xa8\x9a\x1d\x7f\xef\x6c\x59\x11\x98\x56\x79\x2b\x6f\xbe\xcc\x77\xe6\x54\xf2\x48\x76\xc2\x7b\x35\x07\x0a\x39\x62\xcf\x66\xba\xdc\x73\xf2\xaa\x2c\x1b\x29\x57\x65\xbb\x08\xa8\x54\xcc\xa3\xf7\x8c\xae\x65\x89\xc4\xcc\x08\x59\x86\x8a\xc3\x1f\xad\x14\x34\x5d\xcc\x82\x04\x92\x12\x9e\x58\xee\x2f\x90\xf6\x5a\x8d\xcb\x1a\x66\xbe\x6c\x52\x3c\x93\x05\xc2\x7f\x21\x4b\xb0\x58\xb2\xe3\xe7\x3f\x39\x0d\x51\xd5\x69\xfe\x3b\x80\x9a\x09\xac\x23\x00\x95\x44\xef\xc3\x67\x84\x6f\x5b\xf5\xad\x9f\x76\x8e\x49\xc4\x87\x08\x4c\x3a\xdb\x9c\x99\x48\x76\xea\x71\x42\xe9\xe3\xac\x11\xa5\x2e\xcd\x3a\x38\x78\x30\x6b\xf9\x84\xe1\xb9\xa0\x6c\xd3\xe9\x48\x94\x79\xa6\x65\xae\x93\x69\x9b\x61\x0e\x0e\xed\xf9\x64\xad\x97\x49\xc2\x28\x16\xe7\xd2\x96\x71\x84\x0a\xcf\xe7\x7c\x85\xd2\x17\x92\x0e\xab\x9c\xb6\x8a\x50\xcf\xf7\x69\x68\x39\xe3\x04\xae\xd3\x90\x42\x68\xf8\x82\xb2\x95\xca\x67\x8c\x06\x99\x5c\x85\xb0\x90\xd8\x44\x38\x39\x0d\x58\x48\xa5\xb7\x25\x0d\xa4\xed\x54\x9a\x19\xe0\x85\x17\x07\x22\x0d\x32\xb9\x1c\x1d\x5d\x49\xff\x3b\xdd\x96\x07\x6e\x42\x21\xc2\x2c\xb4\x86\x6c\xa4\x5e\x4e\x3a\xb3\x80\x90\x2b\xb8\x90\x0b\xcf\x4c\xf4\x6f\x00\x00\x00\xff\xff\x9e\x3a\x0a\x51\xea\x27\x00\x00")

func defines_html_bytes() ([]byte, error) {
	return bindata_read(
		_defines_html,
		"defines.html",
	)
}

func defines_html() (*asset, error) {
	bytes, err := defines_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "defines.html", size: 10218, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x8f\xdb\x36\xf2\x7f\x9f\x4f\xc1\xbf\x92\x16\xff\x02\xb5\x8c\xe4\x7a\xb8\x22\xdd\x35\xe0\xac\xbd\x89\xd1\x7d\x30\xd6\x76\xee\xfa\xaa\x90\x25\xda\x66\x56\x96\x54\x91\xf2\x66\x1b\xf8\xbb\xdf\x0c\x1f\xf4\x64\xc9\x96\xb5\xde\xeb\xf5\x9a\x02\x17\x4b\xe4\x68\x38\x9c\x99\xdf\xf0\x47\x4a\x7b\x5f\xbe\x78\x74\xc1\x02\x4a\x2c\xf5\xcb\xdf\xbe\x55\x17\xbf\xba\x51\x12\x87\x0f\xdc\xda\x6e\xbf\x7c\x79\x60\x62\x45\xec\xdb\x8f\xc3\xbb\xbb\xd1\x60\x88\x2d\x36\xfe\x43\x7d\x4e\xf1\xf7\xd5\x05\x79\x7b\x4e\xc2\x98\xd8\x17\x57\xfd\xc9\xe4\xa6\x7f\x3d\x24\x96\xeb\x3b\x5c\x3d\x1d\x3b\xc1\x92\x92\x57\xec\x7b\xf2\xca\x0d\x63\x8a\xb2\xf6\xc0\x11\x8e\x7d\x31\x9e\xd9\x57\x8c\x8b\xed\xf6\x4c\xc4\xe4\x9e\x3e\x9e\x83\x2e\x14\xb1\x6f\xb6\xdb\xde\x99\xf0\x88\x54\x72\x6e\x09\xfa\x59\x74\x62\xb6\x5c\x09\x12\x84\x0f\xb1\x13\x59\xbd\x9c\xe4\x59\x57\x78\xd5\xd2\x56\xef\x8c\x47\x4e\x40\xd0\xc4\xed\x36\xd5\x3e\xe3\x34\xbe\x40\x59\x18\x25\xdf\x86\xaa\x50\xbe\x77\xb4\xc6\xc9\x23\xd7\x0a\x49\x2f\xd7\xd6\x5e\xe1\xc8\xf3\x69\xd9\x44\x6c\x2b\x69\xec\x8a\x18\xba\x69\xe0\xc9\x70\xe4\x7e\x5e\xec\x0d\xac\x70\xe6\x3e\xb5\xd0\xed\x78\x91\x1a\x85\x37\xaf\x09\x17\x31\x8b\x68\x47\xc9\x80\xd1\x2b\xea\xa0\xed\x31\x5e\xe2\x88\x2b\xbc\xd8\x13\x19\xf4\xa4\x9a\x93\x96\x49\x02\x06\xd3\xfc\x26\x33\xfc\x90\x06\xf0\xdc\xd3\x14\xa0\xa7\x0e\x6a\x40\xdf\xe1\x95\x9a\xde\x3c\xf4\x1e\xc1\x95\x82\xae\x23\xdf\x11\x7b\xf0\x40\x6c\x99\x71\x52\x1e\x7e\xd1\x4b\xbd\xc3\x4e\xf7\x16\xf3\x47\x41\xf9\xaf\xa7\x85\x94\xc7\xf8\x7d\x06\xa7\xc1\xa5\x1c\x63\x17\x52\x28\x66\x0f\x58\x7c\xe3\xac\xe9\xcf\xf4\xb1\x88\xad\x1c\xa0\xb4\x1c\xbf\x47\xc1\x0f\xd3\xeb\xab\x5d\x6c\xed\x4a\xc7\xf5\xc2\xf9\x2c\x37\x0f\xf4\x37\x0e\xf3\x9b\x89\x42\x22\x81\x53\xbf\x0d\xe6\x3c\xfa\xe9\x8c\x27\xd1\x0e\x52\x8c\xd4\x98\xc6\x2e\x0d\x44\x0e\x2f\xa5\x9e\xed\x36\x0b\xbd\x54\xd4\x60\xf4\x69\x28\x9c\xd4\xd0\x36\x38\x33\x21\x37\x60\x3b\x10\xd4\xe3\xb0\xa8\x13\xe8\xd5\x55\x16\xfe\x2b\x16\xdc\x63\xc5\xc9\x90\x81\xd2\x34\xb6\x7a\x24\xfb\xef\xcc\x21\xab\x98\x2e\xd0\x7b\x57\x90\x30\x97\x13\xfb\x03\xdc\x42\xd9\x82\xff\x32\xc7\xea\x2e\x53\xd2\x08\xe9\x0d\xe8\x86\xb9\x1a\x53\x15\x82\x4e\x4c\x45\x4e\x3a\x75\xb6\xb3\x83\xd6\xc3\x36\x5d\x8f\x6b\x6d\x82\xae\xdc\x28\xd7\x61\x12\x08\xea\x95\xb3\xc2\x08\x1e\x6b\x13\x29\x14\xe5\xa2\x4d\xfd\x8f\xfd\xd1\x95\x31\xab\x38\x94\xea\x32\xb9\x27\xd3\x5b\xbb\xa9\x5a\x30\x67\xd6\xd3\x6c\x9a\x4d\x86\x83\xd4\x53\xc5\xa1\x64\x57\xba\x20\x21\x8e\x8c\x49\x95\x82\x79\x4f\x3d\xcd\xa6\xe9\xed\xb4\x5f\xe3\x27\xd5\x65\x66\x2e\xd1\x55\xed\x27\x2d\xb8\xcf\x4f\x1a\x7c\xc7\x96\xf0\x42\x11\x6e\x5b\xc7\x59\x10\x7a\xcf\x5e\xc8\xd5\x20\xff\xdd\x95\x7c\xb4\x88\x29\x6d\x28\x9a\x34\x2a\xe5\x28\x56\x53\xcb\x73\x5d\x6d\x8a\xf9\x48\xfa\xf3\x69\xd5\x5c\x07\xbe\x35\x77\x2a\x57\x40\x5d\x52\x6b\xea\xa3\x29\x6e\x87\x21\xa8\x4a\xce\x61\x39\x59\x06\x0e\x8b\x29\x64\xb6\x61\x48\x45\x6c\xb4\xc3\x17\x3b\x92\x27\x99\xbd\xc5\x22\x43\xcf\xa8\x8e\x06\xb1\x85\x5d\xc0\x4d\x2f\x6b\x6b\x94\xf5\x20\x3b\xa0\xbe\x70\x46\x41\x63\xd1\xdb\x44\x34\x91\x6d\xa6\x31\xa7\xac\x4d\x06\xb3\x12\x1f\x39\x9e\xfc\x8f\x20\x23\xe3\x85\xb3\x9b\xb4\xbb\x14\x9c\x08\x26\x7c\x7a\x6e\xbd\x1b\x4d\x27\x24\x82\x14\xe3\xd4\x0d\x03\x0f\xa8\x79\x50\x41\xcc\xcf\x58\x6f\x7e\xd6\x65\xbd\x88\x37\xe6\xf8\xb5\x03\x80\x97\x4e\x3b\x82\x40\x40\x90\x77\xbf\x4c\x87\x13\xb2\x0e\xbd\xc4\x0f\xc9\x0f\xef\xeb\x27\xf2\x0e\x87\xf9\xe6\x87\xf7\xa7\x1a\xa7\x76\x3e\x95\x03\x1d\x09\x59\xf6\xf4\x15\x91\x2d\x68\x1c\x87\xf1\x13\x21\xab\x74\x7c\xc5\x6c\x9d\x73\xff\xa3\xa0\x2d\xe2\xd5\xac\xda\x3b\x39\xd8\x02\x4b\x25\xa0\x9e\x52\x75\x01\x9a\xb5\x8a\xdb\x00\xb3\x08\xc6\xc6\xaa\x8f\x86\x62\x1e\x47\x6d\xb1\x18\x39\xee\x3d\x15\x4f\x04\xa3\x56\xf2\x15\x8d\xb5\xee\xfd\x0a\xc7\x66\xab\xd9\xf3\x81\x72\x47\xff\xb3\x42\xb3\x00\xab\x76\xd8\x5c\xd3\xf5\xb1\xa0\xfc\x9e\xbc\x82\xa7\x32\x64\x5e\x0f\xaf\x77\x31\x09\x12\xf6\xcf\x0c\x07\x37\x88\xcc\x5a\x0e\x20\x02\x05\x2f\x9b\x6c\xe2\x50\x70\xe7\x34\x2e\x6b\xd7\x1b\x33\x53\x02\x1a\x6c\xca\xf0\xc1\x27\x1f\xb0\x81\x92\xe7\x38\xc8\xb6\x7a\xe8\x93\x7d\xfd\x55\x3b\xa9\xd3\x6c\xa1\x4c\x92\xb4\x4b\xb1\x88\x1f\x99\x61\x51\x1c\xba\x59\x7a\x8d\x27\x72\xa0\xdd\x14\x43\x31\x7b\x3c\x1a\xd4\xbd\x94\xb1\x7a\xa4\x20\xb5\x2f\xf8\xa9\xe4\x2c\x2f\x99\x3f\x0e\xcc\x24\x38\x8d\x0f\x2f\x2b\xd9\xd0\x31\x0b\x63\x26\x1e\x1b\x8a\xdf\xc0\xe6\xbb\xa1\xe8\x84\xfd\xde\x54\xf4\x8e\x72\xe6\xc9\x43\x8a\x4a\x71\x84\x09\xee\xee\x8d\xf8\x94\xad\x2b\x34\x9b\xa3\x99\x82\x37\xca\x8b\x6c\x1b\xc4\x44\xbc\xfd\x61\xf4\x9b\x93\x1c\x46\x17\x8e\x1a\x8a\x27\xbf\xe3\x09\x24\x4f\xe5\x81\xa6\xea\x49\x4f\x28\xe1\x26\x3d\xce\xac\x92\x7b\xc2\x71\x66\xd9\xa2\x59\xad\x45\xb3\xbc\x45\xb3\x7a\x8b\x66\xc7\x5b\x54\x38\x1c\xdf\xb1\x68\x32\xbc\xab\x3a\x60\xd5\x3d\xe6\xdc\x0c\x6f\x2a\xcf\x7c\x8d\x5c\xfb\x63\xe8\x9d\xa8\xdd\x8d\xea\xa2\x06\x3d\x59\xd4\x32\x7b\x2a\xe5\x4e\x18\xb5\x9b\xd1\xc5\xb0\xda\x47\xb2\xc7\x4c\xfb\x66\x54\x6b\x91\x92\x3b\x9d\x8f\x3e\x8e\xee\xa6\xd5\x16\xc9\x1e\x33\x08\xde\xd4\x44\x4d\xc9\x9d\xce\xa2\xbb\xe1\xa4\x26\x6a\xd8\x93\x06\x02\x6e\xea\x32\x5b\xca\xb5\x89\x9a\x29\x82\x25\x8b\xa6\xa3\xeb\x9a\xa8\xc9\x9e\xf4\xcd\x01\xdc\xd4\xf8\x48\xc9\x1d\xe5\xa3\xbd\x58\xc3\x9a\x58\x93\x47\xfd\x9c\x45\x17\xb7\xd7\xd7\xfd\x9b\xc1\xee\x7b\x28\x23\xf7\x0c\xaf\x32\xf4\x52\xdf\x8e\x27\x88\x30\xf4\x05\x8b\x0c\x77\x52\x06\xe5\x59\x73\x5e\x80\x78\x50\xcf\x3b\xb0\x47\x10\x10\xb6\x73\xeb\x32\xf1\x7d\xdd\x06\xa6\xb9\x74\x2d\x5b\x9d\x44\x84\xc4\xa7\x0b\xc9\xee\xec\xc9\x2a\x8c\x45\xf6\xa5\x42\x8d\x66\x2f\x14\x9c\x48\x7e\x7e\xec\x10\xb6\x6d\xbf\x78\x91\xbd\x03\xc0\x9f\xc3\x93\x4e\x38\x8d\x14\x4f\x6d\xb0\xfc\xe5\x43\x69\xc1\x8c\x74\xf4\xe4\xec\x3e\x3a\x7e\x42\xb3\x97\x10\x87\x47\xde\x2c\xe5\xce\xde\xca\x38\x95\x65\x9a\xd4\xaa\x1f\xfa\xa8\xe9\xdc\xfa\xbb\xd4\x2f\xd7\xcf\x8f\xce\x12\x38\x9a\x18\xa2\x54\xc5\x8a\xbf\x77\xb4\x94\x04\x6a\x96\xb7\x76\xdc\x55\xb6\x32\x6b\xcd\xd7\xd0\x88\xcf\x55\x6c\x28\xa0\xc7\x9e\xcd\x0c\xdd\xeb\x65\xac\x2c\xed\x29\xb2\xb2\xb2\x04\x32\x95\xfa\xde\x71\x1c\x6e\x80\x22\xc5\xf5\x12\x40\x43\xc5\xe1\x97\x56\x52\x54\x4f\x66\xc1\x7c\x80\x84\x23\x56\xfb\x09\xd2\x5e\xaf\x71\xe0\x30\xee\xaa\x09\x79\x66\x0b\x42\x7f\x23\x96\x88\x13\x40\xc7\xff\x7f\xe2\x61\x40\x76\x83\xe6\x7d\x87\xa2\xf5\x00\x36\x19\x40\x0a\xaa\xf7\xc9\xa7\x80\x3f\x96\xf5\x6d\x96\xa5\x6d\x12\xf3\x30\x03\x55\xe3\x31\x7b\x26\x96\xee\x7a\x7a\x01\xc4\x38\xbd\x89\x74\x48\xd3\x06\x8e\x11\x4c\xef\x3c\x16\x53\x57\x84\xf1\x63\xab\x2d\x51\x1a\x99\x23\x6b\x1d\x94\xed\x98\x72\x0c\xe8\x99\xc7\x36\x66\x9a\x2c\x88\x12\xd1\x01\x5f\x26\x11\xc9\x5d\x77\xf8\x9a\xe8\x07\x54\x83\x55\x2c\x5b\x79\x51\xc7\xf3\xc2\xc0\xea\xdd\x29\x71\x53\x86\xa4\x84\x11\x5f\x84\xf1\x5a\xd6\xb3\x38\xf4\x53\xbd\x52\xc2\x22\xe2\x31\xa2\x6a\x37\x60\x11\x59\xde\x56\xa1\x0f\xbe\x93\x65\x66\x40\x17\x4e\xe2\x0b\x9d\x64\x30\x1d\x93\x5d\xaa\xfd\x3b\x73\x0f\x1b\x6e\x16\x62\x86\x59\x64\x83\xd5\x48\x3e\xac\x1a\xd3\x84\x80\x19\x74\x61\xe2\xa9\x8b\xce\xfe\x6f\x70\x7b\x31\xfd\x65\x3c\x24\x2b\xb1\xf6\x7b\x67\xfa\x5f\x19\x85\x35\x15\x0e\x71\x57\x4e\xcc\x29\x54\xda\x44\x2c\x3a\x3f\x5a\xba\x75\x25\x44\xd4\xa1\xbf\x25\x6c\x73\x6e\xfd\xab\x33\xeb\x77\x2e\xc2\x35\x20\x8d\xa9\xdc\x31\x25\x7b\x34\x3c\xa7\xde\x92\x9a\x87\x30\x3b\x20\xc5\x18\x7d\x88\x60\x25\xc8\xc9\x3d\x30\x4f\xac\xce\x3d\xf9\xe6\xb3\x23\x6f\xbe\x87\x30\x30\xc1\x1c\xbf\xc3\x5d\xc7\xa7\xe7\xaf\x31\xeb\xf0\x88\x27\x2d\x85\x1f\x42\x2e\x02\x59\x52\x08\x5c\x81\x1a\x08\xbe\x14\x38\xf3\x61\x93\x01\xee\xf5\x21\x3e\x30\x82\x71\x2d\x5b\x3b\x4b\xda\x8d\x82\xa5\xa5\x16\x73\xab\xbb\x70\x36\x28\x60\x63\x5b\xfe\x29\x2e\x1e\x7d\x88\x0c\xa5\x85\xb0\x74\x5d\x58\x03\xcc\xa3\x70\xdd\x65\x81\x47\x3f\xdb\xd8\x0a\x49\xe1\x02\x3e\x44\x5e\xfa\x93\xb3\x71\x54\xab\x55\x76\x21\xe1\xb1\x0b\x3a\x3e\xf1\x6e\x8c\x1e\x8c\x29\x5c\xbd\xb1\x5f\xdb\xaf\xff\x61\x1a\xec\x35\x0b\xec\x4f\x5c\xaf\x76\x6b\x87\x05\x4a\x5e\xc6\xdf\x9e\xf6\xdf\xbf\x1f\x0e\xe6\x2c\xd8\x6e\x41\x4e\xdb\xa1\x9e\x30\x25\x03\x46\xe8\xae\x99\x7f\xaf\x3b\x65\x87\x89\xbe\xb2\x0a\x2e\x54\x90\x15\x70\x10\x0b\x88\x7f\xd7\x67\xb8\x14\xea\x24\x39\x0b\x9c\x14\x22\x70\x39\x77\x62\xa2\x7e\x3a\x9e\x4a\x3d\x73\xbb\x60\x9f\xa9\xd7\x11\x61\x64\x11\xc8\x6d\x2a\xa5\xd9\x12\xf2\x01\x21\x91\x07\x1a\x86\x1c\xa6\x43\xe1\x11\x3f\x61\x5e\xb1\x53\x2b\x33\x14\xac\xa2\x6b\x0e\x85\xd4\x93\x14\x11\x8d\x5d\xe9\x14\x48\xc3\xb2\x4b\x0f\xe6\xa1\x10\xe1\x5a\xb7\x8b\x70\xb9\x94\xe7\x9b\x61\x14\x6e\x60\x04\xdd\x0a\x54\x78\x89\x48\x5b\x61\x23\x59\x84\x6e\xc2\x73\xdc\x43\x5a\x7b\x6e\xbd\xf4\x18\x16\xc1\x79\xa7\xf8\x70\x9a\xc2\x71\x12\x04\x2c\x58\x12\x93\x9e\x83\xd1\x64\x7a\x37\x7a\xa7\xc9\x41\x29\x63\x15\xcd\x93\x1e\x96\xe5\x04\x27\x53\xd6\x9f\x51\x42\x29\x67\x02\xa4\x1d\x01\xe4\xc0\x77\x22\x9e\x15\x6a\xd3\x40\xca\x02\xd9\xa3\x49\x24\xd8\x9a\x76\x22\xe0\x9d\x81\xd8\x79\xd0\xea\xa9\xfe\xfc\x69\x69\xf6\x54\x36\x8b\x99\xbc\xcf\x7d\x70\x2a\xcd\x4b\xfc\x5c\xa4\x8c\x0d\xf0\x23\x81\x25\xf5\xb0\xc8\x2a\x05\x53\x16\xbb\x54\xef\x68\x8c\x3a\x7d\x96\x3e\xe0\x3b\xfb\x1f\xb8\xea\x9b\x07\xba\x89\x5f\x6f\x81\xb9\x34\x5f\x26\x81\xf6\x2a\xad\xb9\xe7\x7d\x88\x04\x94\x65\x1f\x17\x8e\xd2\x4c\xd2\xcd\x89\xf5\x12\x93\xbd\x87\xff\xaa\x60\x2a\xc3\x73\xfd\x11\xd4\x85\x97\x78\x42\x5e\xd9\xbb\x81\x92\xf3\x72\xa3\x88\x41\x26\x22\x27\x62\x7c\xa0\xad\x71\x5c\xc1\x36\x34\xdb\x16\x59\x58\x7a\xf9\xdb\x6e\xf7\xe1\xe1\xc1\x86\x8c\x8a\xe1\x7f\xb6\x1b\xae\xbb\xaa\x0a\x42\x09\xf1\xa9\xc3\x29\xef\xe2\xba\xc9\x45\x7a\x32\x0e\x39\xc5\x01\x8e\x69\x82\x02\x8d\x99\x8c\x6e\x6f\x30\x41\x6f\x27\xd3\xe1\xcd\xb4\x6c\x86\x8c\x6b\x96\x7c\x7b\x01\x8c\xf1\x82\x32\x1d\x8b\x72\x76\x01\x3b\x21\xa5\x54\x34\xf3\x42\x71\xa2\x1e\xf2\x90\x91\xc6\xe6\x86\xf1\x35\xe3\x5c\x53\x8d\x79\x02\x00\x4e\x17\x5c\xd7\x0f\x31\xe7\x55\x9d\x55\x5d\x1a\x88\xfa\x29\xad\xd7\x22\x4e\xcc\x9c\xce\x8a\x79\x1e\x85\xda\x29\x39\x59\xef\x5b\x4c\x5c\xfe\xd3\x59\x57\x3d\x98\xc3\x9e\x1a\x18\x3a\xb9\x83\xab\x55\x1f\x6f\x8b\xf9\x5d\xf8\x17\xb2\x21\x9b\xb6\x2c\x7a\xd5\xce\x21\x11\x90\x02\x28\x0a\x58\x18\x39\xdd\x80\x5f\x1e\x81\x79\x14\xbc\x00\xfe\x29\x36\xcc\xfd\xd0\xbd\x47\x97\x75\xd6\x5e\xe7\x8d\xb9\x08\x17\x0b\x58\x40\x3a\xaf\x8b\xb2\x60\x1f\xf5\xb1\x4d\x6f\xa3\x75\xb3\x17\x3b\xcb\xa5\x76\x9f\x93\xea\x15\x81\x2e\xac\x1d\x39\x44\xca\x57\x17\x8e\xcf\x4b\x84\xf5\x42\x2e\x02\xf6\x07\x20\x6f\x30\xa3\x05\x5b\x5e\x0f\xaf\x81\x55\x10\x95\x8a\x66\x29\x31\xa9\xbc\xa6\x6b\xab\x77\x4d\xd7\x92\xc9\x39\x7a\x5d\xa1\xb1\xb4\x34\x73\x13\x48\x29\x5d\x3b\x85\xa7\x8d\x25\x2c\xc8\x16\x34\x64\x55\xe9\xee\x3d\x8c\xd9\xef\x18\x04\xbf\x23\x9b\xe7\xc0\xb8\x71\xc6\x72\x15\x90\x4d\x45\x0f\x4a\x46\xa6\xf8\x1b\xc6\x8a\x96\x16\x24\x74\x9a\x22\x85\xe9\x15\x50\xc2\xd2\x6a\xa2\xb2\x09\x59\x80\xef\xcc\xa9\x9f\x7b\x56\x3e\x65\x56\x4a\xc8\x45\x26\x89\x86\xa2\x84\x2a\x85\xdd\x15\x75\xef\xe7\xe1\x67\xab\xf7\x41\xa6\x2a\xe0\x0f\x75\xec\x57\xd5\xd0\x61\x93\x7f\xf6\xc7\xf5\x51\x03\x73\x28\x7f\xc0\x4d\x53\xbd\x41\x94\xa0\x04\xee\xa9\xb5\x55\x35\x35\xa1\xc2\x8b\x66\xb7\x94\x37\x4a\x53\x63\x08\x61\xcd\x9e\xc6\x70\xf3\xdc\x6e\xc6\x0c\x89\x43\xec\x8e\xaf\x13\xab\x6d\x4a\x55\x24\x53\x5a\x12\x40\xad\xd9\xee\x1c\x78\x33\xa3\x37\x4c\x76\x79\x49\xac\x71\x56\x01\xe0\x7f\xfb\x83\x00\x3d\xba\xac\xcf\x0c\xb6\xc8\xd6\x58\xfd\xe0\xd4\x99\x8f\x2e\xed\x29\x2e\x24\x86\xbc\x54\x82\x9c\x2d\x4e\x81\x71\x65\x5c\x43\x88\xff\x35\xf0\x3c\xfc\x0c\xa9\xe1\x61\x0a\x28\xe7\xc0\x6a\x27\xcf\xca\xaa\x62\x57\x63\x50\x29\xa4\x4a\x23\x72\x9f\xd1\x25\x6c\x03\x4f\x8c\x71\xd4\xd9\x0e\xe2\x3b\x34\x0e\x51\xc8\x0b\xbc\x8d\x2d\x3a\x66\xef\xaf\x02\xe7\xcc\x31\xf9\x52\x22\x79\x39\xed\xbf\x9b\xd8\xec\x72\xdc\xbf\xf8\x79\x38\x9d\xd8\x33\x86\x2f\xde\x72\x0c\xea\x65\xfa\xe6\xde\xea\x8d\xd5\x45\x9e\xa6\x1d\x3b\xce\xf0\xee\xee\xf6\xae\x7a\x18\xf5\xed\x8e\xd5\x93\x67\x3f\xfb\x07\xd1\x68\x3c\x30\x96\xfc\x0e\xb0\x72\x28\xf9\xc5\x9e\xd5\x7b\x87\x3f\x07\xa8\x9c\x82\xaa\x71\x41\xce\x12\x18\x95\x94\x21\x9b\xcf\xc6\x4a\xd7\x7e\x57\x95\xb0\xaa\x62\xc8\xee\x02\x96\xf5\xec\x14\x25\xad\x8d\x98\xae\x34\xc7\xc6\x37\x2d\xde\xe9\xe4\x9a\x94\xf0\xf2\xe7\x3b\xbb\x95\x3c\xf3\x99\x8e\x67\x1b\x97\xe5\xb2\xe4\x84\x1e\xd3\x5a\x9b\x39\xac\x9c\xa8\x39\x7f\xa9\x89\x35\x73\x57\xe1\xdb\xc3\x7d\xde\x52\x29\xd9\xc6\x59\x59\x9a\x9f\xd0\x57\x4a\x69\x33\x57\x95\x70\x96\xf3\x94\x9c\x54\x33\x47\xe5\x3f\xac\x6e\xc7\x0f\xde\xfc\x41\xfc\xe0\x62\x3c\x03\xcf\x56\xf3\x03\x37\x4a\xac\x1e\x08\xec\xf0\x00\x75\x80\x14\x25\xa7\xe0\x00\xca\x80\xaf\x3c\xbf\x31\x2f\xd0\x0e\xab\x23\x06\x32\x68\xc7\x32\x03\xd0\x79\x7a\x6a\x20\x95\x3e\x85\xfe\xe7\x32\xad\x6d\x8e\x55\x64\x57\x8a\x70\x50\xdb\x04\xdd\xe9\x9f\x4b\xff\xb9\x88\xff\xe0\xb2\x16\xd7\x5e\x25\xef\x1f\x34\xe1\xfd\xde\x49\x78\xff\xe0\x2b\xef\xaf\xc7\xf7\x60\x2f\xef\xf7\x5a\xf0\xfe\xc1\x33\xf0\xfe\xc1\x73\xf2\x7e\x6f\x3f\x1f\x1f\xa8\xb5\xdb\xbb\x1c\xdd\xdc\x0e\x2a\x49\xb2\xf9\x4b\x34\xfc\xea\x18\x7f\xab\xf8\xb8\xd7\x88\x8f\xa7\x63\xd5\xf1\x71\xef\x58\x3e\x9e\xda\x96\x33\xe4\x10\x5d\xaa\x9a\x71\x1d\x5f\x1a\x34\xe6\x4b\x65\xad\x7b\x09\x53\xad\xd3\xb3\xf7\x1a\x7a\x62\x4d\x8a\x6a\xe9\xaf\x29\xeb\xb9\xa5\x57\xe2\x96\xc7\x38\xeb\x30\xb7\x6c\xe1\xab\x06\xdc\xb2\x2e\x67\x72\x9e\x6a\xcc\x2d\xbd\x23\xb8\xe5\x51\x07\xf9\x8d\x8e\xa5\x7f\x2c\x1d\x4b\x37\x63\xa9\x37\xb7\xd3\xd3\xaf\x67\xe3\x49\xed\x7a\x86\x2f\x60\xc6\x71\xe8\x52\xce\x0d\x02\xcb\x64\x35\xe2\xa7\x58\xb7\xa4\x0d\xb5\xeb\x96\x7a\x91\x54\x47\x53\x8b\x7f\x35\xdf\xba\xee\x8e\x27\x47\xd7\xdd\x3f\xdd\xea\xe9\x43\x20\x49\xdd\x12\xba\xfb\xd5\x8d\x76\xd0\x78\x12\x84\x62\x40\xdd\x98\x3a\x72\xe9\xdc\xb7\x8a\x46\x1c\xc7\xa8\x35\xae\x53\x6d\xd7\x1a\xff\xcf\x8b\xda\xd9\x95\x2d\xef\xfb\xcd\xc2\x21\x9a\x2e\xf0\xe3\x49\xe4\x27\x7c\x0a\x69\x55\xbb\xbc\x57\xd2\xe9\x88\xb7\x45\xc1\x6e\xfe\xa7\x25\x2d\x6a\x54\xcd\xcc\xf7\xe7\x7f\xe1\x3a\xf6\xf1\x7d\x6d\x1d\xc3\x57\xc5\xfa\x13\x32\xb2\xf4\xc3\x39\x7e\x13\x23\x1c\x91\xd4\xd4\xb4\xcd\xf2\x14\x35\x4d\xda\xf3\xc7\xd6\xb4\x8f\xef\xff\x97\x6a\xda\x31\x50\xdc\xb4\x0e\xde\x6e\xd8\x52\x28\x6e\x96\x4d\xa0\x98\x7e\xff\xd7\x18\x8a\x7b\x3f\x7d\xea\xbd\xd8\x38\x31\x41\x2b\xc9\xb9\xf9\xf2\x60\xbb\xfd\xe9\x45\xee\x2b\x24\xfd\xe1\x9e\xfc\xee\xec\xdf\x01\x00\x00\xff\xff\x09\x7d\xe3\xec\x77\x4e\x00\x00")

func index_html_bytes() ([]byte, error) {
	return bindata_read(
		_index_html,
		"index.html",
	)
}

func index_html() (*asset, error) {
	bytes, err := index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "index.html", size: 20087, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"defines.html": defines_html,
	"index.html": index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"defines.html": &_bintree_t{defines_html, map[string]*_bintree_t{
	}},
	"index.html": &_bintree_t{index_html, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

