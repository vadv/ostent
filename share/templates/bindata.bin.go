// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\xfb\x73\xdb\xb6\x93\xff\x3d\x7f\x05\x8e\xed\xf7\xa6\xe9\x54\xd2\x25\xd7\x5e\x3b\xa9\xad\x19\xc7\x92\x13\x4d\x63\x5b\x63\xc9\xbe\xeb\x4f\x1d\x4a\x84\x24\xc4\x14\xc9\x92\x94\x1c\x57\xe3\xff\xfd\x76\xf1\xa0\xf8\x00\x69\xbe\xe4\x38\xf9\xa6\x33\x9d\x50\x04\xb0\x2f\x60\x3f\xbb\x0b\x82\xf4\xd1\x7f\x0c\x2e\x4f\xa7\x7f\x8e\x87\x64\x15\xae\xed\x17\xfd\x23\xfe\x0f\x21\x70\x41\x4d\x0b\x2e\xf0\x72\x4d\x43\x93\xcc\x57\xa6\x1f\xd0\xf0\xd8\xd8\x84\x8b\xce\x6f\x46\xbc\x69\x15\x86\x5e\x87\xfe\xbd\x61\xdb\x63\xe3\xff\x3a\xd7\x27\x9d\x53\x77\xed\x99\x21\x9b\xd9\xd4\x20\x73\xd7\x09\xa9\x03\xe3\x46\xc3\x63\x6a\x2d\x69\x62\xa4\x63\xae\xe9\xb1\xb1\x65\xf4\xce\x73\xfd\x30\xd6\xf9\x8e\x59\xe1\xea\xd8\xa2\x5b\x36\xa7\x1d\xfe\xe3\x27\xc2\x1c\x16\x32\xd3\xee\x04\x73\xd3\xa6\xc7\xaf\x14\xa1\x90\x85\x36\xe5\xd7\xf0\x6b\xb7\xeb\x0e\xcc\xd0\xec\xbe\x77\x83\x10\x89\x3f\x3c\x10\xb8\x02\x92\x47\xbd\x7d\xbf\xfe\x91\xcd\x9c\x5b\xe2\x53\xfb\xd8\x60\xc0\xd2\x20\xe1\xbd\x07\x72\xb0\xb5\xb9\xa4\x3d\xcf\x59\x1a\x64\xe5\xd3\xc5\xb1\xd1\x5b\x98\x5b\xec\xd0\xc5\x7b\x99\xa1\x41\x78\x6f\xd3\x60\x45\x69\xa8\x08\x84\xf4\x53\xd8\x9b\x07\x41\x34\x1e\xae\x7b\xcc\xb1\xe8\xa7\x2e\xde\x95\x14\x82\xb9\xcf\xbc\x30\x3e\xe4\xa3\xb9\x35\xc5\x5d\x23\x6d\x67\x12\xf8\x73\x20\xf4\x31\xe8\xf9\x68\x61\x9f\xc2\xd5\xeb\xee\xab\xee\xab\x5f\xd5\x8d\xee\x9a\x39\xdd\x8f\xc0\xd3\x02\xc5\x3b\x6b\x93\x39\xa2\xff\x6e\xc7\x16\xa4\x3b\x3d\x79\xf7\x6e\x38\x98\x31\xe7\xe1\x01\xfa\x49\x61\xc4\x88\xdd\x8e\xda\x01\x58\x08\x38\xf4\xd6\xcc\xbe\x95\x8d\xbc\xc1\xb1\x1e\x1e\x0c\x65\xd4\xa3\x9e\x10\x4e\xca\xdf\x93\x4b\xa3\x7f\x34\x73\xad\x7b\x79\xd3\x31\xb7\x64\x6e\x9b\x41\x70\x6c\xc0\xe5\xcc\xf4\x89\xf8\xa7\x63\xd1\x85\xb9\xb1\x43\xf5\x73\xc1\x3e\x51\xab\x13\xba\x9e\x41\x7c\x17\xa6\x11\x7b\xb3\x25\x2c\x16\x98\x86\x88\x9f\xc5\x22\x62\xb8\x22\x40\x25\x0a\x23\xed\x0d\xb3\x54\x9f\x54\x2f\xcb\x77\x3d\xcb\xbd\x73\x14\x17\x94\x90\xfa\xfb\xce\x5c\xd8\x4d\x18\xba\x4e\x52\x48\x10\x64\xb9\xb4\x29\xac\x3b\xdb\x36\xbd\x80\x5a\x6a\x26\x45\x67\x69\x53\xd1\x09\x65\x11\xbd\xd4\x6d\xd3\x5f\xe2\x44\x7d\x27\x69\x45\xcd\x31\xb6\x7c\xbe\x3d\x33\x62\x1b\xf8\x1d\xd7\xb1\xef\x93\x5d\xa0\xd3\x54\xc8\xb1\x37\x06\xd8\x1c\x86\x15\x50\xc2\x75\xd9\x01\xb6\x19\x52\xcf\x66\x64\x4f\x18\x31\x31\x09\x26\x61\xd6\x7e\xba\x66\xbe\xe9\x80\xc9\x53\x93\xa8\x26\x45\x9a\x55\x76\x4a\xcc\x84\xea\x6a\x10\xd3\x67\x66\x87\x7e\x02\xee\x16\x05\xca\xa1\xbf\xa1\x91\xf7\xa5\x27\x02\x17\x0c\xb2\x5f\x49\x70\xc8\xa8\x91\x45\x8f\xa3\x1e\x0c\x4a\xeb\x65\x26\x54\xda\xd8\x19\x05\xd6\xd4\xd9\xa8\xf5\x2d\xae\xb9\x98\xb6\x39\xa3\xb6\x4d\xad\xd9\x7d\xda\x04\x29\x0e\x36\xcb\x90\x94\x2b\x5a\x12\xf5\x7c\x1a\x00\xa8\x25\xdc\x26\x1a\xee\x6f\x1c\x87\x39\xcb\xa3\x9e\xcd\xb2\x74\x4b\x8c\x87\x49\xca\xcc\x08\xa0\x54\xba\x5f\xcc\x5e\x83\xd1\x64\x7a\x35\x7a\x8b\xe6\x32\xb3\x4b\x23\x23\x46\x6f\x63\x27\x2c\x98\xb0\xf1\x7e\x9a\xd2\x6e\xb5\x87\x04\x71\x83\x14\xf8\x5d\x7c\x5a\x10\x9a\x64\x57\xf8\x47\x63\x6b\x64\xc6\x3c\x23\x0d\x0d\x1a\x9d\x23\x8d\x47\x63\x54\x56\x67\xe0\x94\xe9\xb2\xd6\x55\xea\xa9\x1e\xb6\xa9\xe3\x4c\x52\xde\x50\xc9\x01\xb2\x33\x15\x71\x05\x6e\x99\xd6\x98\x5e\x1f\x4e\x74\x6b\x5e\x33\x4d\x59\x33\xd7\x59\xfd\x3a\x69\x1a\x2e\x7f\x4e\x62\xe3\x85\x6c\x4d\x33\x13\x14\x91\x2f\x49\x46\xc2\x95\xa0\xa6\xc1\x29\xad\x57\x24\xec\x79\xcd\x87\xea\x1c\x43\xda\x54\x2b\x61\xd2\x41\xf4\x3d\xb3\x6e\x94\xb7\xe2\xd5\xa5\xcf\x96\xab\x30\x1f\x6a\x8a\x96\x7d\x8c\xb6\xcd\x82\xb0\xc3\x1c\x48\x83\x68\xae\x57\x29\xd2\x39\x36\x15\xf0\xfc\x1d\x26\x01\x7a\xeb\x61\x53\x35\x8b\x3d\xc6\xcb\x0b\xf2\x58\x79\x41\xbb\x9c\xb6\xcb\x3c\x4e\x5b\x73\x09\x60\x1f\x1e\x62\x29\x64\x3d\x86\x98\xf3\x90\x6d\xb3\x21\x2e\x15\x81\xb7\xd4\x0f\x70\xf5\xe7\xc4\xe0\x3a\x61\x17\xab\x81\xe0\x4d\xaf\x77\x77\x77\xd7\x85\x38\xea\xc3\xff\xdd\xb9\xbb\xee\x89\x3c\x1c\xb2\x56\x9b\x9a\x01\x0d\x7a\xb6\x19\xd2\x40\x17\x55\x2e\x27\xd3\xe1\xc5\x54\x17\x4a\x9a\x81\x8d\xd2\xf5\x20\x88\x23\x89\xb7\x01\x39\xed\x98\x91\x53\x53\x30\x74\x33\xbc\x9a\x8c\x2e\x2f\x9e\x06\x87\x52\xe1\x3c\xf6\x13\x7e\x00\x56\xc8\x8a\x41\x45\x24\x5e\x0b\xe8\xb3\x7d\xe2\x99\x96\x05\xa9\x0c\xd6\x0b\x01\xdd\x82\xde\xf7\xc1\x4a\x5b\x26\xf8\xee\x5d\xba\x34\x40\xda\x6b\xba\x86\x34\x5d\xd4\xa1\xa2\xe3\xcc\x76\xe7\xb7\x98\xef\x77\xd6\x56\xe7\xb5\xba\x70\x17\x0b\xa8\xb9\x3a\xaf\x12\x29\xc4\x6e\x17\xd2\xb5\x87\xf6\x25\x06\x54\x31\x20\x56\xf0\xe6\x8d\xb8\xf8\x8b\x93\x01\xea\x06\xe9\xa6\x03\x66\x42\xae\x04\xbb\xff\x4e\x66\x28\xb1\x6e\xe0\x47\xd4\x7e\x95\xc1\x66\x5c\xc4\xe9\xac\x47\x2c\x6d\xc2\x47\xf0\x45\x0a\xf6\x21\xb3\x10\xf2\x72\x64\x65\x90\x85\xeb\xc3\x2a\xde\xac\xd7\xf7\x6c\x01\xe6\x5c\xb0\xe5\x7c\x45\xe7\xb7\x33\xf7\x13\x6f\xeb\x04\x58\xba\x7e\xa7\xda\x0a\x92\x3f\xa4\x29\x9c\x40\x90\xe6\xf5\x24\xfd\x9b\x18\x0b\xd3\xc6\x6c\xec\x87\x8f\x01\x94\x53\x62\x7d\x9d\xda\x0c\x26\xa7\xfb\x9e\x59\x54\xd0\x1d\x9d\xbd\x84\xd2\x5b\x60\x90\x2a\x27\x15\x42\xb2\x45\x41\x2a\x29\x29\x4d\xcd\xd9\xe8\xac\x3b\xc5\x92\x5d\x9f\x55\x32\xc7\xdb\x84\x02\xca\xf4\xba\xa6\xcd\xb6\x6f\x11\x15\xde\xfe\x37\x07\x8c\x15\xb3\x2c\xea\x44\x48\xc6\x7f\x69\xd6\x3e\xda\xfe\x85\x4e\x92\xb6\xd9\xf1\xe5\x91\x9b\x3b\x46\xd3\xa7\xf8\x46\x93\x23\x08\x3e\x3e\x37\x91\xa0\x82\x77\xaa\xe4\x8f\xf3\x84\x45\xb3\x56\x6c\x56\xae\xcf\xfe\x41\x1f\xb5\x3b\x78\x5b\x8f\x60\xb1\x75\x8d\x9d\x3a\x4b\xdf\xdd\x78\x1d\x74\x65\x6a\xe5\xe0\x54\xc2\x65\x60\xdd\xf1\x21\x24\xba\xea\x04\xeb\x54\x24\x12\xa5\x65\x4e\x50\xcf\xf8\x0e\x10\xe2\xc4\xd4\x5e\x04\xe8\xcc\x9c\x9c\x38\x1d\x9f\xd4\xd4\xd4\xe5\xf7\x7f\xcf\x8d\xa8\x5b\x1f\x65\x65\x2a\xe1\x5d\x43\x1e\x6e\x11\xcd\x84\x77\x59\x2c\xc0\x1f\x56\x19\xff\xaa\xad\x59\xca\x2f\x85\x0c\x98\x23\x8e\xce\x78\x05\x54\xa8\xb0\xb6\x90\x28\x6c\xaa\xb5\x7a\x76\xbb\x3b\x16\xae\x92\xc6\xba\xa2\x0b\x08\xb5\x2b\x94\x52\x8b\xe3\xbe\x68\xe7\xf8\x2d\x0d\x98\x2f\x53\x0f\x25\xd1\xb8\x46\x26\xe3\xc6\x60\xa3\x5d\x94\xf1\x14\x83\x2d\x3a\x01\x08\x3c\x5f\x45\xfb\x48\x33\xf4\xe9\xa8\xb4\x3c\x9b\x9e\xbc\x9d\x74\xd9\xd9\xf8\xe4\xf4\x8f\xe1\x74\xd2\xbd\x66\x4e\xa8\x73\x4d\x41\xd7\xdc\x4f\xbb\x67\xce\x6f\x69\x98\xef\x14\x63\xd1\xae\xcf\x01\xf2\xb2\x80\x7a\xb2\x0f\xaf\xae\x2e\xaf\x2a\x88\x4e\x7d\xdf\xf5\xf3\x25\x1f\xf2\xe6\x56\x04\x57\x89\x71\xb1\xfc\x6f\xff\x9c\x0e\x2b\x88\x3f\xbb\x87\x24\x2c\x57\xfa\xb7\xd8\x5a\x5d\xf8\x6c\xf6\x95\x5b\x85\x6b\x76\xa9\x8a\xc3\x87\x5a\x2a\x31\xf3\x80\x29\x38\x08\x41\x5d\x17\x07\x1f\xed\x72\x7c\xa9\xc3\x27\x11\xb3\x79\x33\xa0\x53\x4e\x80\x91\x66\xc7\xc0\x5e\xb0\xe4\x65\xe0\x6f\xe8\x20\x72\xf3\x32\xa1\xb1\x4c\x07\xf5\x7b\x20\xf9\xf9\x5e\x34\xfe\x2f\x99\x4e\xf2\xb4\x2f\xb3\xe9\x59\x30\x45\x7b\xdb\xcb\xb5\x5e\xc1\xf4\x31\x6f\x3a\x94\xe5\x25\x8b\x72\x86\x7f\xc4\xbb\x13\x76\x17\xda\xd6\x36\xbb\x18\xde\x82\xd5\x85\x8b\x56\x30\xfa\x1e\x02\x0e\x65\x73\xc1\xa1\x9c\xc9\x8b\x01\x29\x61\x71\xae\x69\x6d\x83\xf3\xd1\xb5\xed\xad\xdb\x2e\x4f\xde\xd2\x6e\xf7\x6a\x8b\xb3\xa7\xad\x96\xe6\xde\x26\xbf\x5c\x8a\x1a\x0f\x55\x2f\x9d\x8e\xaf\xf3\x0b\x26\xe0\xae\x99\x72\x18\x52\xa2\x30\xd2\xa8\xf5\x55\x57\x46\xfb\x99\xaa\x53\x1a\x89\x69\x68\xa5\x36\x22\x33\xd7\xe7\x6b\xc1\x85\x4a\x65\xfd\x45\x97\x4b\x49\x67\x4a\xf9\xc5\x97\x5b\x45\x49\x9f\xcb\x2b\xa3\xda\xd5\x2d\xb7\x8e\x02\x29\xbe\x84\x42\x8a\x8b\x79\xb8\x4a\xaa\x8d\xac\x16\x27\xac\x9a\xd3\x57\x75\xf7\x28\xc8\x02\xab\x9a\x01\x16\x46\x3e\x83\xd8\xfa\xc4\x3b\x91\x56\xc1\x4e\xa4\x75\xe0\x9d\xc8\x41\xc1\x4e\xa4\x55\x6e\x27\x72\x50\x65\x27\x32\xab\xeb\x57\x1d\x6f\xad\x26\x3b\x91\x83\x6f\x3b\x91\x5f\xf8\x4e\xe4\xa0\x70\x27\x52\xe7\x5f\xb5\x35\xcb\x8d\xa0\x83\x2f\x62\x27\x72\xf0\x0c\x77\x22\xad\xe2\xdd\xbc\x81\x28\x3e\xad\xb3\xd1\xc5\xe5\xa0\xfc\x76\x98\x05\x8a\xb9\x56\xc1\x7e\xd8\x88\x37\x37\xd9\xcd\xb3\x4a\xed\xe6\x45\xf2\x57\xda\xcd\xb3\xbe\xb4\xdd\xbc\xc8\xde\x31\xeb\xe4\x6c\x6e\xe8\x66\x34\x6f\x77\x63\x50\x6f\x77\x23\xcd\xa2\x70\x7b\xa3\xec\x0a\x8b\xa5\x5e\x4a\xdb\x9a\xf9\x97\x1a\xde\x78\x47\xc9\x4a\xed\x28\x95\x30\xfa\xe3\x3b\x4a\x4d\x6d\x5e\x62\x47\xa9\xa4\x53\x24\x2c\xde\x64\x47\xc9\x7a\xfa\x1d\xa5\xe4\x89\x03\xf5\xa3\xcc\xb1\xe2\xc7\xce\x14\xe8\x72\xe9\xdf\x52\x87\x08\x9e\x78\xdf\xca\x0b\xf2\x73\x6b\xd5\x76\xa8\xdc\x7a\x3c\xc9\xcf\xad\x75\x27\xae\xfa\x63\xdf\x9d\xd3\x20\xd0\xe1\x67\x26\x91\xce\x2a\xf6\x55\x27\xd2\xd1\x5c\xd5\x49\xa4\xf9\x44\xd4\x4b\xa4\xc5\x51\xbe\xbc\x2d\x2b\x82\x09\x96\xee\xe4\xa0\x66\x79\xb7\x90\x24\x8d\x27\x6d\x24\x49\xcf\x3f\xed\xcf\xdf\x51\xcb\x3b\xa8\x28\x88\x1e\xbe\x18\xb0\xc1\x3d\x49\x5e\x45\x90\xbb\x12\xc7\x13\xc7\x0d\x07\x74\xee\x53\x93\x57\x02\x45\x45\x81\x17\x20\x8f\x16\xb5\xec\x54\x52\x70\xed\xfa\xb4\xa6\x82\xfb\xb2\xa7\x58\x3f\x64\x71\xb8\xc2\x67\x3c\xf1\xec\x4d\x30\x05\xbf\x3c\x4c\xd9\x73\xc8\x2d\x3a\x2f\xa8\x08\x6f\x15\x81\x2d\xca\x59\xbc\xba\xe9\x8a\x17\x7c\x4b\x54\x0e\x93\xa8\x6c\x97\xf9\x89\x8a\x6a\x3b\x54\xa2\x72\xf3\x2e\x3f\x51\xd1\x1d\xd8\xee\xdf\x88\xb3\xda\x64\x69\xbb\x33\x7c\xe5\x30\x34\xc3\x4d\x99\xa4\x25\xab\xe4\x57\x9d\xb4\x44\xf3\x56\x27\x69\xe1\x93\xf2\x15\x24\x2d\x37\xef\xfe\xdd\x93\x96\xbc\x77\x1e\x04\xd1\x83\x24\x2d\xcf\x2d\xb2\x6d\xab\xfa\x40\xc5\xd5\x1f\x45\xb6\xed\xb2\x66\x64\xdb\x2e\x9f\x41\x64\x2b\x7c\xf7\x59\x0d\xd8\x9a\x3e\x41\x73\x91\x63\x22\x73\x9f\x87\x87\xdf\xd3\x2f\x21\xcb\x77\x8f\xf1\x75\x64\xfe\xe6\xfa\x6e\xd7\xfb\xf1\xc5\x8f\x3d\xf4\x34\xa1\x70\xc1\xa1\x7d\xec\xf4\xfd\x19\x79\x73\x4c\x5c\x9f\x74\xdf\x4f\xcf\x3f\x9c\x5d\x5e\x11\xf4\x3b\xd1\x74\xaa\x9a\x4e\x3f\x9c\x4c\x26\x17\x27\xe7\x43\x62\xf0\xc9\x85\x66\x7d\x9c\x54\xae\x83\x33\x84\x7e\x01\x5c\x52\xc8\x58\x36\x60\xa2\x64\x0f\x0f\x32\x9c\x44\x64\x92\x7e\x83\x61\x11\x57\xd9\x29\x92\x3e\x09\x43\x5f\x2e\xaf\x0f\xcc\xb9\x0d\xba\x63\xd3\x37\xd7\x41\xf7\xed\xe5\xe5\x87\x6e\xb0\x72\xef\x04\x05\x20\x45\x32\x41\x34\xda\x3e\xcd\xb4\x80\xa6\xc0\x42\x00\xc7\x7b\x00\xb2\xf2\x5c\x1e\x1e\xd4\x3c\x9e\x53\xc8\x84\xef\x55\xd4\xcc\xc4\xca\xac\x72\xad\x45\xaf\x58\x88\x6c\x37\x30\xee\x41\x20\xf1\x92\x89\x9a\xeb\x5a\x93\x02\xd6\x4f\xe1\x80\xb1\xb7\x61\xed\x23\x26\xe5\x23\x4a\x4b\x71\xa4\x76\xf4\x40\x8f\xcc\xc9\xab\x8a\x83\x46\x41\xa8\x50\xc2\x94\x9b\x10\xb0\x3a\x0d\xee\x4c\x8f\x64\xa4\x8e\xfb\x47\xbc\x01\xdd\x43\xe6\x8f\x6a\x70\x7d\x1d\x28\xc1\xf1\x7a\x35\x2a\x3c\xe1\x2f\x9e\xe4\xa2\xd0\x10\x25\x2a\xf2\x42\x9b\xe6\x9c\x0f\xcf\xb3\xaf\x3a\xc5\x43\x6a\x02\xe8\xe5\x65\x8e\xbf\x70\x98\x3b\x45\x98\x2b\x17\x2c\x81\xf7\xa3\xd1\xb2\x50\x43\xe0\x19\x8f\x7e\x1a\x39\xf9\x45\x5f\xd2\x2c\x11\x4c\xe6\x36\xf3\x4a\x44\x0b\xb1\x06\x20\x8c\x8d\x06\xb8\x04\x61\xd9\x44\xaa\x37\x82\xa2\xbe\x32\x1c\xb0\x17\xdc\x2e\xf0\x8b\x06\xa8\x1c\x67\x19\xa9\x12\x39\x42\xf7\xcc\xf5\xa5\x08\x91\x04\xa8\x03\x36\x9d\xff\xef\x04\x3f\x66\x22\x9a\x5f\x88\x3d\x87\xe4\x0e\x43\x15\xcb\x78\x1b\xa8\x48\x03\x6e\x1c\x91\x34\x5f\xde\x0c\xaf\xae\x46\x83\x21\xde\x11\xb9\x30\xff\xf0\xc8\x23\xb6\xdb\xed\xa0\x04\x5b\x52\xf2\x3d\xfb\x89\x7c\x3f\xc7\x6d\x1b\xe8\x2b\x97\xc6\xf8\x1a\xdc\x38\x40\xf9\x42\x7f\xb7\xbb\xa5\xf7\xc2\x0e\xde\xa6\x03\xac\x67\xf7\x9d\x0b\x43\x0c\xe9\x5e\x08\x7d\x8e\x42\x4b\xb9\xc9\xbe\x38\x20\x8e\x7b\xe7\x2b\xc7\x05\x05\xa3\x11\x47\xbd\xd0\xca\x1d\xa5\x42\x30\xcf\xc8\xa4\x25\xd5\xd8\xeb\x80\xfa\x1c\x6e\xf6\x00\x1e\x6f\x4a\x24\x5e\xfd\xda\x5c\x26\xf7\x81\x64\x42\xd2\x5c\xa0\xa9\x25\x26\x23\xcb\xa6\x39\xaa\x60\x53\x0e\x97\x5e\xe8\xc7\x96\x4a\xf2\x9f\x32\x0b\x47\x38\x29\x4e\x2b\x5e\x44\x12\xe3\x8f\x57\x24\x08\x21\x01\xa4\xfb\xf4\x17\x94\x8a\x7d\xa5\x08\x38\x2b\x1c\x0a\x57\x71\x88\x8a\x7e\x61\xc3\x23\xab\x80\x77\xc3\xa9\x4a\x7c\xf7\x64\xe3\xb0\x44\x25\xd9\xff\x57\x2a\x81\xae\xc3\x05\xa6\xea\xf0\x4c\x70\xaa\x9a\x70\xe9\x49\xab\xf2\xbb\xea\xb3\x3f\xe1\xfe\xbb\x3f\x8f\x1c\x75\xe3\x38\x20\x20\x37\xdc\x27\xec\x7c\x02\xab\x20\x8a\x7a\x86\x58\x1a\x56\x6a\xe6\xf6\x11\xe2\x58\x2c\xb8\xdd\xa3\xcd\xe0\x8c\xb3\xd7\x21\x8e\x7a\x36\x2a\x50\xc7\x62\x3e\xff\xae\x8c\x20\xd0\x1d\x30\xff\x82\x7f\x45\x26\xe5\x80\x29\xd8\x29\xb0\x20\xc7\xe7\x1f\xf0\x1f\x02\x3a\x01\xc3\x57\xaf\x91\x67\x47\x30\xb5\xe8\x36\xc1\x8e\x6e\x91\xdd\x4b\x2d\x7e\x35\xe0\xf9\x3f\x71\x96\x5a\x0d\xf5\x2c\x33\x38\x03\xd6\xe7\xa3\x4e\xb6\x26\xb3\xab\x0d\x01\x97\x84\xa5\xf2\x9f\xce\x2c\xf0\x7e\x3f\x0a\x36\x5e\x99\x98\xbf\x09\xa8\x47\xfd\x39\xe4\x10\xa0\xcf\xfe\x07\xaa\x14\x11\x1d\x8b\x7b\x5c\x01\x45\xb6\x14\x66\x2a\xc1\xa6\x2e\x64\xe3\x31\x5d\x1a\x01\x60\xf2\x59\xf9\xe3\xc9\x45\x13\x90\xd4\x5a\x2e\x5c\xe1\xf7\x0f\xf0\x13\x67\x06\x51\x57\x68\x2f\x4d\xe2\x3c\xbc\xb8\x3e\xef\x5a\x0b\x62\x9c\x4d\x20\x3d\x36\x72\xb6\xc0\xea\x10\x3c\x1f\xb7\x4c\xf0\xe4\xe6\x64\xf4\xa1\x4d\x82\xd7\x93\xe1\xa0\x4d\x7a\xd3\xcb\xe9\xc9\x07\x9e\xbb\x35\x80\xdb\x04\x48\xb6\x81\xb9\xf2\xa0\xcc\x67\x03\x5d\xc1\x5f\x8f\xba\xf2\x0c\xd0\x13\xc3\xae\xe4\xfa\xa4\xb8\x9b\xc3\xb3\x16\xf0\x8e\xa0\x90\xa3\x15\x87\x6c\x0e\x81\xbc\x48\xb5\x31\xf4\x8a\x63\x84\xed\x61\x6f\xe2\x60\x58\xf3\x14\x34\xda\xb4\x49\x7d\x8b\xb0\x3f\xe0\x5f\xb5\xcc\x49\xe6\x32\xbd\xcf\xdd\x8d\x13\x52\xab\xb0\xbb\xf6\x81\x47\x9f\x87\xd9\x1a\xe3\x30\xd6\xd6\x18\xc6\x23\x61\x6b\xc9\x63\x12\x7e\x9a\xc3\x19\x7b\xea\x14\x12\xaa\xf3\x08\xcb\x46\xf9\x09\x24\x4b\x24\x90\xd2\xc5\xd9\xa2\x9b\x40\xb0\xba\x90\xc5\x54\xda\x96\xa4\x5b\x1e\x35\x60\xc0\x80\xda\xa1\x39\x72\x2a\x0f\xb9\xdc\x84\x55\xc6\x54\xe3\x90\x24\xde\xc8\xef\x59\x2a\xe7\x6a\xaf\xf2\x1c\x81\xdf\xfa\x0b\x33\xd7\xd5\xb3\x75\x1b\x91\xe7\x3a\xdf\x8e\xa6\x13\x02\xa0\x49\x02\x7c\x54\x1a\xff\xe8\xe9\xc8\x29\xae\xe6\x8e\x52\x1f\x67\x9a\x1d\xf5\xe2\x77\xfa\xf8\xb5\xb3\x9a\x45\xe5\xe3\xc2\xc1\xac\x7c\x76\xe9\x42\x44\x21\xc2\xcf\xb6\x92\xb5\x6b\x6d\x6c\x97\xfc\xfc\xae\x81\x01\xdf\xa6\x44\xfc\xd7\xcf\xef\x0e\x2e\x63\x65\x3b\x56\x15\xb2\x09\x30\xb3\x76\xd3\xcc\xe8\x0d\xff\xcf\x04\xcc\x82\xbb\x1e\x99\xe5\xa7\x0b\x0e\x05\xcd\x92\xfc\x37\x6c\x7e\x7c\x71\x3c\x27\x70\xce\xc1\x65\x95\x21\x17\xf9\x6d\x0b\xf8\x96\x07\xbc\x4f\xc4\x5e\x0f\xa9\x65\x98\xb7\x01\x9c\x39\x60\xd9\x06\xfb\x66\x90\x18\xc7\xb0\x36\x30\x51\x7d\x6c\xe6\x33\x81\xa2\x64\xaf\x47\x45\xf5\x21\x9d\x43\xc1\xa2\xa2\xff\x0d\x17\x4b\x2c\x90\x6f\xc0\xf8\x4c\x80\x51\xe4\x74\x9f\x17\x1e\xf3\x65\x78\x16\x20\x99\x00\xb5\xe6\x28\xb9\xa6\xeb\xf6\x1f\x33\xe3\x81\x9c\x08\x08\xcf\x87\xe7\x3a\x08\xc4\x8f\xca\x0a\xf0\xbb\x65\xf8\x97\x09\x70\x50\xf7\x0f\x86\x62\xa7\xd0\x2f\xd6\x52\x12\x27\x70\xc0\x59\x95\x4d\x3a\x1c\xd0\xf6\xc3\x11\x49\xb3\xc9\x06\x1d\x92\x68\xf5\xd1\x48\x74\x80\xe3\x49\x9f\x0d\xc7\x5c\x08\x67\xa5\x4a\xff\x82\x5d\xb4\x27\xd8\x3e\x53\xce\xd1\xdc\xcd\xbc\xe0\xc9\x92\x10\xcf\x77\xe7\x7b\xef\x1b\x4f\xb8\xac\x3a\x0f\xf4\x54\xf6\xe1\x31\xf4\x3f\x1c\xd7\x1d\x8f\x06\xb8\x06\x9c\x65\xc1\x81\x0f\xb9\x3e\xf1\xa8\x83\x1a\x53\xce\xd1\xa2\x11\xd7\xa9\x11\xb2\x39\xf6\x5f\xf5\x9c\xc7\x0b\xc0\xff\x7c\xad\x2e\xf2\x37\x1e\x48\x28\x99\x00\xed\x75\xf3\x99\xeb\xb3\xf0\xbe\xe2\xb0\x0b\x36\x2f\x09\x3e\xd1\x90\x09\xfb\xa7\xea\x90\x2b\x1a\x30\x8b\x3a\x05\xd9\x16\x22\x8f\xda\x07\xef\xab\x61\x53\xf9\xb7\x14\x8a\x9f\xb2\xd4\x98\x86\x9f\xf9\x34\x60\xc6\x59\x34\x0d\xe9\x3c\xb4\x11\xa0\xa9\x17\x8d\xea\x3c\xe5\x7d\xfd\xb4\x4f\x79\xbd\x80\x18\x60\x8b\xb6\x9e\x78\x22\xb9\xeb\x96\xc9\x4d\x86\x57\x2d\x3e\x34\xe6\x0a\x5f\x8d\xda\x24\x77\x31\x3a\x1d\xb6\x49\xef\x66\x74\x35\x6d\x93\xde\xd5\x70\xd2\x26\xb9\xe9\xe8\x7c\x88\xe7\x9a\x85\x17\xb7\x69\xc7\x13\x4e\xb8\xe9\xc3\x72\x19\xd5\x9a\x87\x47\x75\x74\x36\xf9\x62\x00\x3f\x82\x29\xcf\x51\xc7\xae\x3b\xc1\x5a\x1d\xb1\x15\x37\x84\xeb\x26\xfe\xc4\x56\xac\xb7\x69\x59\xea\xaf\x44\xf4\xe5\x21\xdc\x28\x3d\xef\x47\x27\x4b\xe7\xe2\x90\x9e\x3c\xff\x8b\xef\x0b\xfa\xae\x1d\xb1\xe1\xbd\xe2\x7f\x9f\xce\x20\x60\x92\x39\x5d\xb9\xb6\x45\xfd\x63\x7c\xbf\x42\x9c\x68\x46\x25\x93\xdf\xae\x10\xf7\xa3\x4f\x55\x40\x3a\xc8\x5c\x0b\xdf\xa3\xdb\x9a\xf6\x86\xe2\x50\x71\x2b\x42\x3d\x61\x42\x79\xfc\xb4\xf2\x81\xda\x58\x46\x0a\xc6\x94\x47\x12\xbb\xd1\xe1\xed\xe8\x5c\xea\x0d\x72\x7f\x78\x50\xe7\xd6\x2a\x70\xd8\x2e\xf9\x3e\x0d\xc7\x54\x9f\x40\x32\x81\x6f\xd3\x88\x5b\x51\x3c\x71\x6d\xa4\x7a\x6c\xfc\x12\x85\x1e\xf9\x17\x34\xc4\x0b\x81\xfc\x43\xd4\xb9\x21\xa0\x84\x04\x51\x32\xd5\x38\x5b\x5a\x9b\xf3\xd5\x3e\x5b\x92\xf2\x9d\xc3\x4d\xe4\xa8\xcb\x9a\xe4\xdf\x9f\x91\xa9\xd3\x66\xc3\x03\x1d\x52\xe9\x5e\xf3\xb4\x46\x97\xd2\x54\x0b\xa3\xbf\xee\x99\xa4\xc9\xbf\xcc\x4f\x9b\xb0\x5c\xc0\x6e\x17\x66\x2a\xba\x6b\x7b\x8d\x7d\x77\x0b\xb9\x83\x5f\xd4\xb3\x8a\xcc\xbf\xed\x65\xc6\xb7\x3c\x69\x5c\x68\x79\x39\xc1\xfb\x85\x0a\x54\x61\xf8\xcb\x7f\xed\x39\x2e\x98\x4d\x3d\x33\x5c\x69\x98\xca\x09\xc5\x1e\x7f\x61\x97\x47\x13\x8f\x12\x8b\x4f\x7e\xec\xa9\x44\x2e\x9f\x7b\x28\x3f\xee\x07\x08\x06\xc5\x6f\x9c\x09\xe7\x22\x09\xd2\x45\xfd\x23\x50\xae\x9b\x55\xa9\x97\xdc\xa2\xb4\x49\xbc\x32\x97\xfc\x1b\x30\x4d\x4a\x46\x96\x2e\xea\xf6\x4d\x98\x3e\xe6\x36\x7a\x72\xd9\xe6\x76\xe0\x8b\x2f\xb7\xd5\x62\x3e\x9d\x87\xfc\x6d\xaa\x96\x2a\xc4\x68\x35\x34\x88\x81\x9f\x3b\xf8\xc5\x5f\x7c\xa9\x18\xf8\x8c\x3a\x91\xcf\x90\xa1\xcf\xc8\xc6\x3e\xa1\x4c\xe9\x98\x17\x4b\x7d\x4a\x14\x00\xab\xe8\x8d\x0d\x79\x00\x07\xf8\x9f\xd8\x6c\xe9\xc8\x03\xfa\x82\xb9\xfc\x82\x19\xb4\xe1\x0b\x7b\xfb\xd7\x3c\x54\x14\x95\x07\xf9\x63\xef\x76\x24\xcf\xfd\x77\x4f\x4d\x9f\x86\xa9\x33\xff\xc9\x53\xfe\xe6\x0b\xb5\x6b\xa2\x94\xfc\xff\x00\x00\x00\xff\xff\x78\x6b\x21\x8c\x41\x78\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 30785, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

