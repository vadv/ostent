// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x7b\x73\xdb\x36\xb6\xff\x3f\x9f\x02\x97\x6d\xef\xdc\x76\x2a\xea\x26\xdb\xee\x66\x52\xdb\x33\x8e\xa5\xa4\x9a\xc6\x8f\xb5\xe5\xec\xf6\xaf\x0e\x25\x42\x12\x62\x8a\x64\x09\x50\x8e\xeb\xf1\x77\xdf\x73\xf0\xe0\x9b\x32\x29\xd2\x8a\x67\x36\x99\x89\xc5\x07\x70\x5e\x38\xf8\xe1\x00\x38\xc4\xc1\xff\x8c\xce\x4f\xa6\xbf\x5f\x8c\xc9\x4a\xac\xbd\x17\x47\x07\xf2\x87\x10\xb8\xa0\x8e\x0b\x17\x78\xb9\xa6\xc2\x21\xf3\x95\x13\x71\x2a\x0e\xad\x58\x2c\x06\xaf\xad\xec\xab\x95\x10\xe1\x80\xfe\x19\xb3\xcd\xa1\xf5\xef\xc1\xf5\xf1\xe0\x24\x58\x87\x8e\x60\x33\x8f\x5a\x64\x1e\xf8\x82\xfa\x50\x6f\x32\x3e\xa4\xee\x92\xe6\x6a\xfa\xce\x9a\x1e\x5a\x1b\x46\x6f\xc3\x20\x12\x99\xc2\xb7\xcc\x15\xab\x43\x97\x6e\xd8\x9c\x0e\xe4\xcd\x8f\x84\xf9\x4c\x30\xc7\x1b\xf0\xb9\xe3\xd1\xc3\x97\x86\x90\x60\xc2\xa3\xf2\x1a\xee\xee\xef\xed\x91\x23\x1c\xfb\xd7\x80\x0b\x24\xfe\xf0\x40\xe0\x0a\x48\x1e\x0c\xd3\x72\x47\x07\x1e\xf3\x6f\x48\x44\xbd\x43\x8b\x01\x4b\x8b\x88\xbb\x10\xe4\x60\x6b\x67\x49\x87\xa1\xbf\xb4\xc8\x2a\xa2\x8b\x43\x6b\xb8\x70\x36\x58\xc0\xc6\x67\xa5\xaa\x5c\xdc\x79\x94\xaf\x28\x15\x86\x80\xa0\x9f\xc5\x70\xce\x79\x52\x1f\xae\x87\xcc\x77\xe9\x67\x1b\x9f\x6a\x0a\x7c\x1e\xb1\x50\x64\xab\x7c\x72\x36\x8e\x7a\x6a\x15\xed\x4c\x78\x34\x07\x42\x9f\xf8\x30\x42\x0b\x47\x14\xae\x5e\xd9\x2f\xed\x97\xaf\xcd\x03\x7b\xcd\x7c\xfb\x13\xf0\x74\x41\xf1\xc1\xda\x61\xbe\x2a\x7f\x7f\xcf\x16\xc4\x9e\x1e\xbf\x7f\x3f\x1e\xcd\x98\xff\xf0\x00\xe5\xb4\x30\xaa\xc6\xfd\x3d\xf5\x38\x58\x08\x38\x0c\xd7\xcc\xbb\xd1\x2f\xe5\x0b\xdf\x7d\x78\xb0\x8c\x51\x0f\x86\x4a\x38\x2d\xff\x50\xbb\xc6\xd1\xc1\x2c\x70\xef\xf4\x43\xdf\xd9\x90\xb9\xe7\x70\x7e\x68\xc1\xe5\xcc\x89\x88\xfa\x19\xb8\x74\xe1\xc4\x9e\x30\xb7\x0b\xf6\x99\xba\x03\x11\x84\x16\x89\x02\x68\x46\x2c\xcd\x96\xe0\x2c\xd0\x0c\x09\x3f\x97\x25\xc4\xd0\x23\x40\x25\x0a\x35\xbd\x98\xb9\xa6\x4c\xa1\x94\x1b\x05\xa1\x1b\xdc\xfa\x86\x0b\x4a\x48\xa3\xb4\xb0\x14\x36\x16\x22\xf0\xf3\x42\x82\x20\xcb\xa5\x47\xc1\xef\x3c\xcf\x09\x39\x75\x4d\x4b\xaa\xc2\xda\xa6\xaa\x10\xca\xa2\x4a\x99\xc7\x4e\xb4\xc4\x86\xfa\x46\xd3\x4a\x5e\x67\xd8\xca\xf6\x0e\x9d\x84\x2d\x8f\x06\x81\xef\xdd\xe5\x8b\x40\xa1\xa9\x92\x23\x35\x06\xd8\x1c\xaa\x6d\xa1\x84\x7e\x39\x00\xb6\x25\x52\xcf\xa6\xe6\x50\x19\x31\xd7\x08\x0e\x61\x6e\xda\x5c\xb3\xc8\xf1\xc1\xe4\x85\x46\x34\x8d\xa2\xcd\xaa\x0b\xe5\x5a\xc2\x14\xb5\x88\x13\x31\x67\x40\x3f\x03\x77\x97\x02\x65\x11\xc5\x34\xe9\x7d\xc5\x86\x40\x87\x41\xf6\x2b\x0d\x0e\x25\x35\xca\xe8\x71\x30\x84\x4a\x45\xbd\x9c\x9c\x4a\xb1\x57\x52\x60\x4d\xfd\xd8\xf8\xb7\xba\x96\x62\x7a\xce\x8c\x7a\x1e\x75\x67\x77\x45\x13\x14\x38\x78\xac\x44\x52\x7b\xb4\x26\x1a\x46\x94\x03\xa8\xe5\xba\x4d\x52\x3d\x8a\x7d\x9f\xf9\xcb\x83\xa1\xc7\xca\x74\x1b\xd4\x87\x46\x2a\xb5\x08\xa0\x54\xb1\x5c\xc6\x5e\xa3\xc9\xd5\xf4\x72\xf2\x16\xcd\xe5\x94\x5d\xa3\x24\xc6\x30\xf6\x72\x16\xcc\xd9\x38\x6d\xa6\x62\xb7\x4a\x21\x41\x3d\x20\x5b\xfa\x5d\xb6\x59\x10\x9a\x74\x51\xf8\xa9\xb0\x35\x32\x63\xa1\x55\x84\x86\x0a\x9d\x13\x8d\x27\x17\xa8\x6c\x95\x81\x0b\xa6\x2b\x5b\xd7\xa8\x67\x4a\x78\x4e\x15\x67\x52\xe8\x0d\xad\x3a\x40\xb9\xa5\x12\xae\xc0\xad\xf4\x36\xa3\xd7\x87\xe3\x2a\x9f\xaf\x68\xa6\xb2\x99\x77\xf1\xfe\x2a\x69\x3a\xba\xbf\x24\x11\x87\x82\xad\x69\xa9\x81\x12\xf2\x0d\xc9\x68\xb8\x52\xd4\x2a\x70\xaa\xb2\x57\xe4\xec\x79\x2d\xab\x56\x75\x0c\x6d\xd3\x4a\x09\xf3\x1d\xa4\xba\x64\xb9\x1b\xd5\x79\xbc\xb9\x8c\xd8\x72\x25\xea\xa1\x66\x9b\xdb\x67\x68\x7b\x8c\x8b\x01\xf3\x21\x0c\xa2\xb5\xbd\xca\x90\xae\xb1\xa9\x82\xe7\x6f\x30\x08\xa8\xb6\x1e\xbe\x6a\x67\xb1\xc7\x78\x85\xbc\x8e\x55\xc8\xfb\xe5\xb4\x59\xd6\x71\xda\x38\x4b\x00\x7b\xf1\x14\xae\x50\xee\x31\xc4\x99\x0b\xb6\x29\x0f\x71\x85\x11\x78\x43\x23\x8e\xde\x5f\x33\x06\xef\x32\xec\xe2\x6c\x80\xbf\x19\x0e\x6f\x6f\x6f\x6d\x18\x47\x23\xf8\x6f\xcf\x83\xf5\x50\xc5\xe1\x10\xb5\x7a\xd4\xe1\x94\x0f\x3d\x47\x50\x5e\x35\xaa\x9c\x5f\x4d\xc7\x67\xd3\xaa\xa1\xa4\x1b\xd8\x18\x5d\x9f\x04\x71\x34\xf1\x3e\x20\xa7\x1f\x33\x4a\x6a\x06\x86\x3e\x8e\x2f\xaf\x26\xe7\x67\xfb\xc1\xa1\xc2\x70\x9e\xb9\x85\x1b\xc0\x0a\x3d\x63\x30\x23\x92\x9c\x0b\x54\x47\xfb\x24\x74\x5c\x17\x42\x19\x9c\x2f\x70\xba\x01\xbd\xef\xf8\xaa\x72\x9a\x10\x05\xb7\xc5\xa9\x01\xd2\x5e\xd3\x35\x84\xe9\x6a\x1e\xaa\x0a\xce\xbc\x60\x7e\x83\xf1\xfe\x60\xed\x0e\x5e\x99\x8b\x60\xb1\x80\x39\xd7\xe0\x65\x2e\x84\xb8\xbf\x17\x74\x1d\xa2\x7d\x89\x05\xb3\x18\x10\x8b\xbf\x79\xa3\x2e\xfe\x00\xc7\xa7\x1e\x50\xb7\x88\x5d\x1c\x30\x53\xee\x6c\xb1\x8d\xf9\xdf\xda\x31\x63\x8b\xad\xbc\xe6\x61\xbc\x55\xd3\x76\xcc\x80\xda\x56\x6e\x6e\x9f\x9a\xb9\xd5\x9a\xe5\xfd\xc6\xdc\x34\x99\x1c\x36\xf1\x8c\x90\x6f\xd3\xe0\x75\xc1\x31\x5a\x9a\x0f\x46\x9b\xfd\x6b\xb4\x59\x3e\xa1\x46\x30\xaa\xb5\xd1\x68\xeb\x12\x87\xa9\xb0\x71\x22\x82\xe8\x44\x0e\x89\xc6\xa9\x87\x87\x5f\x8a\x6b\x0d\x7a\x89\x01\x57\x1d\xe4\x02\xd5\xfd\xfd\xf0\x87\x17\x3f\x0c\x1f\x1e\xee\xef\x95\x7c\x19\x81\x1d\x04\x6f\x5c\x9f\xb1\x40\x52\x8d\xa3\x40\xf9\x57\xf8\xc5\x75\x20\xff\xc4\x63\xf3\x9b\xc3\x7b\xb1\x62\xdc\x5e\xc1\xc8\xe5\x51\xf9\xe4\xe1\x85\x42\xca\x29\xc8\xa9\x10\xf2\x48\xaf\x80\x6c\x63\xa6\xad\x33\xf7\x60\xe6\x00\xb5\x98\x1f\xc6\x02\xf5\x98\x8c\x8e\x85\x88\x80\x1f\xdc\xc8\x86\x78\x78\x48\xa7\x2c\x83\xf9\x8a\xce\x6f\x66\xc1\x67\xb3\xce\x90\xde\xcb\x61\x6b\xc5\x5c\x97\xfa\xc9\x78\x2a\xef\x50\x9a\x4f\xfc\xf3\x89\x17\xc0\x94\xc7\x92\x7c\x90\xa1\x1c\xe1\x90\xe1\xbb\x20\xd2\x1c\xb3\x0c\x51\x2c\x7c\x7b\xfa\xaf\x2b\x5c\xa6\x52\x25\x0a\x8a\x4a\x12\xad\x94\x0d\x63\x70\x3e\x6e\x61\x99\x5b\x26\x56\x04\xef\xc0\x9b\xd0\x35\x80\x2e\xfe\x51\x4b\x4a\xf7\xf7\x10\xe9\x2c\x29\xf9\x96\xfd\x48\xbe\x9d\x07\x11\x25\x6f\x0e\x89\x1a\x8a\x4e\x2e\xae\xed\x0f\x10\x43\x82\x00\x22\x02\x09\xe5\x6b\xfb\xcc\xfe\x8d\xde\xa1\x90\x44\x22\x19\xd0\x9d\xdd\x0d\xce\x2c\x25\xf2\x81\x70\x8d\x4f\xa3\x2f\xa9\x40\x96\xf8\xc1\x6d\xe4\xe8\x08\xf2\x28\xa1\x83\x7a\x09\xb7\xb6\x56\xb2\x06\x87\xab\x1a\xa9\xbd\x4c\xf5\x6b\x4e\xa3\x13\xf5\x2c\x5d\x51\x4c\x5f\x21\xf1\x64\xa1\xe3\xa8\x0b\xa3\xab\x3b\xae\xf9\x90\x22\x23\x78\xd5\x1f\x9f\x89\x74\xf2\x4a\x85\xf0\x55\x0d\xa3\xa1\x88\x32\x6e\x91\xff\x69\xe2\x24\x0a\x87\xb0\x85\xf1\x22\x11\x1a\x6f\x5e\x12\x88\x65\x58\x48\x35\x56\x29\xbd\x32\x6b\xcd\xc0\xd9\xe0\x89\x58\x65\x91\x26\xb9\xc3\x17\x8f\xb8\x83\x2c\x86\x0d\x96\x5b\xbd\x8a\x7d\x96\x8b\x93\x8e\xbe\x2b\x2c\x5b\xed\xc2\x05\x5a\xeb\xe9\x99\x60\x53\x75\xe1\x32\xd4\x56\x95\x4f\xcd\xe2\xad\x48\x57\x6f\xb7\xc1\xbf\xe9\xf3\x0a\xfe\x45\x8a\xc7\xb2\x01\xdb\xa0\x87\xbb\x98\xdd\x41\xac\xfa\x47\x4b\x08\x71\x19\xbf\x49\xe1\x63\xf4\x4e\x12\xc9\x43\x08\x16\xb1\x47\x2c\x3a\x73\xd6\x34\x05\x12\xcd\x4f\x83\x89\xcb\x22\xb9\xe6\x57\x82\x94\x02\x8e\x6c\xb1\x84\xc4\xd4\xff\xd3\xdc\xe8\x46\x72\x83\x11\x24\x24\x2f\x5f\x21\xb7\x81\x62\xe7\xd2\x8d\x64\xf4\x7d\x25\x14\xed\xc8\x4d\xeb\x26\xb9\xfd\x3d\xcb\x4c\x6b\x55\xcd\xac\x04\x13\xc6\x56\xc7\x1b\x87\x79\xed\xaa\x40\x77\x82\x66\xfe\x5f\x7f\xc6\xc3\x5f\x0e\x78\x1c\xa6\x70\x52\xaf\x43\xcc\x69\x48\xa3\x39\xc4\xed\xa0\x49\x7a\x43\x12\x8a\x17\xea\x81\x94\xde\xd0\x6c\x84\x77\x46\xaa\x69\x20\x9c\xac\x22\x9d\x90\xcb\x38\x68\x2f\xf0\x55\x69\x17\xb1\x4a\x42\x14\x62\xae\xb4\x63\x5f\x38\x91\xb3\xe6\xf6\xf8\xec\xfa\xd4\x76\x17\xc4\x7a\x77\x65\x11\x4b\x76\x93\x6e\x74\x4e\x2f\xfa\xa1\x73\xfc\xf1\x78\xf2\xa1\x07\x3a\xd7\x57\xe3\x51\x0f\x64\xa6\xe7\xd3\x63\x14\xa7\x13\xb6\xe5\x10\xa9\x0f\x80\x63\x7e\xe0\x76\x47\x38\x45\xa5\x19\xc4\xa9\xb2\xfb\xc3\x38\xcd\x6f\x4f\x20\xd7\x88\x5b\x2d\x38\x4c\x16\x11\xa5\x2d\xab\xc4\xbd\xc3\x1c\x92\xec\x8c\x73\x13\x69\x88\xfe\x80\x4e\x3b\x6a\x5f\x81\x9a\xa9\x59\xdc\x77\x3d\x1a\xc9\x1d\xfc\x9a\x90\xa7\x54\xfa\x34\x88\x7d\x41\xdd\xad\xc5\x49\xd1\x46\xb2\x98\x1c\xd0\x76\xa8\x87\xa3\xda\x0e\xd5\xe4\xb0\xd3\x5b\x88\x95\xc7\x8d\xee\x38\xc4\x76\x0b\xb4\xd8\x22\x05\xa1\x49\x55\x98\xc5\x16\x76\x1e\x7e\x58\x2e\xc2\xca\x43\x4f\xf3\xce\x6f\xc8\x26\x30\xc3\x4c\x74\xd3\xb2\xd3\x03\xa1\x11\xf5\x84\x33\xf1\x5b\x57\x39\x8f\x45\x9b\x3a\xed\x38\xe4\x89\x77\xea\xb9\xac\xcf\x10\x25\x37\xc3\x9a\x40\xcf\x8b\x16\x4e\x6d\x67\x2d\xcf\x4f\x88\xcc\xa8\x39\xb4\xde\x4e\xa6\x57\x04\x30\x8f\x70\x3a\x0f\xb2\x9b\xd9\x40\x73\xfb\xac\xe5\xa0\xb0\x94\x3c\x3b\x18\x66\x9f\x1c\xe1\xde\xcc\x8e\x93\xa7\xc7\x85\x83\x56\xf9\xe2\xd2\x09\xc4\x11\xf2\xf6\xf7\xe9\xf8\x8a\xac\x03\x37\xf6\x02\xf2\xd3\xfb\x0e\x06\x7c\x5b\x10\xf1\xbb\x9f\xde\x3f\xb9\x8c\xad\xed\xd8\x56\xc8\x2e\xd0\xca\xfa\x8d\xf0\xd8\x82\x46\x51\x10\x75\x84\x56\x45\xe3\x51\x6c\x55\xc5\x9e\x00\x5c\x35\xe1\xaf\xe8\x5a\xdb\xbc\xcf\x09\x5e\x6b\x90\xd5\x84\xa8\xdb\x7a\x5e\x0f\x08\x55\x07\x9d\x7b\x62\x5f\x0d\x8a\x4d\x98\xf7\x01\x7d\x35\x70\xd7\x07\xfb\x6e\xa0\x96\x45\xa1\x3e\x50\x2d\x74\xe6\x37\x54\x74\x84\x35\x4d\xe4\x51\x5c\xd3\xe5\x9e\x00\xd8\x0c\xe5\xaf\xc8\x56\xdf\xc4\x5f\xa1\xed\x99\x40\x9b\x8a\xab\xbe\x2c\xc0\xd5\xcb\xf0\x2c\x60\x2e\x07\x4b\xdd\x71\x6e\x4d\xd7\x3b\x6c\x5f\x42\xad\x14\xe5\x4e\xc7\xa7\x79\x7c\x83\xb7\xf6\x6f\xcc\x77\x53\x80\xc3\x9c\x13\x05\x6d\x37\xf0\xbc\x0c\x6d\x49\x95\xc6\x50\x80\x15\xde\xb5\x59\xca\xc2\x0a\xbd\xae\xd7\x6b\x82\x5d\x96\xb1\x90\x44\xaf\xab\xf5\x40\xf0\x0b\xec\x33\x66\xba\x08\x36\x49\x9b\xf2\x5b\xd6\x9a\xf6\xb0\xc8\x64\x9c\xbf\x7b\x37\x4a\x32\x84\x80\x50\x26\x2d\x45\x3e\x7e\xa9\x2c\xad\x92\x13\xb2\x2f\x64\x3e\x1d\xf3\x97\x64\x26\xfc\x81\xcc\x4c\x31\x3b\xd7\x0e\xc1\x2f\x55\xde\x5e\xc8\x6d\x6a\xd9\x85\x72\x2b\xfe\x6f\xcf\xcf\x3f\xd8\x00\xd2\x0b\xb6\x04\x9e\xc4\xc2\xfa\x6a\x69\x4e\x91\x31\x89\x8e\xe5\x37\x96\x4c\x89\xd8\x42\xcc\x56\x5f\x5d\x60\x7e\x48\x92\x1f\x21\x65\x3a\xb9\xb8\x36\x89\x72\x47\x26\x4d\x02\x2f\xf3\x29\x3b\x3a\xed\x4a\x91\xb3\xda\x69\x01\xe2\x26\x39\x21\x2a\xcd\xc3\x4a\xd9\x1f\x2c\x82\x68\x9d\xcd\xe6\x58\x05\x11\xfb\x0b\x33\x83\xbc\x81\x7c\x35\x0b\x22\xa9\x65\x20\x44\xb0\x96\x8f\xac\xa2\xa6\xff\x8c\x69\x74\x87\xb9\x21\xeb\xe3\x39\x26\x1b\xe6\x14\x94\x93\x72\x99\xb0\x62\xd6\x3a\xa5\x08\x03\x1e\xcf\xd6\x2c\xf9\x9a\x49\xdf\x65\xea\x64\x5a\x1b\x99\x0e\x96\x51\x10\x87\x03\x4c\xd2\xa3\x6e\x7e\xca\x9f\x29\x89\xcd\x22\x0b\x92\xe4\x6a\xc0\xd7\x26\xb1\x52\xde\x17\x93\x92\x9b\xb8\x04\x88\x4c\xa5\x29\x93\xf6\x57\x2e\x20\xb9\xe8\x8f\x8e\xea\x3c\x40\xd7\xad\x6b\xff\x44\x90\x5f\xa5\x59\x8a\x39\x93\x89\x7c\x45\xf1\x30\xb5\x65\x2c\x73\x62\xb1\x4b\xc1\x9d\x94\xc9\x65\x1c\x6f\xdd\xe6\xe2\xa9\xbc\xda\x26\x02\x9a\xda\x29\x67\x44\x12\xb8\x2b\x67\x7a\x96\xf2\xf7\x2b\xbf\xbb\x68\xd4\xba\xdb\x60\x06\x44\x8d\x28\x5f\x59\xf9\x16\xbb\x18\x5f\x4e\xce\x47\xb6\x7e\x09\x9a\x55\xa4\x92\x21\xcf\x17\x25\xd1\x92\xcb\x62\xef\x6b\xe1\x21\xf5\x3d\xed\x91\xc4\x07\x9d\x4f\x97\x4b\x7c\xcb\x08\x24\x2f\xda\x02\xa7\xbb\xd8\x3b\x6e\xe2\x7e\x69\x5f\xb0\xe9\x2e\x6a\x51\xb3\x50\x49\x6f\xd5\x0a\x7b\x8a\xb1\x66\xea\x90\x8f\x20\xaa\xbb\x68\x0b\xa8\xa8\x5e\x27\x3c\xfd\xef\x04\x4f\x34\xdb\x8e\xd8\x59\xef\x04\x89\x18\x2d\xa1\x33\x85\xcd\xd1\xbb\x4e\xa8\xd9\x40\x34\x53\x39\x05\xcc\xd1\xbb\x67\x8d\x97\xee\xe2\x31\xb8\x2c\x7d\xfa\x83\x61\x2f\xcf\x7a\x9f\xc7\xa4\xe1\xc5\xd8\x8f\xd7\x68\x16\x5e\x99\x57\x21\x88\x35\x39\x3b\x1f\x8d\x31\xf7\x44\xfb\x46\xce\x7e\xd5\xaa\x38\x0d\xb3\x36\x52\xea\x85\x8f\xe7\x5a\x88\x37\x7a\x27\x77\x22\x9e\x4a\x3e\x43\xbe\x24\x60\xfa\x91\x43\x7f\x83\x13\xf6\xc0\x2d\xa8\x95\x22\xa2\xda\x1e\x56\x88\x78\x46\x6b\xc8\x56\x34\x61\x2d\x71\x24\x2f\xe7\xf5\x59\xfa\xe9\x54\xa9\x91\xe7\x16\x92\x08\xd4\x28\x59\x5c\x0a\xc8\xe6\x87\xa7\xfa\xc8\x3d\x99\xc6\xea\xa4\x4d\xde\x54\x1f\xb5\x7b\xdc\x56\x9d\xec\xce\xea\xe3\xda\xf4\x16\x10\xb0\xfd\x07\x04\xac\xc7\x80\x80\xb5\x0b\x08\x58\xeb\x80\x80\xb5\x0e\x08\xd8\xd7\x80\x20\x5b\xbb\x69\x40\xc0\x76\x0f\x08\xea\x9d\x20\x11\x63\xe7\x80\x60\xd2\x2d\x20\x68\x20\x5a\x39\x20\x98\x3c\xef\x80\x80\xed\x29\x20\x60\x08\xbf\x17\xc7\x27\xbf\x8d\xa7\x4f\x31\xe2\xe6\xc8\xef\x14\x12\x48\x0a\xe3\xcb\xcb\xf3\xcb\x27\x93\x4f\x53\xdf\x5d\xbc\xc9\x93\x45\x2c\x39\xf2\x7b\x89\x58\x58\xb3\x88\x25\x59\xb9\x6f\x32\xc6\x17\x9c\xac\xd9\x18\x9f\xee\x22\xb6\x1b\xe5\x8b\xfb\x60\xcd\xa3\x16\xb3\xe9\xda\x58\xa5\xc4\x2d\x9b\x6a\xa4\xd3\x32\xda\x2a\x94\x4b\x59\x68\xa3\x4f\xe3\x28\xac\xe0\xc6\x4d\xf5\xd9\x25\x0a\x63\x5f\x2a\x0a\xc3\x6f\x79\xf7\x1d\x86\xe1\xce\x52\x6f\x71\x98\xda\x5f\xa9\x0e\xc4\x4e\xe9\x3a\x88\xee\x1a\xc6\x5b\x40\xa8\x6d\xc0\x25\x15\xf9\xba\xa4\xdd\x47\x10\x26\x4d\xb9\x63\x14\xb6\xc5\x05\x12\x41\x1e\x09\xc3\x1e\x95\x8f\xdf\x3a\xe1\xce\x02\x62\xe5\x92\x84\x92\xf1\x48\x47\x77\xdb\x2d\x53\xa9\x0e\x25\x48\xf6\x19\x47\x6b\x52\xf0\xfd\x2c\x77\x4b\xef\xd9\x6d\xb9\x3b\xd9\x4e\xed\x77\xb9\x3b\xe4\x7b\x87\xd5\x90\xf7\x87\xaa\x21\xaf\x05\xd5\x8b\x28\x98\x53\xce\x29\x6f\x88\xab\x21\x6f\x0b\xab\xa8\x48\x3b\x54\x55\xe7\xf2\xd4\x21\x6a\xf6\x5b\x86\xe7\x05\xae\x5d\xbb\x58\xc8\xab\xcf\xaa\x78\x4e\xc8\x8e\xad\xb9\x23\x6e\xd6\x7b\x61\x16\x08\xdb\x4c\xaf\x2f\xae\x64\x67\x87\x5f\x3f\x10\x23\x3a\x8f\xa8\x23\x01\x38\x37\xcf\xae\x13\xd2\x03\xb7\x37\x92\xe4\x95\xfd\x30\x39\x9d\x4c\xed\x90\xfb\x65\x01\x07\xbb\xc9\x96\xae\x03\x34\x12\x0d\xe2\x1c\xda\x5a\xb4\xc4\xec\x09\xe3\xd0\x8b\x79\x7a\x1c\x44\x5e\xea\xc7\xc6\x95\xa7\x41\x76\xf4\x9e\xdd\x80\x3d\xe4\x4f\x81\xeb\x9b\xe5\xde\x71\x7d\xb3\xec\x0f\xd7\x37\xcb\x5a\x5c\xff\xa8\x8e\xe9\x22\x4b\x2f\x98\xe1\x69\xb3\xc2\x11\x71\x53\x8c\xdf\x2c\xdb\x62\x3c\x2a\xf5\x15\xe3\x9b\x60\xfc\x66\xf9\xfc\x31\x1e\x5b\x73\x47\x8c\xaf\xf7\xc8\x44\x8c\x3a\x8c\xff\x32\x88\x84\xba\xee\x86\x48\x9b\x65\xdf\x88\xc4\x5b\xe6\x75\x86\x10\xbb\xa5\x49\x9d\x06\xf7\x73\x89\x9d\x58\xc4\xbe\x98\x8c\x30\x8d\xd0\x5f\xa6\xe9\x9d\xa1\x49\x5c\x0f\x99\xbb\xed\x7c\x1a\x8d\x6f\x59\x52\xcd\xf2\x37\x93\x1a\xd7\x85\x1a\xfa\x75\xe6\x5f\x93\x3c\x79\x45\x8a\xd3\x28\xcd\x94\x0f\x79\x0c\xf7\x52\x01\x52\xd0\xb3\x61\xd2\x7c\xaa\x55\xc4\x60\x22\x2f\xee\x5a\x56\x3b\x63\xf3\x86\xd9\xac\x49\x95\x2b\xf6\x57\xdb\x2a\x97\x94\x83\x9f\xfa\x5b\x32\xf4\x31\x9b\xd5\x7c\x81\x7c\x64\xaa\x4d\xf5\x89\x9d\xdb\x3f\x6b\x6f\xd7\x00\xe9\xa7\x0a\x3f\xc9\x06\xc0\x2f\x14\x1e\x6d\x80\x4e\xe9\xb1\x66\xd8\xaf\xcc\x8e\x7d\xb5\x97\x63\x2c\x30\x66\x01\xc5\x3a\x9e\xf6\x80\x54\xae\xfb\xa1\x72\x35\xbe\xec\x7e\x18\x86\xd4\xea\x72\xd2\x03\x95\xb3\xc9\xc9\xb8\x07\x32\x1f\x27\x97\xd3\x1e\xc8\x5c\xca\x4d\x84\xae\x54\xa6\x93\xd3\x31\xc6\x33\xaa\x63\xf5\x60\xa3\x63\x49\xaf\xeb\x49\x1f\x7a\x84\xe8\x9e\xfc\x6c\x22\x15\x1d\xfc\xc2\x88\xa2\x1e\xc8\xd1\x92\xd8\xfa\x80\x36\x1d\x5f\x64\xae\x21\xc2\x20\xba\xa8\x7a\x60\xc6\x8e\xdc\xf9\xea\x99\xf2\x10\xc3\x98\x23\x42\x8f\x2e\x55\xc5\x64\x29\xfc\x28\x39\x6e\x2e\x89\x0a\x65\xf8\x83\xa7\x07\x42\x14\x93\x30\x52\x87\xc5\x65\x8e\xe1\xb3\x08\xd8\x67\x4e\x57\x81\x07\x61\x23\x9e\x8d\x77\x91\xde\xca\xd8\x24\xa4\x00\xe8\x2e\xa2\x95\x1a\xf9\x33\x0f\x3f\x3a\x5e\x9c\x3c\x7d\x21\xed\x5d\x71\x2c\x5d\xdb\xa1\x3b\xf3\xc9\x01\xd4\xd6\xa7\x98\xd9\x49\xec\x91\x9c\x59\x27\xb9\x3f\x3c\x98\x73\xae\x5a\x70\xd8\x2c\xe5\x0e\x89\xa5\x46\xf6\x1b\x7a\x87\x61\xba\x7a\x64\xf0\x1d\xec\x18\x78\x48\x17\x2d\xf9\x73\x32\x1c\xe8\xb3\x53\xd5\x7c\x60\x8c\x35\x6a\xc1\xb9\x81\x14\x49\x88\xa2\x63\x90\xb5\x33\x5f\xa5\x31\x88\xe6\x72\x0a\x0f\xb1\x5e\xe1\x23\x13\x78\x6a\x5f\x03\x08\xa6\x61\x88\x3e\x4c\x58\xc7\x22\x71\xcc\x4a\x5f\x9a\xb4\x88\x11\x52\xfa\x72\x88\xfa\x47\x4a\x5e\x12\xfe\xbe\x3e\x0c\x31\xc2\x9d\x39\x85\x31\xb3\xb2\xd4\x45\x14\x6c\x98\x4b\xa3\x6d\x25\x1b\x4a\x0b\x21\x9b\xd0\x23\xea\xeb\x54\x5c\x9c\xac\x41\x5c\x99\x2a\xb4\x55\xf4\x86\xac\x74\xd3\x2c\x98\x87\x73\x5f\xb1\x52\x5c\x7f\xfe\xff\x94\x2d\xbe\xc2\x37\x75\x9c\x2b\x07\xf2\x06\x2e\xc3\x21\x9a\x9d\xaf\x9a\xc4\xb5\x6c\x41\xe8\x9f\xa4\xec\xb0\x2e\xc1\xa3\x24\x6b\x60\xb8\xd0\x41\x48\x8e\xe2\xb6\xf2\x09\x96\xee\x1a\x9c\x98\x19\x40\x12\x9c\xa8\xc9\x73\xfe\xfc\xd2\x2e\xdf\xf1\xb0\xe2\x97\x36\xe9\x2b\x0c\xbd\x6a\x5f\x86\xda\x43\x6b\x0b\x48\x0f\xab\x7d\xeb\xb2\x88\xce\x85\xdc\x6b\xeb\xe9\xb3\x9d\xc4\x09\x3a\x0c\x5d\x99\xe1\x16\x0d\xbe\xca\xed\xc3\xa9\x53\x6e\xc0\x9d\x8e\x3d\xb6\xf4\x4f\xd4\x73\x65\xe7\xd2\x11\xaa\xd9\xf3\x25\x6d\x5d\x34\x01\x4b\xbd\x5e\x56\x3a\x88\xd2\x3e\x71\x22\x2a\xb2\xa5\xa5\xf8\xd9\x63\x27\x1d\xad\xd1\x2a\x51\xe7\x3f\x01\x00\x00\xff\xff\xb6\xeb\x0c\x26\x98\x68\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26776, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

