// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x7b\x73\xdb\x36\xb6\xff\x3f\x9f\x02\x97\x6d\xef\xdc\x76\x2a\xea\x26\xdb\xee\x66\x52\xdb\x33\x8e\xa5\xa4\x9a\xc6\xb6\xd6\x96\xb3\xdb\xbf\x3a\x94\x08\x49\x88\x29\x92\x25\x40\x39\xae\xc7\xdf\x7d\xcf\xc1\x83\x6f\xca\xa4\x48\x3b\x9e\xd9\x64\x26\x16\x1f\xc0\x79\xe1\xe0\x87\x03\xe0\x10\x07\xff\x33\x3a\x3f\x99\xfd\x3e\x1d\x93\xb5\xd8\x78\x2f\x8e\x0e\xe4\x0f\x21\x70\x41\x1d\x17\x2e\xf0\x72\x43\x85\x43\x16\x6b\x27\xe2\x54\x1c\x5a\xb1\x58\x0e\x5e\x5b\xd9\x57\x6b\x21\xc2\x01\xfd\x33\x66\xdb\x43\xeb\xdf\x83\xab\xe3\xc1\x49\xb0\x09\x1d\xc1\xe6\x1e\xb5\xc8\x22\xf0\x05\xf5\xa1\xde\x64\x7c\x48\xdd\x15\xcd\xd5\xf4\x9d\x0d\x3d\xb4\xb6\x8c\xde\x84\x41\x24\x32\x85\x6f\x98\x2b\xd6\x87\x2e\xdd\xb2\x05\x1d\xc8\x9b\x1f\x09\xf3\x99\x60\x8e\x37\xe0\x0b\xc7\xa3\x87\x2f\x0d\x21\xc1\x84\x47\xe5\x35\xdc\xdd\xdd\xd9\x23\x47\x38\xf6\xaf\x01\x17\x48\xfc\xfe\x9e\xc0\x15\x90\x3c\x18\xa6\xe5\x8e\x0e\x3c\xe6\x5f\x93\x88\x7a\x87\x16\x03\x96\x16\x11\xb7\x21\xc8\xc1\x36\xce\x8a\x0e\x43\x7f\x65\x91\x75\x44\x97\x87\xd6\x70\xe9\x6c\xb1\x80\x8d\xcf\x4a\x55\xb9\xb8\xf5\x28\x5f\x53\x2a\x0c\x01\x41\x3f\x8b\xe1\x82\xf3\xa4\x3e\x5c\x0f\x99\xef\xd2\xcf\x36\x3e\xd5\x14\xf8\x22\x62\xa1\xc8\x56\xf9\xe4\x6c\x1d\xf5\xd4\x2a\xda\x99\xf0\x68\x01\x84\x3e\xf1\x61\x84\x16\x8e\x28\x5c\xbd\xb2\x5f\xda\x2f\x5f\x9b\x07\xf6\x86\xf9\xf6\x27\xe0\xe9\x82\xe2\x83\x8d\xc3\x7c\x55\xfe\xee\x8e\x2d\x89\x3d\x3b\x7e\xff\x7e\x3c\x9a\x33\xff\xfe\x1e\xca\x69\x61\x54\x8d\xbb\x3b\xea\x71\xb0\x10\x70\x18\x6e\x98\x77\xad\x5f\xca\x17\xbe\x7b\x7f\x6f\x19\xa3\x1e\x0c\x95\x70\x5a\xfe\xa1\x76\x8d\xa3\x83\x79\xe0\xde\xea\x87\xbe\xb3\x25\x0b\xcf\xe1\xfc\xd0\x82\xcb\xb9\x13\x11\xf5\x33\x70\xe9\xd2\x89\x3d\x61\x6e\x97\xec\x33\x75\x07\x22\x08\x2d\x12\x05\xd0\x8c\x58\x9a\xad\xc0\x59\xa0\x19\x12\x7e\x2e\x4b\x88\xa1\x47\x80\x4a\x14\x6a\x7a\x31\x73\x4d\x99\x42\x29\x37\x0a\x42\x37\xb8\xf1\x0d\x17\x94\x90\x46\x69\x61\x29\x6c\x2c\x44\xe0\xe7\x85\x04\x41\x56\x2b\x8f\x82\xdf\x79\x9e\x13\x72\xea\x9a\x96\x54\x85\xb5\x4d\x55\x21\x94\x45\x95\x32\x8f\x9d\x68\x85\x0d\xf5\x8d\xa6\x95\xbc\xce\xb0\x95\xed\x1d\x3a\x09\x5b\x1e\x0d\x02\xdf\xbb\xcd\x17\x81\x42\x33\x25\x47\x6a\x0c\xb0\x39\x54\xdb\x41\x09\xfd\x72\x00\x6c\x4b\xa4\x9e\x4d\xcd\xa1\x32\x62\xae\x11\x1c\xc2\xdc\xb4\xb9\xe6\x91\xe3\x83\xc9\x0b\x8d\x68\x1a\x45\x9b\x55\x17\xca\xb5\x84\x29\x6a\x11\x27\x62\xce\x80\x7e\x06\xee\x2e\x05\xca\x22\x8a\x69\xd2\xfb\x8a\x0d\x81\x0e\x83\xec\xd7\x1a\x1c\x4a\x6a\x94\xd1\xe3\x60\x08\x95\x8a\x7a\x39\x39\x95\x62\xaf\xa4\xc0\x86\xfa\xb1\xf1\x6f\x75\x2d\xc5\xf4\x9c\x39\xf5\x3c\xea\xce\x6f\x8b\x26\x28\x70\xf0\x58\x89\xa4\xf6\x68\x4d\x34\x8c\x28\x07\x50\xcb\x75\x9b\xa4\x7a\x14\xfb\x3e\xf3\x57\x07\x43\x8f\x95\xe9\x36\xa8\x0f\x8d\x54\x6a\x11\x40\xa9\x62\xb9\x8c\xbd\x46\x93\xcb\xd9\xc5\xe4\x2d\x9a\xcb\x29\xbb\x46\x49\x8c\x61\xec\xe5\x2c\x98\xb3\x71\xda\x4c\xc5\x6e\x95\x42\x82\x7a\x40\x76\xf4\xbb\x6c\xb3\x20\x34\xe9\xa2\xf0\x53\x61\x6b\x64\xc6\x42\xab\x08\x0d\x15\x3a\x27\x1a\x4f\xa6\xa8\x6c\x95\x81\x0b\xa6\x2b\x5b\xd7\xa8\x67\x4a\x78\x4e\x15\x67\x52\xe8\x0d\xad\x3a\x40\xb9\xa5\x12\xae\xc0\xad\xf4\x36\xa3\xd7\x87\xe3\x2a\x9f\xaf\x68\xa6\xb2\x99\xf7\xf1\xfe\x2a\x69\x3a\xba\xbf\x24\x11\x87\x82\x6d\x68\xa9\x81\x12\xf2\x0d\xc9\x68\xb8\x52\xd4\x2a\x70\xaa\xb2\x57\xe4\xec\x79\x25\xab\x56\x75\x0c\x6d\xd3\x4a\x09\xf3\x1d\xa4\xba\x64\xb9\x1b\xd5\x79\xbc\xb9\x8c\xd8\x6a\x2d\xea\xa1\x66\x97\xdb\x67\x68\x7b\x8c\x8b\x01\xf3\x21\x0c\xa2\xb5\xbd\xca\x90\xae\xb1\xa9\x82\xe7\x6f\x30\x08\xa8\xb6\x1e\xbe\x6a\x67\xb1\x87\x78\x85\xbc\x8e\x55\xc8\xfb\xe5\xb4\x5d\xd5\x71\xda\x3a\x2b\x00\x7b\xf1\x18\xae\x50\xee\x31\xc4\x59\x08\xb6\x2d\x0f\x71\x85\x11\x78\x4b\x23\x8e\xde\x5f\x33\x06\xef\x33\xec\xe2\x6c\x80\xbf\x19\x0e\x6f\x6e\x6e\x6c\x18\x47\x23\xf8\x6f\x2f\x82\xcd\x50\xc5\xe1\x10\xb5\x7a\xd4\xe1\x94\x0f\x3d\x47\x50\x5e\x35\xaa\x9c\x5f\xce\xc6\x67\xb3\xaa\xa1\xa4\x1b\xd8\x18\x5d\x1f\x05\x71\x34\xf1\x3e\x20\xa7\x1f\x33\x4a\x6a\x06\x86\x3e\x8e\x2f\x2e\x27\xe7\x67\x4f\x83\x43\x85\xe1\x3c\x73\x0b\x37\x80\x15\x7a\xc6\x60\x46\x24\x39\x17\xa8\x8e\xf6\x49\xe8\xb8\x2e\x84\x32\x38\x5f\xe0\x74\x0b\x7a\xdf\xf2\x75\xe5\x34\x21\x0a\x6e\x8a\x53\x03\xa4\xbd\xa1\x1b\x08\xd3\xd5\x3c\x54\x15\x9c\x7b\xc1\xe2\x1a\xe3\xfd\xc1\xc6\x1d\xbc\x32\x17\xc1\x72\x09\x73\xae\xc1\xcb\x5c\x08\x71\x77\x27\xe8\x26\x44\xfb\x12\x0b\x66\x31\x20\x16\x7f\xf3\x46\x5d\xfc\x01\x8e\x4f\x3d\xa0\x6e\x11\xbb\x38\x60\xa6\xdc\xd9\x72\x17\xf3\xbf\xb5\x63\xc6\x96\x3b\x79\x2d\xc2\x78\xa7\xa6\xed\x98\x01\xb5\x9d\xdc\xdc\x3e\x35\x73\xab\x35\xcb\xfb\x8d\xb9\x69\x32\x39\x6c\xe2\x19\x21\xdf\xa5\xc1\xeb\x82\x63\xb4\x34\x1f\x8c\x36\x4f\xaf\xd1\x76\xf5\x88\x1a\xc1\xa8\xd6\x46\xa3\x9d\x4b\x1c\xa6\xc2\xd6\x89\x08\xa2\x13\x39\x24\x1a\xa7\xee\xef\x7f\x29\xae\x35\xe8\x25\x06\x5c\x75\x90\x0b\x54\x77\x77\xc3\x1f\x5e\xfc\x30\xbc\xbf\xbf\xbb\x53\xf2\x65\x04\x76\x10\xbc\x71\x7d\xc6\x02\x49\x35\x8e\x02\xe5\x5f\xe1\x17\xd7\x81\xfc\x13\x8f\x2d\xae\x0f\xef\xc4\x9a\x71\x7b\x0d\x23\x97\x47\xe5\x93\xfb\x17\x0a\x29\x67\x20\xa7\x42\xc8\x23\xbd\x02\xb2\x8b\x99\xb6\xce\xc2\x83\x99\x03\xd4\x62\x7e\x18\x0b\xd4\x63\x32\x3a\x16\x22\x02\x7e\x70\x23\x1b\xe2\xfe\x3e\x9d\xb2\x0c\x16\x6b\xba\xb8\x9e\x07\x9f\xcd\x3a\x43\x7a\x2f\x87\xad\x35\x73\x5d\xea\x27\xe3\xa9\xbc\x43\x69\x3e\xf1\xcf\x27\x5e\x00\x53\x1e\x4b\xf2\x41\x86\x72\x84\x43\x86\xef\x82\x48\x73\xcc\x32\x44\xb1\xf0\xed\xe9\xbf\x2e\x71\x99\x4a\x95\x28\x28\x2a\x49\xb4\x52\x36\x8c\xc1\xf9\xb8\x85\x65\x6e\x98\x58\x13\xbc\x03\x6f\x42\xd7\x00\xba\xf8\x47\x2d\x29\xdd\xdd\x41\xa4\xb3\xa2\xe4\x5b\xf6\x23\xf9\x76\x11\x44\x94\xbc\x39\x24\x6a\x28\x3a\x99\x5e\xd9\x1f\x20\x86\x04\x01\x44\x04\x12\xca\xd7\xf6\x99\xfd\x1b\xbd\x45\x21\x89\x44\x32\xa0\x3b\xbf\x1d\x9c\x59\x4a\xe4\x03\xe1\x1a\x9f\x46\x5f\x52\x81\x2c\xf1\x83\x9b\xc8\xd1\x11\xe4\x51\x42\x07\xf5\x12\x6e\x6d\xad\x64\x0d\x0e\x57\x35\x52\x7b\x99\xea\x57\x9c\x46\x27\xea\x59\xba\xa2\x98\xbe\x42\xe2\xc9\x42\xc7\x51\x17\x46\x97\xb7\x5c\xf3\x21\x45\x46\xf0\xaa\x3f\x3e\x13\xe9\xe4\x95\x0a\xe1\xab\x1a\x46\x43\x11\x65\xdc\x22\xff\xd3\xc4\x49\x14\x0e\x61\x0b\xe3\x45\x22\x34\xde\xbc\x24\x10\xcb\xb0\x90\x6a\xac\x52\x7a\x65\xd6\x9a\x81\xb3\xc1\x13\xb1\xce\x22\x4d\x72\x87\x2f\x1e\x70\x07\x59\x0c\x1b\x2c\xb7\x7a\x15\xfb\x2c\x17\x27\x1d\x7d\x57\x58\xb6\xda\x87\x0b\xb4\xd6\xe3\x33\xc1\xa6\xea\xc2\x65\xa8\xad\x2a\x9f\x9a\xc5\x5b\x91\xae\xde\xee\x82\x7f\xd3\xe7\x15\xfc\x8b\x14\x8f\x65\x03\xb6\x41\x0f\x77\x39\xbf\x85\x58\xf5\x8f\x96\x10\xe2\x32\x7e\x9d\xc2\xc7\xe8\x9d\x24\x92\x87\x10\x2c\x62\x8f\x58\x74\xe6\x6c\x68\x0a\x24\x9a\x9f\x06\x13\x97\x45\x72\xcd\xaf\x04\x29\x05\x1c\xd9\x61\x09\x89\xa9\xff\xa7\xb9\xd1\xad\xe4\x06\x23\x48\x48\x5e\xbe\x42\x6e\x03\xc5\xce\xa5\x5b\xc9\xe8\xfb\x4a\x28\xda\x93\x9b\xd6\x4d\x72\xfb\x7b\x96\x99\xd6\xaa\x9a\x59\x09\x26\x8c\xad\x8e\xb7\x0e\xf3\xda\x55\x81\xee\x04\xcd\xfc\xbf\xfe\x9c\x87\xbf\x1c\xf0\x38\x4c\xe1\xa4\x5e\x87\x98\xd3\x90\x46\x0b\x88\xdb\x41\x93\xf4\x86\x24\x14\xa7\xea\x81\x94\xde\xd0\x6c\x84\x77\x46\xaa\x59\x20\x9c\xac\x22\x9d\x90\xcb\x38\x68\x2f\xf0\x55\x69\x17\xb1\x4e\x42\x14\x62\xae\xb4\x63\x4f\x9d\xc8\xd9\x70\x7b\x7c\x76\x75\x6a\xbb\x4b\x62\xbd\xbb\xb4\x88\x25\xbb\x49\x37\x3a\xa7\xd3\x7e\xe8\x1c\x7f\x3c\x9e\x7c\xe8\x81\xce\xd5\xe5\x78\xd4\x03\x99\xd9\xf9\xec\x18\xc5\xe9\x84\x6d\x39\x44\xea\x03\xe0\x98\x1f\xb8\xdd\x11\x4e\x51\x69\x06\x71\xaa\xec\xd3\x61\x9c\xe6\xf7\x44\x20\xd7\x88\x5b\x2d\x38\x4c\x96\x11\xa5\x2d\xab\xc4\xbd\xc3\x1c\x92\xec\x8c\x73\x13\x69\x88\xfe\x80\x4e\x3b\x6a\x5f\x81\x9a\xa9\x59\xdc\x77\x3d\x1a\xc9\x1d\xfc\x9a\x90\xa7\x54\xfa\x34\x88\x7d\x41\xdd\x9d\xc5\x49\xd1\x46\xb2\x98\x1c\xd0\xf6\xa8\x87\xa3\xda\x1e\xd5\xe4\xb0\xd3\x5b\x88\x95\xc7\x8d\xee\x38\xc4\xf6\x0b\xb4\xd8\x32\x05\xa1\x49\x55\x98\xc5\x96\x76\x1e\x7e\x58\x2e\xc2\xca\x43\x4f\xf3\xce\x6f\xc8\x26\x30\xc3\x4c\x74\xd3\xb2\xd3\x03\xa1\x11\xf5\x84\x33\xf1\x5b\x57\x39\x8f\x45\x9b\x3a\xed\x38\xe4\x89\x77\xea\xb9\xac\xcf\x10\x25\x37\xc3\x9a\x40\xcf\x8b\x96\x4e\x6d\x67\x2d\xcf\x4f\x88\xcc\xa8\x39\xb4\xde\x4e\x66\x97\x04\x30\x8f\x70\xba\x08\xb2\x9b\xd9\x40\x73\xf7\xac\xe5\xa0\xb0\x94\x3c\x3f\x18\x66\x9f\x1c\xe1\xde\xcc\x9e\x93\xa7\x87\x85\x83\x56\xf9\xe2\xd2\x09\xc4\x11\xf2\xf6\xf7\xd9\xf8\x92\x6c\x02\x37\xf6\x02\xf2\xd3\xfb\x0e\x06\x7c\x5b\x10\xf1\xbb\x9f\xde\x3f\xba\x8c\xad\xed\xd8\x56\xc8\x2e\xd0\xca\xfa\x8d\xf0\xd8\x92\x46\x51\x10\x75\x84\x56\x45\xe3\x41\x6c\x55\xc5\x1e\x01\x5c\x35\xe1\xaf\xe8\x5a\xdb\xbc\xcf\x09\x5e\x6b\x90\xd5\x84\xa8\xbb\x7a\x5e\x0f\x08\x55\x07\x9d\x4f\xc4\xbe\x1a\x14\x9b\x30\xef\x03\xfa\x6a\xe0\xae\x0f\xf6\xdd\x40\x2d\x8b\x42\x7d\xa0\x5a\xe8\x2c\xae\xa9\xe8\x08\x6b\x9a\xc8\x83\xb8\xa6\xcb\x3d\x02\xb0\x19\xca\x5f\x91\xad\xbe\x89\xbf\x42\xdb\x33\x81\x36\x15\x57\x7d\x59\x80\xab\x97\xe1\x59\xc0\x5c\x0e\x96\xba\xe3\xdc\x86\x6e\xf6\xd8\xbe\x84\x5a\x29\xca\x9d\x8e\x4f\xf3\xf8\x06\x6f\xed\xdf\x98\xef\xa6\x00\x87\x39\x27\x0a\xda\xae\xe1\x79\x19\xda\x92\x2a\x8d\xa1\x00\x2b\xbc\x6b\xb3\x94\x85\x15\x7a\x5d\xaf\xd7\x04\xbb\x2c\x63\x21\x89\x5e\x57\xeb\x81\xe0\x17\xd8\x67\xcc\x74\x11\x6c\x92\x36\xe5\x77\xac\x35\x3d\xc1\x22\x93\x71\xfe\xee\xdd\x28\xc9\x10\x02\x42\x99\xb4\x14\xf9\xf8\xa5\xb2\xb4\x4a\x4e\xc8\xbe\x90\xf9\x74\xcc\x5f\x91\xb9\xf0\x07\x32\x33\xc5\xec\x5c\x3b\x04\xbf\x54\x79\x3b\x95\xdb\xd4\xb2\x0b\xe5\x56\xfc\xdf\x9e\x9f\x7f\xb0\x01\xa4\x97\x6c\x05\x3c\x89\x85\xf5\xd5\xd2\x9c\x22\x63\x12\x1d\xcb\x6f\x2c\x99\x12\xb1\x83\x98\xad\xbe\xba\xc0\xfc\x90\x24\x3f\x42\xca\x74\x32\xbd\x32\x89\x72\x47\x26\x4d\x02\x2f\xf3\x29\x3b\x3a\xed\x4a\x91\xb3\xda\x69\x01\xe2\x26\x39\x21\x2a\xcd\xc3\x4a\xd9\x1f\x2c\x83\x68\x93\xcd\xe6\x58\x07\x11\xfb\x0b\x33\x83\xbc\x81\x7c\x35\x0f\x22\xa9\x65\x20\x44\xb0\x91\x8f\xac\xa2\xa6\xff\x8c\x69\x74\x8b\xb9\x21\x9b\xe3\x05\x26\x1b\xe6\x14\x94\x93\x72\x99\xb0\x62\xd6\x3a\xa5\x08\x03\x1e\xcf\x37\x2c\xf9\x9a\x49\xdf\x65\xea\x64\x5a\x1b\x99\x0e\x56\x51\x10\x87\x03\x4c\xd2\xa3\x6e\x7e\xca\x9f\x29\x89\xcd\x22\x0b\x92\xe4\x6a\xc0\x37\x26\xb1\x52\xde\x17\x93\x92\x9b\xb8\x04\x88\x4c\xa5\x29\x93\xf6\x57\x2e\x20\xb9\xe8\x8f\x8e\xea\x3c\x40\xd7\xad\x6b\xff\x44\x90\x5f\xa5\x59\x8a\x39\x93\x89\x7c\x45\xf1\x30\xb5\x65\x2c\x73\x62\xb1\x4b\xc1\x9d\x94\xc9\x65\x1c\x6f\xdd\xe6\xe2\xa9\xbc\xda\x26\x02\x9a\xda\x29\x67\x44\x12\xb8\x2b\x67\x7a\x96\xf2\xf7\x2b\xbf\xbb\x68\xd4\xba\xbb\x60\x06\x44\x8d\x28\x5f\x5b\xf9\x16\x9b\x8e\x2f\x26\xe7\x23\x5b\xbf\x04\xcd\x2a\x52\xc9\x90\xe7\x8b\x92\x68\xc9\x65\xb1\xf7\xb5\xf0\x90\xfa\x9e\xf6\x40\xe2\x83\xce\xa7\xcb\x25\xbe\x65\x04\x92\x17\x6d\x81\xd3\x5d\x3e\x39\x6e\xe2\x7e\x69\x5f\xb0\xe9\x2e\x6b\x51\xb3\x50\x49\x6f\xd5\x0a\x7b\x86\xb1\x66\xea\x90\x0f\x20\xaa\xbb\x6c\x0b\xa8\xa8\x5e\x27\x3c\xfd\xef\x04\x4f\x34\xdb\x9e\xd8\x59\xef\x04\x89\x18\x2d\xa1\x33\x85\xcd\xd1\xbb\x4e\xa8\xd9\x40\x34\x53\x39\x05\xcc\xd1\xbb\x67\x8d\x97\xee\xf2\x21\xb8\x2c\x7d\xfa\x83\x61\x2f\xcf\x7a\x9f\xc7\xa4\xe1\xc5\xd8\x8f\x37\x68\x16\x5e\x99\x57\x21\x88\x35\x39\x3b\x1f\x8d\x31\xf7\x44\xfb\x46\xce\x7e\xd5\xaa\x38\x0d\xb3\x36\x52\xea\x85\x8f\xe7\x5a\x88\x37\x7a\x27\x77\x22\x1e\x4b\x3e\x43\xbe\x24\x60\xfa\x91\x43\x7f\x83\x13\xf6\xc0\x1d\xa8\x95\x22\xa2\xda\x1e\x56\x88\x78\x46\x6b\xc8\x56\x34\x61\x2d\x71\x24\x2f\xe7\xf5\x59\xfa\xe9\x54\xa9\x91\xe7\x16\x92\x08\xd4\x28\x59\x5c\x0a\xc8\xe6\x87\xa7\xfa\xc8\x3d\x99\xc6\xea\xa4\x4d\xde\x54\x1f\xb5\x7b\xdc\x56\x9d\xec\xce\xea\xc3\xda\xf4\x16\x10\xb0\xa7\x0f\x08\x58\x8f\x01\x01\x6b\x17\x10\xb0\xd6\x01\x01\x6b\x1d\x10\xb0\xaf\x01\x41\xb6\x76\xd3\x80\x80\xed\x1f\x10\xd4\x3b\x41\x22\xc6\xde\x01\xc1\xa4\x5b\x40\xd0\x40\xb4\x72\x40\x30\x79\xde\x01\x01\x7b\xa2\x80\x80\x21\xfc\x4e\x8f\x4f\x7e\x1b\xcf\x1e\x63\xc4\xcd\x91\xdf\x2b\x24\x90\x14\xc6\x17\x17\xe7\x17\x8f\x26\x9f\xa6\xbe\xbf\x78\x93\x47\x8b\x58\x72\xe4\x9f\x24\x62\x61\xcd\x22\x96\x64\xe5\xbe\xc9\x18\x5f\x70\xb2\x66\x63\x7c\xba\x8b\xd8\x6e\x94\x2f\xee\x83\x35\x8f\x5a\xcc\xa6\x6b\x63\x95\x12\xb7\x6c\xaa\x91\x4e\xcb\x68\xab\x50\x2e\x65\xa1\x8d\x3e\x8d\xa3\xb0\x82\x1b\x37\xd5\x67\x9f\x28\x8c\x7d\xa9\x28\x0c\xbf\xe5\x7d\xea\x30\x0c\x77\x96\x7a\x8b\xc3\xd4\xfe\x4a\x75\x20\x76\x4a\x37\x41\x74\xdb\x30\xde\x02\x42\x6d\x03\x2e\xa9\xc8\xd7\x25\xed\x3e\x82\x30\x69\xca\x3d\xa3\xb0\x1d\x2e\x90\x08\xf2\x40\x18\xf6\xa0\x7c\xfc\xc6\x09\xf7\x16\x10\x2b\x97\x24\xdc\xa9\xce\x48\x47\x7d\xb5\xca\x50\x82\x44\x9f\x71\xac\x06\x5a\x3c\xd5\x62\xb7\xf4\x9d\xfd\x16\xbb\x93\xcd\xd4\x7e\x17\xbb\x43\xfe\xe4\xa0\x1a\xf2\xfe\x30\x35\xe4\xb5\x90\x3a\x8d\x82\x05\xe5\x9c\xf2\x86\xa8\x1a\xf2\xb6\xa0\x8a\x8a\xb4\xc3\x54\x75\x2a\x4f\x1d\x9e\x66\xbf\x64\x78\x5e\xd0\xda\xb5\x8b\x85\xbc\xfa\xa4\x8a\xe7\x84\xeb\xd8\x9a\x7b\xa2\x66\xbd\x17\x66\x81\xb0\xcd\xe4\x7a\x7a\x29\x3b\x3b\xfc\xfa\x81\x18\xd1\x45\x44\x1d\x09\xb3\xb9\x59\x76\x23\x21\x3f\x4c\x4e\x27\x33\x3b\xe4\xbe\xfd\x01\x7a\x43\xbd\x80\x83\xfd\x64\x4b\x57\x01\xba\x88\x76\x1a\x44\x0d\x66\xff\x29\xe3\xd0\x8b\x79\x7a\x18\x44\x5e\xea\x87\xc6\x95\xc7\x41\x76\xf4\x9e\xfd\x80\x3d\xe4\x8f\x81\xeb\xdb\xd5\x93\xe3\xfa\x76\xd5\x1f\xae\x6f\x57\xb5\xb8\xfe\x51\x1d\xd2\x45\x56\x5e\x30\xc7\xb3\x66\x85\x23\xe2\xa6\x18\xbf\x5d\xb5\xc5\x78\x54\xea\x2b\xc6\x37\xc1\xf8\xed\xea\xf9\x63\x3c\xb6\xe6\x9e\x18\x5f\xef\x91\x89\x18\x75\x18\xff\x65\x10\x09\x75\xdd\x0f\x91\xb6\xab\xbe\x11\x89\xb7\xcc\xea\x0c\x21\x76\x4b\x53\x3a\x0d\xee\xe7\xd2\x3a\xb1\x88\x3d\x9d\x8c\x30\x89\xd0\x5f\xa5\xc9\x9d\xa1\x49\x5b\x0f\x99\xbb\xeb\x74\x1a\x8d\x6f\x59\x52\xcd\xb2\x37\x93\x1a\x57\x85\x1a\xfa\x75\xe6\x5f\x93\x2c\x79\x45\x8a\xd3\x28\xcd\x93\x0f\x79\x0c\xf7\x52\x01\x52\xd0\xb3\x61\xca\x7c\xaa\x55\xc4\x60\x1a\x2f\x6e\x5b\x56\x3b\x63\x8b\x86\xb9\xac\x49\x95\x4b\xf6\x57\xdb\x2a\x17\x94\x83\x9f\xfa\x3b\xf2\xf3\x31\x97\xd5\x7c\x7f\x7c\x64\xaa\xcd\xf4\x79\x9d\xbb\x3f\x6a\x6f\xd7\x00\xe9\x87\x0a\x3f\xc9\x06\xc0\xef\x13\x1e\x6c\x80\x4e\xc9\xb1\x66\xd8\xaf\xcc\x8d\x7d\xf5\x24\x87\x58\x60\xcc\x02\x8a\x75\x3c\xeb\x01\xa9\x5c\xf5\x43\xe5\x72\x7c\xd1\xfd\x28\x0c\xa9\xd5\xc5\xa4\x07\x2a\x67\x93\x93\x71\x0f\x64\x3e\x4e\x2e\x66\x3d\x90\xb9\x90\x5b\x08\x5d\xa9\xcc\x26\xa7\x63\x8c\x67\x54\xc7\xea\xc1\x46\xc7\x92\x5e\xd7\x73\x3e\xf4\x08\xd1\x3d\xf5\xd9\x44\x2a\x3a\xf8\x85\xe1\xe5\x42\x3d\x49\x87\x4b\x75\x42\x9b\x0e\x31\x32\xd7\x10\x64\x10\x5d\x5d\x3d\x30\xc3\x47\xee\x80\xf5\x4c\x79\x08\x63\xcc\x19\xa1\x47\x9a\x4b\xb2\x16\x7e\x94\x9c\x37\x97\x04\x86\x32\x02\xc2\xe3\x03\x21\x90\x49\x18\xa9\xd3\xe2\x32\xe7\xf0\x59\x04\x4c\xb4\xa0\xeb\xc0\x83\xc8\x11\x0f\xc7\x9b\xa6\xb7\x2a\x3c\x99\x52\x00\x75\x17\x11\x2b\x5d\x9e\x53\xcf\x3e\x3a\x5e\x9c\x3b\x48\xae\xe2\x54\xba\xb6\x63\x77\xe6\x8b\x03\xa8\xad\x0f\x31\xb3\x13\x6b\x26\x47\xd6\x49\xde\xf7\xf7\xe6\x98\xab\x16\x1c\xb6\x2b\xb9\x41\x62\xa9\xa1\xfd\x9a\xde\x62\x9c\xae\x1e\x19\x80\x07\x2b\x06\x1e\xd2\x45\x3b\xfe\x9c\x8c\x07\xfa\xe8\x54\x35\x21\x18\x63\x8d\x5a\x74\x6e\x20\x45\x12\xa3\xe8\x20\x64\xe3\x2c\xd6\x69\x10\xa2\xb9\x9c\xc2\x43\xac\x57\xf8\xc6\x04\x9e\xda\x57\x80\x82\x69\x1c\xa2\xcf\x12\xd6\xc1\x48\x1c\xb3\xd2\x87\x26\x2d\x82\x84\x94\xbe\x1c\xa3\xfe\x91\x92\x97\x84\xbf\xaf\x8f\x43\x8c\x70\x67\x4e\x61\xd0\xac\x2c\x35\x8d\x82\x2d\x73\x69\xb4\xab\x64\x43\x69\x21\x66\x13\x7a\x48\x7d\x9d\x8a\x8b\xb3\x35\x08\x2c\x53\x85\x76\x8a\xde\x90\x95\x6e\x9a\x25\xf3\x70\xf2\x2b\xd6\x8a\xeb\xcf\xff\x9f\xb2\xc5\x57\xf8\xa6\x8e\x73\xe5\x48\xde\xc0\x65\x38\x84\xb3\x8b\x75\x93\xc0\x96\x2d\x09\xfd\x93\x94\x1d\xd6\x25\x78\x92\x64\x0d\x0e\x17\x3a\x08\xc9\x51\xdc\x55\x3e\x01\xd3\x7d\xa3\x13\x33\x05\x48\xa2\x13\x35\x7b\xce\x1f\x5f\xda\xe5\x33\x1e\x56\xfc\xd0\x26\x7d\x85\xb1\x57\xed\xcb\x50\x7b\x68\x6d\x01\xe9\x61\xb5\x6f\x5d\x16\xd1\x85\x90\x5b\x6d\x3d\x7d\xb5\x93\x38\x41\x87\xb1\x2b\x33\xde\xa2\xc1\xd7\xb9\x6d\x38\x75\xc8\x0d\xb8\xd3\xb1\xc7\x56\xfe\x89\x7a\xae\xec\x5c\x3a\x41\x35\x7b\xbc\xa4\xad\x8b\x26\x60\xa9\x17\xcc\x4a\xe7\x50\xda\x27\x4e\x44\x45\xb6\xb4\x14\x3f\x7b\xea\xa4\xa3\x35\x5a\x27\xea\xfc\x27\x00\x00\xff\xff\xff\x18\xe4\xf3\x97\x68\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26775, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

