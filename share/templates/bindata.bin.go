// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1d\x69\x6f\xdb\x46\xf6\x7b\x7e\x05\x57\x4d\x17\x4d\x51\x49\x9b\x6c\xbb\x2d\x52\xdb\x80\x63\xc9\x89\x50\x1f\x82\x25\xbb\xdb\x4f\x05\x25\x8e\xa4\x89\x29\x92\x25\x47\x72\x5c\xc1\xff\x7d\xdf\x9b\x83\xe7\x8c\x4c\x52\x87\x9d\x6c\x0a\x14\xa1\x38\xf3\xe6\xcd\xbb\x0f\x72\xe8\x83\x7f\x74\x2e\x4f\x86\x7f\xf4\xbb\xd6\x8c\xcd\xdd\x17\x47\x07\xfc\x1f\xcb\x82\x0b\x62\x3b\x70\x81\x97\x73\xc2\x6c\x6b\x3c\xb3\xc3\x88\xb0\xc3\xc6\x82\x4d\x9a\xbf\x34\xd2\x43\x33\xc6\x82\x26\xf9\x6b\x41\x97\x87\x8d\xff\x36\xaf\x8f\x9b\x27\xfe\x3c\xb0\x19\x1d\xb9\xa4\x61\x8d\x7d\x8f\x11\x0f\xe0\x7a\xdd\x43\xe2\x4c\x49\x06\xd2\xb3\xe7\xe4\xb0\xb1\xa4\xe4\x2e\xf0\x43\x96\x9a\x7c\x47\x1d\x36\x3b\x74\xc8\x92\x8e\x49\x93\xff\xf8\xc1\xa2\x1e\x65\xd4\x76\x9b\xd1\xd8\x76\xc9\xe1\x6b\xb5\x10\xa3\xcc\x25\xfc\x1a\x7e\xad\x56\xad\x8e\xcd\xec\xd6\x07\x3f\x62\xb8\xf8\xc3\x83\x05\x57\xb0\xe4\x41\x3b\x99\x77\x74\xe0\x52\xef\xd6\x0a\x89\x7b\xd8\xa0\x80\xb2\x61\xb1\xfb\x00\xf6\x41\xe7\xf6\x94\xb4\x03\x6f\xda\xb0\x66\x21\x99\x1c\x36\xda\x13\x7b\x89\x13\x5a\x78\xaf\x00\x1a\xb1\x7b\x97\x44\x33\x42\x98\x5a\x80\x91\x4f\xac\x3d\x8e\xa2\x18\x1e\xae\xdb\xd4\x73\xc8\xa7\x16\xde\x95\x2b\x44\xe3\x90\x06\x2c\x0d\xf2\xd1\x5e\xda\xe2\x6e\x23\xcf\x67\x2b\x0a\xc7\xb0\xd0\xc7\xa8\x1d\x22\x87\x43\x02\x57\x6f\x5a\xaf\x5b\xaf\x7f\x56\x37\x5a\x73\xea\xb5\x3e\x02\x4e\x07\x08\x6f\xce\x6d\xea\x89\xf9\xab\x15\x9d\x58\xad\xe1\xf1\xfb\xf7\xdd\xce\x88\x7a\x0f\x0f\x30\x4f\x6e\x46\x40\xac\x56\xc4\x8d\x80\x43\x80\xa1\x3d\xa7\xee\xad\x1c\xe4\x03\x9e\xf3\xf0\xd0\x50\x4c\x3d\x68\x8b\xcd\xc9\xfd\xb7\xa5\x6a\x1c\x1d\x8c\x7c\xe7\x5e\xde\xf4\xec\xa5\x35\x76\xed\x28\x3a\x6c\xc0\xe5\xc8\x0e\x2d\xf1\x4f\xd3\x21\x13\x7b\xe1\x32\xf5\x73\x42\x3f\x11\xa7\xc9\xfc\xa0\x61\x85\x3e\x88\x11\x67\xd3\x29\x28\x0b\x88\x21\xc6\xe7\xd0\x78\x31\xd4\x08\x20\x89\x00\xa4\xbb\xa0\x8e\x9a\x93\x9b\xe5\x84\x7e\xe0\xf8\x77\x9e\xc2\x82\x3b\x24\x61\x32\x99\x6f\x76\xc1\x98\xef\x65\x37\x09\x1b\x99\x4e\x5d\x02\x7a\xe7\xba\x76\x10\x11\x47\x49\x52\x4c\x96\x3c\x15\x93\x70\x2f\x62\x96\xba\x6d\x87\x53\x14\xd4\x37\x72\xad\x78\x38\x85\x96\xcb\x3b\xb0\x63\xb4\x51\xd8\xf4\x3d\xf7\x3e\x3b\x05\x26\x0d\xc5\x3e\x12\x66\x00\xcf\x01\x6c\xcd\x4a\xa8\x97\x4d\x40\x5b\x58\xea\xd9\x40\xb6\x05\x13\x33\x42\xb0\x2d\xea\x24\xe2\x1a\x85\xb6\x07\x2c\xcf\x09\x51\x09\x45\xb2\x55\x4e\xca\x48\x42\x4d\x6d\x58\x76\x48\xed\x26\xf9\x04\xd8\x1d\x02\x2b\xb3\x70\x41\x62\xeb\xcb\x0b\x02\x15\x06\xd1\xcf\xa4\x73\x28\x90\x51\xf4\x1e\x07\x6d\x00\xca\xd3\x65\x67\x48\x5a\xb8\x05\x02\xe6\xc4\x5b\x28\xfd\x16\xd7\x7c\x9b\xae\x3d\x22\xae\x4b\x9c\xd1\x7d\x9e\x05\x39\x0c\x2e\x2d\x2c\x29\x35\x5a\x2e\x1a\x84\x24\x02\xa7\x96\x31\x9b\x18\x3c\x5c\x78\x1e\xf5\xa6\x07\x6d\x97\x16\xd7\x2d\x01\x0f\x42\x2a\x48\x04\xbc\x54\x7e\x5e\x8a\x5f\x9d\xde\x60\x78\xd5\x7b\x87\xec\xb2\x8b\xaa\x51\xd8\x46\x7b\xe1\x66\x38\x98\xe1\x71\x22\xa6\xbc\x59\x25\x2e\x41\xdc\xb0\xd6\xd8\x5d\x5a\x2c\xe8\x9a\xe4\x54\xf8\x47\xc3\x6b\x44\x46\x83\x46\xde\x35\x68\x68\x8e\x29\xee\xf5\x91\x58\x1d\x83\x73\xac\x2b\x72\x57\x91\xa7\x66\xb8\xb6\x0e\xb3\x95\xb3\x86\x4a\x06\x50\x94\x54\x8c\x15\xb0\x15\x46\x53\x74\x9d\x1d\xeb\x74\x5e\x23\xa6\x22\x9b\xeb\x68\xbf\x6e\x37\x1b\xaa\x3f\x5f\x62\x11\x30\x3a\x27\x05\x01\xc5\xcb\x97\x5c\x46\xba\x2b\xb1\x9a\xc6\x4f\x69\xad\x22\xc3\xcf\x6b\x0e\xaa\x33\x0c\xc9\x53\xed\x0e\xb3\x06\xa2\x9f\x59\x34\x23\x93\xc6\xab\xcb\x90\x4e\x67\xcc\xec\x6a\xd6\xa9\x7d\x6a\x6d\x97\x46\xac\x49\x3d\x48\x83\x88\xd1\xaa\xd4\xd2\x06\x9e\x0a\xf7\xfc\x0d\x26\x01\x7a\xee\xe1\x50\x35\x8e\x3d\x86\x2b\x88\x4c\xa8\x82\x68\xbb\x98\x96\x53\x13\xa6\xa5\x3d\x05\x67\xcf\x76\xa1\x0a\x89\x14\xed\x31\xa3\xcb\x62\x64\x8b\xf7\x87\xb9\x7a\xf4\xb6\xdd\xbe\xbb\xbb\x6b\x41\x94\x0b\xe1\xff\xd6\xd8\x9f\xb7\x45\x96\x0c\x39\xa5\x4b\xec\x88\x44\x6d\xd7\x66\x24\xc2\xc4\x16\xb3\x66\x48\xd1\x49\x18\x81\x95\x58\x4a\xaf\x6f\xba\x57\x83\xde\xe5\x45\x92\x24\xa6\x70\x5d\x0e\x86\xdd\x8b\xe1\x56\x42\x41\xea\x27\xfc\x00\x3d\x93\xd9\xa6\xf2\x66\x3c\x8f\xd4\x67\x8a\x56\x60\x3b\x0e\x84\x41\xcc\x35\x23\xb2\x04\xe2\xee\xa3\x99\x36\xc5\x0c\xfd\x3b\x43\x5a\x39\x72\xfd\xf1\x2d\x26\x87\xcd\xb9\xd3\x7c\xa3\x2e\xfc\xc9\x04\x12\xf4\xe6\xeb\x6c\xbc\x49\x81\x81\x2f\x26\xee\xeb\x82\xa5\xa1\xff\xcb\xc7\x30\xe1\x15\x2d\x0e\xc1\x9d\x1c\xec\xd8\x1a\x31\xc8\xb2\x10\x75\xc3\x9a\xf8\x21\x38\x9c\xc5\x7c\x7e\x3f\x27\x73\xa0\x70\x42\xa7\xe3\x19\x19\xdf\x8e\xfc\x4f\x7c\xb0\x19\x61\x25\xf2\x4d\x3c\xb8\x26\x98\xe3\xaa\xc2\x8d\x8a\xc5\x79\x7d\x40\xfe\xb2\x1a\x13\xdb\xc5\xe8\xfa\xdd\xc7\x08\x04\x2c\xc4\x7b\xe2\x52\x60\x58\xeb\x03\x75\x88\x58\xf7\xbc\x7b\xfe\x0a\x6a\x29\xa1\x5d\xaa\x3e\x50\x2a\x0f\xd8\x35\x6a\x70\x4e\xe6\x7e\x78\xaf\x53\x03\xea\x05\x0b\x26\x62\xa0\x81\xb2\x3c\x97\x92\x11\x91\x9e\x27\xbf\x79\x68\x99\x51\xc7\x21\x5e\x9c\xfd\xf1\x5f\x1a\xe5\x43\x56\xbf\xd0\x6d\x65\xdb\xe8\xb8\x36\x18\x03\x7f\x22\x2c\x85\x38\x16\x85\x58\xb1\x84\x24\xe2\xad\x0a\xec\xb9\x8a\x2d\x8d\x15\x94\x64\xae\xf0\xcc\xfc\x90\xfe\x8d\x66\xe2\x36\xf9\xed\x91\x1f\x72\x75\xf0\x21\x4f\x9f\xf3\x5b\xfa\x30\x98\xd2\x6d\x9c\xd4\x9c\x86\xfe\x22\x68\xa2\x81\x11\xc7\xe0\xed\x32\x66\x04\x9a\xc7\x41\xac\xf8\xaa\x19\xcd\x73\x19\x8d\x28\x16\x0c\x6e\xba\x60\x3f\xb0\x10\x5f\x4c\x55\x97\x59\x7b\xca\x99\x86\x69\xcd\x44\x01\x72\x62\x36\xcf\xff\xc0\xd9\xad\xd3\xa5\xb2\x5b\xe5\xb2\x86\xd8\xf9\x88\xd9\x0d\x7e\x3f\xee\x9b\x2d\x0e\xa4\x4e\xa2\x3b\xdb\x10\x3f\xeb\x52\x46\x2c\x5c\xf3\x31\xe2\xb4\xd9\xe1\xda\xa1\x5a\x0a\xb4\x5a\xdd\x51\x36\xcb\x32\xe6\x8a\x4c\x20\x65\x9b\x81\x09\x3c\x3c\xac\x56\x8c\xcc\x03\x0c\x53\x56\x03\x58\x0b\x8e\x3f\x7a\xfb\x36\x14\x13\x1a\x56\x0b\x27\x70\x9e\x99\x37\xd5\xc6\xad\x94\xcd\x73\x35\x75\xe0\x23\x36\x5e\xd1\xba\xab\xda\x35\xaf\xcb\x25\xaa\x26\xb3\xb1\xd7\xa6\x4f\xec\x35\x6c\x12\x17\x7f\x02\xa4\x00\x44\x76\x69\x4a\xf8\x6a\xec\xc8\xdd\xd2\x96\x75\xba\xb8\xfa\xef\xfd\xc6\x51\x3a\x31\x87\x51\x35\xb6\xab\x28\xda\x3b\x35\x9b\x34\x9d\xac\x29\xb0\xe5\x4a\x43\x7b\xd4\x3b\x6d\x0d\x31\x25\xd3\xd7\xda\xb9\xc8\x5a\xa4\xf5\x8b\x0e\xac\xb1\xf8\xea\xc4\x55\x2e\x9b\xad\x84\xd5\xcf\x35\x86\x02\xcd\xd4\x33\x54\x2f\x69\xa1\xee\x3b\x58\xae\xb7\xae\x2e\x6f\x7d\xa0\x1b\x13\xd6\xe5\xd0\x08\x7f\x38\x65\xec\xab\x36\x65\x39\xbb\x14\x7b\xc0\xca\xb9\x77\xca\xfb\x42\xcf\x3c\x80\xe2\x2e\x77\x17\x3f\x0b\x7d\x08\x0c\x4f\x5a\xa5\x4c\x17\xae\x74\xd2\x8c\x60\xc3\xe3\x59\xdc\x5d\x1f\xa1\x4d\xc7\x0d\xb7\xd3\xe1\xf1\xbb\x41\x8b\x9e\xf6\x8f\x4f\x7e\xeb\x0e\x07\xad\x6b\xea\x31\x9d\x69\x8a\x75\xed\x44\xec\x81\x3d\xbe\x25\xcc\x6c\x14\x7d\x31\xae\x2f\xcb\x4d\x85\x79\xbd\xbd\x77\xaf\xae\x2e\xaf\x2a\x6c\x9d\x84\xa1\x1f\x9a\x77\xde\xe5\xc3\x5b\xd9\xb8\x0c\x4a\x8f\xec\xff\xdd\x1f\xc3\x6e\x85\xed\x8f\xee\x19\x31\xef\xfe\x1d\x8e\x56\xdf\x7c\xb1\x21\xb2\xad\x9c\x2d\x51\x95\x14\x7b\x80\x15\x2a\x63\x4f\x3b\x1f\xad\x3a\xbe\xd2\xf9\x27\x11\xb3\xf9\x30\x78\x27\x43\x80\x91\x6c\x17\xbd\x16\xa3\xca\xcb\xc0\xbf\xa1\x81\xa4\x52\xc7\x98\xe2\x9a\x09\x64\x0c\xff\x67\xdd\x3c\x32\xe1\xbd\xd4\xf5\x0a\xac\x4f\x59\xd3\xae\x38\x2f\x51\x94\x63\xfc\x23\xd6\x9d\xe1\xbb\xa0\xb6\x36\xdb\x05\xf8\x16\xb8\x2e\x4c\xb4\x02\xd3\x13\x17\xb0\x2b\x9e\x0b\x0c\xe5\x58\xbe\xde\x21\x65\x38\xce\x29\xad\xcd\x70\x0e\x5d\x9b\xdf\x5b\xac\x96\xde\xec\xb7\x5a\x1a\x07\x0b\x73\xb9\x14\x0f\xee\xaa\x5e\x3a\xe9\x5f\x9b\x0b\x26\xc0\xae\x11\x39\x80\x94\x28\x8c\x34\x64\x7d\xd1\x95\x51\x22\xa9\x3a\xa5\x91\x10\xc3\xd7\x96\x63\xd9\x96\xa3\x56\x33\xf3\x0a\xf0\x5c\xab\x28\x69\x73\xa6\x32\x6a\xbb\xb4\x19\xeb\x28\xd8\xc5\xe7\x50\x48\xf1\x6d\x3e\xef\x4e\x24\x0a\xac\x9a\xd1\x57\x35\xf7\x38\xc8\x02\xaa\x9a\x01\x16\x20\x9f\x41\x6c\xdd\x73\x27\xd2\x59\xd3\x89\x74\x76\xdc\x89\xec\xac\xe9\x44\x3a\xe5\x3a\x91\x9d\x2a\x9d\xc8\x22\xad\x5f\x74\xbc\x75\x36\xe9\x44\x76\xbe\x76\x22\x3f\xf3\x4e\x64\x67\x6d\x27\x52\x67\x5f\xb5\x29\x33\x46\xd0\xce\x67\xd1\x89\xec\x3c\xc3\x4e\xa4\xb3\xbe\x9b\xd7\x11\xc5\xa7\x73\xda\xbb\xb8\xec\x94\x6f\x87\x39\x40\x98\xef\xac\xe9\x87\xf5\xf8\xf0\x26\xdd\x3c\xa7\x54\x37\x2f\xde\x7f\xa5\x6e\x9e\xf3\xb9\x75\xf3\x62\x7e\xa7\xb8\x63\x68\x6e\xe8\x24\x6a\xea\x6e\x74\xea\x75\x37\xf2\x28\xd6\xb6\x37\xca\x6a\x58\x2a\xf5\x52\xd4\xd6\xcc\xbf\x14\xf8\xc6\x1d\x25\x27\xd7\x51\x2a\xc1\xf4\xc7\x3b\x4a\x9b\xf2\xbc\x44\x47\xa9\xa4\x51\x64\x38\xbe\x49\x47\xc9\xd9\x7f\x47\x29\xfb\x2e\x9d\xfa\x51\xe6\xb0\x45\x9d\xb7\xe5\x7e\xc9\xbd\x2d\xb7\xe7\xbe\x55\x10\x99\x73\x6b\x35\xb6\xab\xdc\xba\x3f\x30\xe7\xd6\xba\xf7\x50\x8f\xfa\xa1\x3f\x26\x51\xa4\xf3\x9f\x85\x44\xba\x48\xd8\x17\x9d\x48\xc7\xb2\xaa\x93\x48\x73\x41\xd4\x4b\xa4\xc5\x0b\xce\xa6\x96\x95\x85\x09\x96\xee\x7d\x6a\x8d\x7a\x6f\x21\x49\xea\x0f\xb6\x91\x24\x3d\xff\xb4\xdf\xdc\x51\x33\xbd\xbe\x2d\x16\xdd\x7d\x31\xe0\x82\x79\x5a\xa6\x8a\xc0\xa8\x89\xfd\x81\xe7\xb3\x0e\x19\x87\xc4\xe6\x95\xc0\xba\xa2\x20\x88\x10\xc7\x16\xa9\x6c\x56\x22\x70\xee\x87\xa4\x26\x81\x49\xd9\xb3\x9e\x3e\x44\xb1\xbb\xc2\xa7\x3f\x08\xdc\x45\x34\x04\xbb\xdc\x4d\xd9\xb3\xcb\x16\x5d\x10\x55\x74\x6f\x15\x1d\x5b\x9c\xb3\x04\x75\xd3\x95\x20\xfa\x9a\xa8\xec\x26\x51\x59\x4e\xcd\x89\x8a\x1a\xdb\x55\xa2\x72\xf3\xde\x9c\xa8\xe8\x8e\xb1\x1c\xdd\x88\x13\x2c\xd6\xd4\xf5\x47\x78\x10\x9b\xd9\x6c\x51\x26\x69\x29\x12\xf9\x45\x27\x2d\xb1\xdc\xea\x24\x2d\x5c\x28\x5f\x40\xd2\x72\xf3\xfe\xff\x3d\x69\x31\x9d\x04\x13\x8b\xee\x24\x69\x79\x6e\x91\x6d\x59\xd5\x06\x2a\x6a\x7f\x1c\xd9\x96\xd3\x9a\x91\x6d\x39\x7d\x06\x91\x6d\xed\x17\x21\x14\xc0\xd2\x0e\x2d\x64\x97\x75\xa8\x4e\xe1\x3d\x3c\xfc\x9a\xff\x34\x83\xfc\x22\x03\x7e\xa4\x81\x7f\xcf\x63\xb5\x6a\x7f\xff\xe2\xfb\x36\x5a\x9a\x20\x58\xf3\xec\xcd\xa5\x41\x03\x27\xbc\x3c\xb1\xde\x1e\x5a\x7e\x68\xb5\x4e\xce\x8e\x07\x83\x8b\xe3\xf3\xae\xd5\xe0\xd2\x83\x61\xa9\xaf\x80\xb9\xd7\x39\x66\x2c\x84\xc0\x61\x21\xc8\xc3\xc3\x86\x6e\xf5\x48\x29\x06\xa0\x17\xd8\x2e\xf0\x68\x3e\x4a\x83\xa3\xc4\x09\xc2\x49\x08\x33\x84\x1d\x9c\xfa\xa1\xdc\x42\xbc\x03\xa4\x01\x87\xce\x7f\x1f\xe0\x57\x39\xc4\xf0\x0b\x91\x26\x66\x93\x42\xb5\x5c\x19\xce\x04\x0b\x48\x22\x22\xce\x1c\xe1\xe7\x2e\x6f\xba\x57\x57\xbd\x4e\x17\xef\x08\xf7\xc5\xbf\xa0\xf1\x08\xef\x56\x2b\x88\x9a\x53\x62\xbd\xa4\x3f\x58\x2f\xc7\x98\x69\xc3\x5c\xa9\xfa\xfd\xeb\xd6\x19\x8d\x70\x7f\x2c\x5c\xad\x6e\xc9\xbd\xe0\x43\xb0\x68\x02\xea\xd1\x7d\xf3\xa2\x21\x40\x5a\x17\x82\x9e\x03\xe6\x28\x8b\x4a\xfc\xb9\xe5\xf9\x77\xa1\x3a\x0d\x04\x04\xc6\x10\x07\x6d\xe6\x18\xa1\x1a\x2f\x52\x46\x24\x39\xa9\x60\xaf\x23\x12\x9e\x20\x00\xc7\x9a\x59\x16\x87\x32\xb6\x72\x54\x1b\xcb\xe0\x3e\x92\x48\xac\x3c\x16\x18\xda\x12\x92\x9e\xe3\x12\x03\x29\x38\x64\xc0\xd2\x66\x61\x4a\x55\xb2\xff\x94\x51\x1c\xe1\x55\x50\xac\x78\x11\xef\x18\x7f\xbc\xb6\x22\x06\x36\x4b\x12\x8f\x05\x44\xa5\x3e\xb7\x03\x98\x95\x8f\x60\xb3\xb4\xf7\x88\x7f\xe1\xc0\x23\x5a\xc0\xa7\xa1\xa8\x32\x1f\xf0\x58\x78\x34\x13\xfc\x8f\xbe\xcd\xf9\xbc\x3a\x58\x40\x54\xbb\x47\x82\xa2\xda\x04\x4b\x5b\x72\x95\xdf\x55\xdf\xaf\x61\xc9\x07\x6c\x1e\x79\x3b\x81\xfb\x01\x11\x23\x58\xe2\x63\xb9\x00\xab\x78\x14\xd5\xf6\x2d\xed\x56\x4e\x95\x5b\xf9\x30\x3c\x3f\x3b\xbd\xbc\xb2\x30\x0d\x7a\xdc\x5b\xc7\x1e\x07\xca\xf1\xdb\xc4\xdb\x74\x4e\x39\x7a\x9d\xc7\x51\xed\x6c\xe1\x75\x1c\x1a\xf2\x0f\xa4\x88\x05\x5a\x1d\x1a\x5e\xf0\xcf\xa1\xe4\x0c\x30\xe7\x76\xd6\x70\x90\xfb\xe7\xef\xf0\x1f\x0b\x68\x02\x84\xaf\xdf\x20\xce\xa6\x40\xea\x90\x65\x06\x1d\x59\x22\xba\x57\x5a\xff\xb5\x01\xce\xff\xa4\x51\x6a\x29\xd4\xa3\x2c\xf8\x19\xe0\x3e\x87\x3a\x5e\xda\xd4\xad\x06\x02\x26\x09\xaa\xf2\x4f\x6f\x14\x05\xbf\x1e\x44\x8b\x20\x71\x49\x66\x4a\x16\x11\x09\x48\x38\x86\x1c\x09\xe8\x49\x7e\x20\x49\xf1\xa2\x7d\x71\x8f\x13\xa0\x96\x2d\xe5\x33\xd5\xc6\x86\x3e\xb3\xd3\xb4\x6c\xe4\x00\xb3\x8f\x37\x1e\x4f\x2e\x36\x71\x92\xd2\x88\x5e\x9e\x25\x7a\x7e\x46\xbd\x5b\x0c\x1f\x89\x6b\xc9\x7f\x10\xea\x28\x71\x1c\x96\x7a\xc8\x09\x9b\x3c\x03\x13\x39\x1d\xb4\x3e\xc0\x4f\x4c\x70\xac\x54\x2c\x91\x43\x2a\x5e\x59\x56\xda\xf7\x74\xf8\x87\xca\x84\x7f\xd2\xc0\xd8\x21\x61\x5a\x40\xce\xe8\x5c\xd2\x99\xf9\xc0\x90\xc9\x55\x56\xa0\xe7\xbc\x6f\xa4\x07\x86\xf4\xf4\x9c\xfb\x0b\x8f\x11\x27\x1f\x4f\x15\xcc\xae\xe8\xd1\x96\xa8\x47\x39\x7a\x8e\x6f\x8e\x7b\x67\x8a\xa4\xec\xde\xc4\x50\x36\xd8\xf3\x25\xb8\xa1\x4a\xf1\xe8\x61\x52\x24\xed\x99\x9e\xeb\x41\xb7\x13\x4b\x28\xbb\x37\x3e\x94\xcb\x90\xf8\x12\xe8\x45\x14\x39\x5a\x98\xb4\x84\xf6\x4c\xcf\xf0\x72\x78\x6c\x90\x8f\x18\xd2\xc8\x87\x3b\x1f\xbd\x7c\x24\xcc\x36\xe4\x13\x77\x1b\x36\xc8\x05\x32\x11\x7c\x1b\x09\x81\x7c\xf0\xfe\x64\x19\x81\xc0\xaf\x4f\x09\xe4\x3b\x05\x7b\xce\x09\x24\xd6\xbd\x26\x05\x06\x9c\xb5\xb2\x82\xde\x24\x24\xa4\x22\xc8\x62\x17\x69\x01\xae\xba\x71\x5e\x20\x5e\x4b\xda\x5e\x62\x90\x79\xd1\x64\xf3\xfa\xc8\x18\x10\x65\x48\x2e\x19\x3e\x55\xc0\xab\xee\xfd\x44\x68\xa9\x0e\xc7\x5d\x78\x75\x30\xe1\x29\xb7\x55\xd9\x64\xdd\xcf\xe6\xee\x8c\xee\xbb\xbe\xa1\x93\xc4\x97\xf5\xcc\xd5\x0d\xcd\x54\x37\xd2\xc4\xe9\xa4\x95\xf1\x60\x75\x5d\x16\x55\x35\x45\x76\xdd\xf2\x5e\x03\x00\x3a\xc4\x65\x76\xcf\xab\x0c\x72\xb9\x60\x55\x60\xaa\x61\xc8\x2e\xbe\x91\xdd\xd3\x5c\x41\xb0\xbd\xb6\x48\x0f\xec\x36\x9c\xd8\x46\x53\x2f\x36\x15\xd4\x37\xcd\xde\xf5\x86\x03\x0b\x9c\xa6\x15\xe1\xa3\x97\xf4\xa7\x65\x7b\xde\xfa\x56\xc3\x41\xee\x33\x66\xa3\x83\x76\xfa\xce\x11\x7e\x53\xae\x66\xc7\xe3\xf1\xcd\x81\x54\x9e\x7c\x77\x0c\xbd\x90\xc5\xdf\x95\xb3\xe6\xbe\xb3\x70\x7d\xeb\xc7\xf7\x1b\x30\xf0\x5d\x6e\x8b\xdf\xfe\xf8\x7e\xe7\x7b\xac\xcc\xc7\xaa\x9b\xdc\xc4\x31\xd3\xed\xa6\x99\xf1\x89\xe1\x27\x72\xcc\x02\xbb\xde\x33\xcb\xa3\xd0\xbb\x72\xcd\x72\xf9\xaf\xbe\xf9\x71\xe5\x78\x4e\xce\xd9\xe0\x97\x55\x86\xbc\xce\x6e\xb7\xe0\xdf\x4c\x8e\x77\x4f\xe8\xf5\x2e\xb5\x0c\xf2\x6d\x38\x4e\x83\xb3\xdc\x06\xfa\xcd\x5c\x62\xda\x87\x6d\xc3\x27\xaa\x8f\x57\x3c\x91\x53\x94\xe8\xf5\x5e\x51\x7d\x98\x63\x57\x6e\x51\xad\xff\xd5\x2f\x96\x50\x90\xaf\x8e\xf1\x99\x38\x46\x91\xd3\x3d\xad\x7b\x34\xef\xe1\x59\x38\xc9\x8c\x53\xdb\xdc\x4b\xce\xc9\x7c\xfb\xef\x40\xc0\xa2\x89\x23\x3c\xef\x9e\xeb\x5c\x20\x7e\xd6\x52\x38\xbf\x5b\x8a\x7f\xff\x01\x81\x5a\xbf\x51\xdc\x76\xce\xfb\xa5\x46\x4a\xfa\x09\x04\x38\xad\xd2\xa4\x43\x80\x6d\x3f\xb9\x93\x6b\x6e\xd2\xa0\xc3\x25\xb6\xfa\xdc\x2e\xfe\x22\xe8\x5e\x5f\x5c\x48\x99\x10\x4a\xa5\xca\xfc\x35\x5d\xb4\x3d\xb4\xcf\x94\x71\x6c\x6e\x66\x41\xb4\xb7\x24\x24\x08\xfd\x71\x62\x7d\xfd\x01\xdf\xab\xce\x02\x03\x95\x7d\x04\x14\xed\x0f\xe1\x5a\xfd\x5e\x07\x75\xc0\x9b\xae\x79\x1b\x49\xea\x27\x3e\xc7\x51\x30\xe5\x0c\x2d\x86\xb8\xce\x41\xc8\xe1\xd4\x7f\xd5\x73\x9e\x20\x02\xfb\x0b\xb5\xb4\xc8\xdf\xf8\xb6\x4c\xc9\x04\x28\xa1\x2d\xa4\x7e\x48\xd9\x7d\x45\xb0\x0b\x3a\x2e\xe9\x7c\x62\x90\x01\xfd\xbb\x2a\xc8\x15\x89\xa8\x43\xbc\x35\xd9\x16\x7a\x1e\xd5\x07\x3f\x52\x60\x43\xf9\x17\x2b\xd6\x3f\x65\xa9\x21\x86\x1f\xb9\x18\x30\xe3\x5c\x27\x86\x7c\x1e\xba\x91\x43\x53\x07\x17\xea\xbc\x82\xf0\x66\x17\xaf\x20\xe8\xbb\xfa\xd9\x67\xf6\xfd\x01\xf0\x44\xfb\x48\x58\x8c\xe8\x9e\x08\xc3\xfd\xf8\x81\xb0\x0e\x64\x9f\x0f\x84\xf3\xd4\x5c\x1b\xa9\xb9\x36\x50\x73\x6d\xa6\xe6\x7a\x77\xd4\xe8\x5f\xa7\x28\x50\x33\xe8\x5e\xe9\x1e\x6f\xcb\x11\xcd\xd3\x6d\xbc\xaf\x7d\x5a\xaf\x40\xf6\xf8\xf2\x41\x41\xd3\xae\x7a\x26\x4d\x83\x11\xad\xa6\x25\xb4\x68\x41\x9e\x52\xd3\x2e\x7a\x27\x5d\xbd\x6c\xf8\x88\x46\x36\x17\x3d\x23\x35\x02\xe4\x09\x65\x73\xd3\xbb\x1a\xea\xa9\xe1\x23\x1a\x6a\xf0\xbe\x41\xd3\x04\xc8\x13\x52\x73\xd5\x1d\x18\x34\x0d\x47\x74\x9a\x06\xf7\x4d\x5e\x80\x83\xec\x52\xd3\xd2\x91\x51\xcc\xcb\x52\x33\xec\x9d\x1b\x34\x8d\x8f\xe8\xde\x71\x81\xfb\x06\xd9\x08\x90\x9d\xc8\xa6\x9c\x4f\xc3\x58\x68\xb0\x9b\x63\x3d\x35\x27\x97\xe7\xe7\xc7\x17\x9d\xe2\x1b\x62\x0a\xe4\xb9\xbc\xb0\x23\x33\xeb\xcd\x53\xf4\x54\x2d\x07\x4b\x49\xba\x05\x6b\x32\xc7\x0d\x6e\x6c\x77\x01\xf9\x93\x7a\x1d\xb9\x02\x86\xe5\x94\x77\x38\x79\x36\x12\x5a\x90\x86\xe3\xb9\x16\x71\x2b\xce\xc4\x7c\x17\x57\x3d\x6c\xfc\x14\x27\x6d\xf2\x0f\x32\x89\xa3\x79\xfc\x93\xd0\xc6\xe4\xa9\xc4\x0e\xe2\x32\x64\xe3\x3a\x63\x6e\x8f\x67\x49\x3e\x24\xf7\x77\x0e\x37\x11\xa3\xae\xde\x90\x7f\x1f\x4b\x16\x1d\x8b\x05\x4f\x11\x71\x95\xd6\x35\x2f\x08\x74\xc5\x40\xb5\x04\xf4\xe7\x04\x49\x7e\xf9\x57\xe6\x82\x03\x0b\x6d\x9c\x76\x61\xe7\xf2\x62\xed\xac\x7e\xe8\x2f\x21\xeb\x0e\xd7\xcd\xac\xb2\xe7\x5f\x92\x3d\xe3\x79\x4b\x92\xde\xb4\xbc\x1c\xe0\xfd\xb5\x04\x54\x41\xf8\xd3\xbf\x12\x8c\x13\xea\x92\xc0\x66\x33\x0d\x52\x29\x50\x9c\xf1\x27\x4e\x79\x34\x65\x2f\xa1\x7c\xf2\xb3\x4b\x25\xaa\x60\xe3\x59\xb2\xb4\x1d\x38\xaf\x0c\x47\x10\x73\xf6\x66\x65\x96\x5e\x37\x3f\x76\x25\x75\xeb\x11\x75\xdc\x2c\x2e\x38\xc4\xe1\x35\x79\x06\x6d\x0b\xcd\x16\x9a\x6f\x87\x24\x43\x58\x78\x19\x07\x03\xa9\xb6\xc6\x09\x5c\xf9\x8c\xa3\x0e\x0d\xc9\x98\xf1\xbf\xf7\xb5\xa5\xde\x4a\xac\x0d\x1b\x78\x6e\x75\xd4\x14\x16\x48\x1d\x0a\xe5\xc7\xca\xe4\xb1\xd0\xd4\x75\x33\x9a\x5b\x12\x40\xdc\x10\x3c\xcf\xfc\xfd\xdb\xd4\x6c\xdb\x71\xd4\x5f\x8d\x3c\x92\x47\x5e\xe3\xc8\x96\x3b\x76\xcc\x4f\xae\xe2\x91\xf5\xd0\x77\x63\x14\x7c\x46\xfa\x0f\x47\x37\x2c\xe0\xc4\x98\xcc\x7c\x17\xc4\x20\xbe\x4c\x24\x8e\x98\x4a\x7d\x4f\x7d\x3f\x49\xdc\x8f\x3f\x97\xd4\x27\x21\xf5\x51\xd9\x1b\xd6\x12\x83\x0f\x07\x16\x37\x63\xdd\x14\xc4\xf0\x33\x87\x8a\x73\xff\x0b\x00\x00\xff\xff\x6b\x6b\xe9\xf0\xfc\x7b\x00\x00")

func index_html_bytes() ([]byte, error) {
	return bindata_read(
		_index_html,
		"index.html",
	)
}

func index_html() (*asset, error) {
	bytes, err := index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "index.html", size: 31740, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"index.html": &_bintree_t{index_html, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

