// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x73\xdb\x46\x92\xff\xdf\x9f\x02\x87\xec\x5e\xad\xb7\x96\xe4\xd9\x97\xbd\x4d\x39\x92\xaa\x64\x91\xb2\x59\xb1\x24\x96\x48\xe9\x2e\x7f\xa5\x40\x62\x48\x8e\x05\x02\x08\x30\xa4\xac\xb0\xf4\xdd\xaf\x7b\x1e\x78\x0e\x20\xbc\xa8\xc8\x5e\xa7\x2a\x25\x10\x33\xd3\xdd\xd3\x3d\xfd\xeb\xee\xc1\x00\x3e\xfa\x8f\xe1\xd5\xd9\xec\xd7\xc9\xc8\x58\xb3\x8d\xf3\xea\xe4\x88\xff\x31\x0c\xb8\x20\x96\x0d\x17\x78\xb9\x21\xcc\x32\x16\x6b\x2b\x08\x09\x3b\x36\xb7\x6c\xd9\xfb\xc9\x4c\x36\xad\x19\xf3\x7b\xe4\xf7\x2d\xdd\x1d\x9b\xff\xd7\xbb\x39\xed\x9d\x79\x1b\xdf\x62\x74\xee\x10\xd3\x58\x78\x2e\x23\x2e\x8c\x1b\x8f\x8e\x89\xbd\x22\xa9\x91\xae\xb5\x21\xc7\xe6\x8e\x92\x7b\xdf\x0b\x58\xa2\xf3\x3d\xb5\xd9\xfa\xd8\x26\x3b\xba\x20\x3d\xfe\xe3\x1f\x06\x75\x29\xa3\x96\xd3\x0b\x17\x96\x43\x8e\xdf\x28\x42\x8c\x32\x87\xf0\x6b\xf8\xb5\xdf\xf7\x87\x16\xb3\xfa\x1f\xbd\x90\x21\xf1\xc7\x47\x03\xae\x80\xe4\xd1\x20\xee\x77\x72\xe4\x50\xf7\xce\x08\x88\x73\x6c\x52\x60\x69\x1a\xec\xc1\x07\x39\xe8\xc6\x5a\x91\x81\xef\xae\x4c\x63\x1d\x90\xe5\xb1\x39\x58\x5a\x3b\xec\xd0\xc7\x7b\xb9\xa1\x21\x7b\x70\x48\xb8\x26\x84\x29\x02\x8c\x7c\x61\x83\x45\x18\x46\xe3\xe1\x7a\x40\x5d\x9b\x7c\xe9\xe3\x5d\x49\x21\x5c\x04\xd4\x67\xc9\x21\x9f\xad\x9d\x25\xee\x9a\x59\x3d\x1b\x61\xb0\x00\x42\x9f\xc3\x41\x80\x1a\x0e\x08\x5c\xbd\xed\xbf\xe9\xbf\xf9\x97\xba\xd1\xdf\x50\xb7\xff\x19\x78\xda\x30\xf1\xde\xc6\xa2\xae\xe8\xbf\xdf\xd3\xa5\xd1\x9f\x9d\x7e\xf8\x30\x1a\xce\xa9\xfb\xf8\x08\xfd\xa4\x30\x62\xc4\x7e\x4f\x9c\x10\x34\x04\x1c\x06\x1b\xea\xdc\xc9\x46\xde\xe0\xda\x8f\x8f\xa6\x52\xea\xd1\x40\x08\x27\xe5\x1f\xc8\xa5\x71\x72\x34\xf7\xec\x07\x79\xd3\xb5\x76\xc6\xc2\xb1\xc2\xf0\xd8\x84\xcb\xb9\x15\x18\xe2\x4f\xcf\x26\x4b\x6b\xeb\x30\xf5\x73\x49\xbf\x10\xbb\xc7\x3c\xdf\x34\x02\x0f\xcc\x88\xbd\xe9\x0a\x16\x0b\x98\x21\xe2\x67\xd3\x88\x18\xae\x08\x98\x12\x81\x91\xce\x96\xda\xaa\x4f\xa6\x97\x1d\x78\xbe\xed\xdd\xbb\x8a\x0b\x4a\x48\x82\xb8\x33\x17\x76\xcb\x98\xe7\xa6\x85\x04\x41\x56\x2b\x87\xc0\xba\x73\x1c\xcb\x0f\x89\xad\x2c\x29\x3a\x4b\x9d\x8a\x4e\x28\x8b\xe8\xa5\x6e\x5b\xc1\x0a\x0d\xf5\x83\xa4\x15\x35\x27\xd8\x72\x7b\xfb\x56\xc4\x36\x0c\x7a\x9e\xeb\x3c\xa4\xbb\x40\xa7\x99\x90\x23\x56\x06\xe8\x1c\x86\x95\x50\xc2\x75\xd9\x03\xb6\x39\x52\x2f\x66\xe4\x40\x28\x31\x65\x04\xcb\xa0\x76\x6c\xae\x79\x60\xb9\xa0\xf2\x8c\x11\x95\x51\xa4\x5a\x65\xa7\x94\x25\x54\x57\xd3\xb0\x02\x6a\xf5\xc8\x17\xe0\x6e\x13\xa0\xcc\x82\x2d\x89\xbc\x2f\x6b\x08\x5c\x30\xc8\x7e\x2d\xc1\x21\x37\x8d\x3c\x7a\x1c\x0d\x60\x50\x76\x5e\x56\x6a\x4a\x5b\x27\x37\x81\x0d\x71\xb7\x6a\x7d\x8b\x6b\x2e\xa6\x63\xcd\x89\xe3\x10\x7b\xfe\x90\x55\x41\x86\x83\x43\x73\x24\xe5\x8a\x96\x44\xfd\x80\x84\x00\x6a\x29\xb7\x89\x86\x07\x5b\xd7\xa5\xee\xea\x68\xe0\xd0\x3c\xdd\x0a\xe3\xc1\x48\x39\x8b\x00\x4a\x65\xfb\x25\xf4\x35\x1c\x4f\x67\xd7\xe3\xf7\xa8\x2e\x2b\xbf\x34\x72\x62\x0c\xb6\x4e\x4a\x83\x29\x1d\xc7\x66\xca\xba\x55\x0c\x09\xe2\x86\x51\xe2\x77\x49\xb3\x20\x34\xc9\xae\xf0\x47\xa3\x6b\x64\x46\x7d\x33\x0b\x0d\x9a\x39\x47\x33\x1e\x4f\x70\xb2\x3a\x05\x67\x54\x97\xd7\xae\x9a\x9e\xea\xe1\x58\x3a\xce\x46\xc6\x1b\x6a\x39\x40\xde\x52\x11\x57\xe0\x96\x6b\x4d\xcc\xeb\xd3\xa9\x6e\xcd\x6b\xcc\x94\x57\x73\x93\xd5\xaf\x93\xa6\xe5\xf2\xe7\x24\xb6\x3e\xa3\x1b\x92\x33\x50\x44\xbe\x22\x19\x09\x57\x82\x9a\x06\xa7\xb4\x5e\x91\xd2\xe7\x0d\x1f\xaa\x73\x0c\xa9\x53\xad\x84\x69\x07\xd1\xf7\xcc\xbb\x51\xd1\x8a\x57\x97\x01\x5d\xad\x59\x31\xd4\x94\x2d\xfb\x04\x6d\x87\x86\xac\x47\x5d\x48\x83\x48\xa1\x57\x29\xd2\x05\x3a\x15\xf0\xfc\x03\x26\x01\x7a\xed\x61\x53\x3d\x8d\x3d\xc5\xcb\x0f\x8b\x58\xf9\x61\xb7\x9c\x76\xab\x22\x4e\x3b\x6b\x05\x60\xcf\x0e\xb1\x14\xf2\x1e\x63\x58\x0b\x46\x77\xf9\x10\x97\x89\xc0\x3b\x12\x84\xb8\xfa\x0b\x62\x70\x93\xb0\x8b\xd5\x40\xf8\x6e\x30\xb8\xbf\xbf\xef\x43\x1c\x0d\xe0\xff\xfe\xc2\xdb\x0c\x44\x1e\x0e\x59\xab\x43\xac\x90\x84\x03\xc7\x62\x24\xd4\x45\x95\xab\xe9\x6c\x74\x39\xd3\x85\x92\x76\x60\xa3\xe6\x7a\x10\xc4\x91\xc4\xbb\x80\x9c\x6e\xd4\xc8\xa9\x29\x18\xba\x1d\x5d\x4f\xc7\x57\x97\xcf\x83\x43\x99\x70\x9e\xf8\x09\x3f\x00\x2b\x64\xc5\xa0\x22\x12\xaf\x05\xf4\xd9\xbe\xe1\x5b\xb6\x0d\xa9\x0c\xd6\x0b\x21\xd9\xc1\xbc\x1f\xc2\xb5\xb6\x4c\x08\xbc\xfb\x6c\x69\x80\xb4\x37\x64\x03\x69\xba\xa8\x43\x45\xc7\xb9\xe3\x2d\xee\x30\xdf\xef\x6d\xec\xde\x5b\x75\xe1\x2d\x97\x50\x73\xf5\xde\xa4\x52\x88\xfd\x9e\x91\x8d\x8f\xfa\x35\x4c\xa8\x62\x40\xac\xf0\xdd\x3b\x71\xf1\x1b\x27\x03\xd4\x4d\xa3\x9f\x0d\x98\x29\xb9\x52\xec\xfe\x3b\x9d\xa1\x24\xba\x81\x1f\x11\xe7\x4d\x0e\x9b\x71\x11\x67\xb3\x1e\xb1\xb4\x0d\x3e\x82\x2f\x52\xd0\x8f\x31\x67\x90\x97\x23\x2b\xd3\x58\x7a\x01\xac\xe2\xed\x66\xf3\x40\x97\xa0\xce\x25\x5d\x2d\xd6\x64\x71\x37\xf7\xbe\xf0\xb6\x5e\x88\xa5\xeb\x0f\xaa\xad\x24\xf9\x43\x9a\xc2\x09\x04\x69\x5e\x4f\x92\xdf\x0d\x73\x69\x39\x98\x8d\xfd\xed\x73\x08\xe5\x94\x58\x5f\x67\x0e\x05\xe3\xf4\x3f\x52\x9b\x08\xba\xe3\xf3\xd7\x50\x7a\x0b\x0c\x52\xe5\xa4\x42\x48\xba\x2c\x49\x25\x25\xa5\x99\x35\x1f\x9f\xf7\x67\x58\xb2\xeb\xb3\x4a\xea\xfa\x5b\x26\xa0\x4c\x3f\xd7\xac\xda\xe2\x16\x51\xe1\xc5\xbf\x39\x60\xac\xa9\x6d\x13\x37\x42\x32\xfe\x4b\xb3\xf6\x51\xf7\xaf\x74\x92\x74\xcd\x8e\x2f\x8f\xc2\xdc\x31\x32\x9f\xe2\x1b\x19\x47\x10\x7c\xda\x36\x91\xa0\x82\x77\xa6\xe4\x4f\xf2\x84\x45\xb3\x51\x6c\xd6\x5e\x40\xff\x40\x1f\x75\x7a\x78\x5b\x8f\x60\x89\x75\x8d\x9d\x7a\xab\xc0\xdb\xfa\x3d\x74\x65\x62\x17\xe0\x54\xca\x65\x60\xdd\xf1\x21\x46\x74\xd5\x0b\x37\x99\x48\x24\x4a\xcb\x82\xa0\x9e\xf3\x1d\x20\xc4\x89\xa9\xbd\x08\x98\x33\x75\x0b\xe2\x74\xd2\xa8\x19\xd3\x15\xf7\xff\xc8\x95\xa8\x5b\x1f\x55\x65\xaa\xe0\x5d\x23\x1e\x6e\x11\xcd\x84\x77\xd9\x34\xc4\x1f\x76\x15\xff\x6a\x3c\xb3\x8c\x5f\x0a\x19\x30\x47\x1c\x9f\xf3\x0a\xa8\x74\xc2\xda\x42\xa2\xb4\xa9\xd1\xea\xd9\xef\xef\x29\x5b\xa7\x95\x75\x4d\x96\x10\x6a\xd7\x28\xa5\x16\xc7\x03\xd1\xce\xf1\x5b\x2a\xb0\x58\xa6\x01\x4a\xa2\x71\x8d\x5c\xc6\x8d\xc1\x46\xbb\x28\x93\x29\x06\x5d\xf6\x42\x10\x78\xb1\x8e\xf6\x91\xe6\xe8\xd3\x51\x69\x79\x3e\x3b\x7d\x3f\xed\xd3\xf3\xc9\xe9\xd9\x2f\xa3\xd9\xb4\x7f\x43\x5d\xa6\x73\x4d\x41\xd7\x8a\xcd\xee\x5b\x8b\x3b\xc2\x8a\x9d\x62\x22\xda\xf5\x39\x40\x51\x16\xd0\x4c\xf6\xd1\xf5\xf5\xd5\x75\x0d\xd1\x49\x10\x78\x41\xb1\xe4\x23\xde\xdc\x89\xe0\x2a\x31\x2e\x97\xff\xfd\xaf\xb3\x51\x0d\xf1\xe7\x0f\x90\x84\x15\x4a\xff\x1e\x5b\xeb\x0b\x9f\xcf\xbe\x0a\xab\x70\xcd\x2e\x55\x79\xf8\x50\x4b\x25\xa1\x1e\x50\x05\x07\x21\xa8\xeb\x92\xe0\xa3\x5d\x8e\xaf\x75\xf8\x24\x62\x36\x6f\x06\x74\x2a\x08\x30\x52\xed\x18\xd8\x4b\x96\xbc\x0c\xfc\x2d\x1d\x44\x6e\x5e\xa6\x66\x2c\xd3\x41\xfd\x1e\x48\x71\xbe\x17\x8d\xff\x4d\xa6\x93\x3c\xed\xcb\x6d\x7a\x96\x98\x28\xd6\xbd\x5c\xeb\x35\x54\x9f\xf0\xa6\x43\x69\x5e\xb2\xa8\xa6\xf8\x27\xbc\x3b\xa5\x77\x31\xdb\xc6\x6a\x17\xc3\x3b\xd0\xba\x70\xd1\x1a\x4a\x8f\x21\xe0\x50\x3a\x17\x1c\xaa\xa9\xbc\x1c\x90\x52\x1a\xe7\x33\x6d\xac\x70\x3e\xba\xb1\xbe\x75\xdb\xe5\xe9\x5b\xda\xed\x5e\x6d\x71\xf6\xbc\xd5\xd2\xc2\xdf\x16\x97\x4b\x51\xe3\xa1\xea\xa5\xb3\xc9\x4d\x71\xc1\x04\xdc\x35\x26\x87\x21\x15\x0a\x23\xcd\xb4\xbe\xe9\xca\x28\xb6\x54\x93\xd2\x48\x98\xa1\x93\xda\xc8\x98\x7b\x01\x5f\x0b\x1e\x54\x2a\x9b\xaf\xba\x5c\x4a\x3b\x53\xc6\x2f\xbe\xde\x2a\x4a\xfa\x5c\x51\x19\xd5\xed\xdc\x0a\xeb\x28\x90\xe2\x6b\x28\xa4\xb8\x98\x87\xab\xa4\xba\xc8\x6a\xd1\x60\xf5\x9c\xbe\xae\xbb\x47\x41\x16\x58\x35\x0c\xb0\x30\xf2\x05\xc4\xd6\x67\xde\x89\xb4\x4b\x76\x22\xed\x03\xef\x44\x0e\x4b\x76\x22\xed\x6a\x3b\x91\xc3\x3a\x3b\x91\xf9\xb9\x7e\xd3\xf1\xd6\x6e\xb3\x13\x39\xfc\xbe\x13\xf9\x95\xef\x44\x0e\x4b\x77\x22\x75\xfe\xd5\x78\x66\x85\x11\x74\xf8\x55\xec\x44\x0e\x5f\xe0\x4e\xa4\x5d\xbe\x9b\x37\x14\xc5\xa7\x7d\x3e\xbe\xbc\x1a\x56\xdf\x0e\xb3\x61\x62\x9e\x5d\xb2\x1f\x36\xe6\xcd\x6d\x76\xf3\xec\x4a\xbb\x79\x91\xfc\xb5\x76\xf3\xec\xaf\x6d\x37\x2f\xd2\x77\x42\x3b\x05\x9b\x1b\x3a\x8b\x16\xed\x6e\x0c\x9b\xed\x6e\x64\x59\x94\x6e\x6f\x54\x5d\x61\x89\xd4\x4b\xcd\xb6\x61\xfe\xa5\x86\xb7\xde\x51\xb2\x33\x3b\x4a\x15\x94\xfe\xf4\x8e\x52\x5b\x9d\x57\xd8\x51\xaa\xe8\x14\x29\x8d\xb7\xd9\x51\xb2\x9f\x7f\x47\x29\x7d\xe2\x40\xfd\xa8\x72\xac\xf8\xa9\x33\x05\xba\x5c\xfa\xa7\xcc\x21\x82\x67\xde\xb7\xf2\xc3\xe2\xdc\x5a\xb5\x1d\x2a\xb7\x9e\x4c\x8b\x73\x6b\xdd\x89\xab\x93\x49\xe0\x2d\x48\x18\xea\xf0\x33\x97\x48\xe7\x27\xf6\x4d\x27\xd2\x91\xad\x9a\x24\xd2\xdc\x10\xcd\x12\x69\x71\x94\xaf\x68\xcb\xca\xc0\x04\x4b\x77\x72\x50\xb3\xbc\x3b\x48\x92\x26\xd3\x2e\x92\xa4\x97\x9f\xf6\x17\xef\xa8\x15\x1d\x54\x14\x44\x0f\x5f\x0c\x38\xe0\x9e\x46\x51\x45\x50\xb8\x12\x27\x53\xd7\x63\x43\xb2\x08\x88\xc5\x2b\x81\xb2\xa2\xc0\x0f\x91\x47\x87\xb3\xec\xd5\x9a\xe0\xc6\x0b\x48\xc3\x09\xc6\x65\x4f\xf9\xfc\x90\xc5\xe1\x0a\x9f\xc9\xd4\x77\xb6\xe1\x0c\xfc\xf2\x30\x65\xcf\x21\xb7\xe8\xfc\xb0\x26\xbc\xd5\x04\xb6\x28\x67\xf1\x9b\xa6\x2b\x7e\xf8\x3d\x51\x39\x4c\xa2\xb2\x5b\x15\x27\x2a\xaa\xed\x50\x89\xca\xed\x87\xe2\x44\x45\x77\x60\xfb\xe4\x56\x9c\xd5\x36\x56\x8e\x37\xc7\x57\x0e\x99\xc5\xb6\x55\x92\x96\xfc\x24\xbf\xe9\xa4\x25\xb2\x5b\x93\xa4\x85\x1b\xe5\x1b\x48\x5a\x6e\x3f\xfc\xbb\x27\x2d\x45\xef\x3c\x08\xa2\x07\x49\x5a\x5e\x5a\x64\xdb\xd5\xf5\x81\x9a\xab\x3f\x8a\x6c\xbb\x55\xc3\xc8\xb6\x5b\xbd\x80\xc8\x56\xfa\xee\xb3\x1a\xb0\xb3\x02\x03\xd5\x65\x1c\x1b\x32\xf7\x79\x7c\xfc\x39\xfb\x12\xb2\x7c\xf7\x18\x5f\x47\xe6\x6f\xae\xef\xf7\x83\xbf\xbf\xfa\xfb\x00\x3d\x4d\x4c\xb8\xe4\xd0\x3e\x28\x40\x1b\xed\x32\x0e\x50\x14\xd4\xa4\x08\x96\x81\x96\x3e\xc3\xbe\xa7\x8c\x05\xd2\xc4\x9f\xa8\x7b\x17\xf6\x27\x56\x60\x6d\xc2\xfe\xfb\xab\xab\x4f\xfd\x70\xed\xdd\x0b\xc4\x03\xde\x46\x2e\x90\x45\x5b\x98\xb9\x16\x90\x13\x58\x08\xe7\xfd\x08\x60\x52\x9d\xcb\xe3\xa3\xd2\xe5\x05\x81\x6c\xf4\x41\x45\xae\x44\xe8\x88\x97\x73\xea\x75\x09\x85\xe7\x8d\xa6\x06\x73\xc8\xac\x68\x33\x96\xa4\xf1\x61\x89\xea\xd8\x58\x09\x11\xc5\x8b\x38\xfc\x77\x36\xc3\xa9\x6a\x51\x98\x1b\xe1\x13\x8e\x4c\x27\xac\x97\x84\xcb\x5a\xc6\x93\x04\x23\x65\x45\x22\x29\x30\xb4\x5a\x48\x1a\xde\x5b\x7e\xb7\xa2\x22\x45\x3e\x86\x2e\x87\xb2\x0a\x6a\x3c\x3d\x62\x20\xb5\xfc\x0c\x6b\x3c\xda\x2e\x5f\x13\x65\x98\x18\x45\x68\x79\xa1\x8d\xef\x17\xa3\x8b\xfc\x3b\x3e\xc9\x58\x92\x42\x38\x79\x99\x75\xaf\x9a\x0b\xab\xd8\x8d\xca\xa6\x03\x43\x93\x18\xaf\x11\x8a\x5f\x9c\xc8\x38\x53\x01\x32\x17\x0e\xf5\x11\x2e\x45\x0c\x07\x34\x1e\x0f\x71\x02\x60\x7c\xf8\xc1\xd5\xff\xf8\xd8\x32\xdb\x3c\x41\x42\x5e\x48\x66\xd6\xca\x30\x39\x1f\x64\x28\x80\x18\x18\x9e\x7b\x81\xe4\x98\x64\x88\x62\x61\xeb\xc5\xff\x4e\xf1\x2b\x1c\xa2\xc7\x2b\x51\x2c\xa7\x4b\xe3\x3a\x93\xf5\xb7\x50\x4a\x85\x26\xf6\x11\xd9\xde\xd5\xed\xe8\xfa\x7a\x3c\x1c\xe1\x1d\x91\xc4\xf1\x2f\x66\xec\xf7\x50\x1c\xac\x88\xf1\x17\xfa\x0f\xe3\x2f\x0b\xdc\x50\x78\x77\xac\x96\xce\xe4\x06\xec\x1a\xa2\x00\x2c\xd8\xef\xef\xc8\x83\xc1\x4f\x8b\x00\xe1\xf9\x43\xef\xd2\x14\xfd\xfb\x97\x42\xda\x23\x66\xab\x45\x1c\xe7\xac\x86\xeb\xdd\x07\x96\x04\x27\x10\x3f\x1a\x71\x34\x60\x76\xe1\x28\x15\x95\x78\xa2\x10\xab\x4a\x0d\xbf\x09\x49\x70\x26\xee\xc5\x2b\x29\x6e\x4a\xa5\x04\x27\x6d\x18\x4d\x1f\x42\xc9\xc7\xc8\x32\x82\xa6\xee\xf8\x8c\x6d\x87\x14\x4c\x08\x9b\x0a\x18\x0d\x58\x90\x58\x11\xe9\x3f\x55\xd6\x87\x70\x2f\x34\x2e\x5e\x44\x42\xe3\x8f\x37\x46\xc8\x20\x41\x21\x71\x7a\x06\xf3\x4a\x7c\x45\x07\x38\x2b\xb8\x60\xeb\x24\x92\x44\xbf\xb0\xe1\x89\xe5\xc0\xbb\xa1\xc1\x52\xdf\xe5\xd8\xba\x34\x55\xe9\x9c\xfc\x35\x93\xe0\x35\xe1\x02\xd6\x3a\x3c\x13\x34\x55\x1b\x2e\x03\xa9\x55\x7e\x57\x7d\x96\x86\xc5\xdf\xa5\x79\xe2\x28\x16\x77\x77\x01\x96\x2c\x4e\x28\xb9\x01\xeb\x00\x87\x7a\xc6\x55\x13\x3d\x6c\x1a\xde\xc5\xc8\x31\x3c\xe7\x44\x72\xe8\xa1\x1e\xbf\x09\x04\xb1\x69\xc0\x3f\x5d\x22\x46\xf7\x87\x34\xb8\xe4\x1f\x2a\xc9\xb8\x51\x06\x42\x4a\x94\xc0\x91\xf4\x6f\xf8\xc7\x78\xf3\x16\xb9\xf5\x04\x3b\x9b\xec\x52\x8c\xc8\x0e\x19\xbd\xd6\xa2\x50\x23\x6e\xff\x93\x64\xa6\x9d\x95\x9e\x59\x0e\x21\xc0\xed\xf9\xa8\xd3\x9d\x45\x9d\x7a\x43\xc0\x93\xc0\xc2\xff\xe9\xce\x43\xff\xe7\xa3\x70\xeb\x57\x09\xb2\xdb\x90\xf8\x24\x58\x40\x82\x00\x33\x89\x7f\x18\x11\xc5\x89\xb8\xc1\xa5\x57\x34\x2b\x41\x9d\x92\x6a\xe6\x41\x5e\x9c\x98\x48\x2b\xd0\x4a\x3f\x7f\x6d\x89\x5c\x5a\xbd\xb0\x35\xbe\x34\x8f\xdf\xc5\x32\x0d\x75\xa5\xcb\x70\x46\x97\x37\x17\x7d\x7b\x69\x98\xe7\x53\x4c\x43\x0b\x36\x4d\x6a\x53\xbb\x98\x74\x49\xed\xf4\xf6\x74\xfc\xa9\x33\x6a\x37\xd3\xd1\xb0\x33\x62\xb3\xab\xd9\x29\x8a\xd6\x0a\xf4\x52\x50\xd5\x05\xf2\xc9\xe3\x14\x2d\xa1\x4f\x50\xd1\x60\x9f\x3c\xec\xf1\x6c\xe0\x27\xf9\x3d\x13\xfa\x15\x70\x6b\x04\x7f\x63\x28\x56\x48\xcd\x21\xdb\xce\xf1\x0f\x49\xb6\x06\x40\x71\x40\xac\x3b\x04\x4c\x1d\xf9\x69\x9f\xbc\x45\x9b\x18\x99\xaf\xcc\x9d\x0c\xf9\xf7\x0a\x0b\xd2\xa0\x5c\xef\x0b\x6f\xeb\x32\x62\x97\x76\xd7\x6e\x65\x9f\xf0\x48\xd7\x60\x1c\x86\xbb\x06\xc3\x78\x3c\xea\x2c\xed\x4a\x43\x46\x7b\x08\xa2\xcd\x92\x2f\xba\x8c\xf1\x67\x5c\x90\x7a\xd1\x54\xea\x25\x5d\x94\x2e\xfb\x29\xd4\xa9\x0f\x33\x54\xa5\x3d\x69\x8a\xd5\xfd\x1d\x06\x0c\x89\xc3\xac\xb1\x5b\x7b\xc8\xd5\x96\xd5\x19\x53\x8f\x43\x9a\x78\x2b\xa7\xa5\x5d\xa6\x2d\xa9\x82\x6b\x0c\x4e\x17\x2c\xad\x42\x3f\xcd\x97\x2b\x86\x3c\x6e\xf7\x7e\x3c\x9b\x1a\x00\x77\x46\x88\x4f\xb0\x92\xdf\xa2\x1c\xbb\xe5\x45\xcc\x51\xe6\x9b\x39\xf3\xa3\x41\xf2\xce\x09\x7e\x84\xaa\x61\x2d\xf5\xb4\x70\x60\x95\x3f\x5d\x3a\x86\x10\x62\xf0\x23\x87\xc6\xc6\xb3\xb7\x8e\x67\xfc\xf8\xa1\x85\x02\xdf\x67\x44\xfc\xeb\x8f\x1f\x0e\x2e\x63\x6d\x3d\xd6\x15\xb2\x0d\xaa\xd2\x6e\xf3\xba\xe8\xc5\xeb\x56\xa8\x2a\x68\x68\x60\x55\xbe\x14\xde\x3d\xae\x4a\xc2\xdf\x81\xf5\x69\xcb\xbe\x24\x64\x2d\x00\x55\x95\x98\x96\x39\x5d\x07\xe0\x54\x84\x9a\xcf\xc4\x5e\x8f\x87\x55\x98\x77\x81\x7a\x05\x48\xd7\x05\xfb\x76\x78\x96\x04\xa0\x2e\x00\x4d\x7d\xc0\xa3\x15\xa2\x49\x22\x1a\x48\x53\xdf\x17\xe9\x1e\xd3\x14\xe5\xef\xa0\x56\xc1\xba\xdf\x51\xed\x85\xa0\x9a\xc8\xa6\xfe\x5c\x6c\x2b\x96\xe1\x45\x20\x5c\x0a\x91\xda\x43\xdc\x86\x6c\x1a\x3c\xbe\xc4\xc7\xcd\x11\xc0\x5d\x8c\x2e\x72\xd0\x86\xdf\xd0\x14\xa0\x76\x47\xf1\x43\xec\x38\xa2\xff\x0b\x45\xa1\x32\xa8\x96\x68\xa9\x88\x02\x38\xe0\xbc\xce\xb6\x15\x0e\xe8\x74\xd3\x5e\x12\x6c\xb3\x65\x85\x24\x3a\xdd\xb2\x8f\x1e\xe3\x3f\xeb\x73\xc6\x84\x77\xa0\x49\xea\xf4\x2f\xd9\x57\x7a\x86\x0d\x25\xb5\xee\xdb\x7b\x90\x1f\xd6\x74\x20\x3f\xf0\x16\xb1\xf7\x4c\xa6\x9c\x63\xce\x83\x7c\x95\x15\xf8\x14\xfd\x07\x07\xf5\x27\xe3\x21\x9a\xd1\x5d\x95\x1c\x04\x90\x4b\xcc\x80\x35\xa6\xc6\x54\x73\x94\x68\xc4\x4d\x66\x84\x6c\x4e\xfc\x57\x27\x17\xf1\x43\xf0\x9c\x40\x3b\x0b\xf9\x1b\x9f\x4c\x57\x4c\x4c\xe2\x59\x05\xd4\x0b\x28\x7b\xa8\x39\xec\x92\x2e\x2a\xc2\x46\x34\x64\x4a\xff\xa8\x3b\xe4\x9a\x84\xd4\x26\x6e\x49\x16\x84\xb0\xa1\xb6\x75\x4f\xd4\xb0\x99\xfc\xe8\x7b\xf9\xb3\x82\x5a\x06\xf8\x91\x1b\x00\x73\xc0\x32\x03\x64\x33\xc3\x56\x38\xa4\xde\x85\xd0\xc2\xd0\xdb\x67\x7c\x68\xe8\x87\x86\x09\x33\xed\xe4\x49\x1a\xd2\xba\xe9\x92\xd6\x74\x74\xdd\xd5\x03\x48\x3e\xcf\xeb\x71\x67\xb4\x2e\xc7\x67\xa3\xce\x88\xdd\x8e\xaf\x67\x9d\x11\xbb\x1e\x4d\x3b\xa3\x35\x1b\x5f\x8c\xf0\xe4\xa9\x70\xc4\xce\x74\x77\xca\xa9\xb6\x7d\xde\x2a\x43\x4a\xfb\xd8\xa4\x8e\x2a\xa6\xcf\x2e\xf3\xf3\x72\xf2\x98\x6b\xe2\xba\x17\x6e\xd4\x91\xc6\x5e\x74\xd2\x35\xf3\x6f\xf9\x24\x7a\x5b\xb6\xad\x3e\x47\x7f\x22\x0f\x3d\x46\x69\xef\x49\x74\xf6\x2f\x3a\x7d\xc7\xcf\x5b\xe2\x8b\x49\x81\xe7\x44\x6c\xc4\xc9\xbd\xc4\xc9\x6e\xd3\x00\x95\x2c\xc8\xda\x73\x6c\x12\x1c\xe3\x41\x6e\x71\xda\x14\x27\x99\x7e\x49\x5e\xdc\x8f\xde\x89\x87\x5c\x8c\x7a\x36\xbe\xb0\xb3\xb3\x9c\x2d\xc1\xa1\xe2\x56\x84\x5d\xaf\xb8\xd2\x35\xa7\x06\xeb\x1e\x6f\x4c\xa4\x85\x30\x5a\x9e\x34\xeb\x47\xe7\x34\xa3\x23\x85\xb7\x28\xc8\xe3\xa3\x3a\x8b\x54\x83\xc3\x6e\xc5\xf7\x31\x38\x86\x06\x06\xa4\x03\x78\x82\x5f\xdc\x8a\x42\x83\xe7\x20\xd5\x63\xf3\x9f\x51\x14\x91\x5f\xed\x17\x2f\x21\xf1\x8f\xdf\x16\x62\x7a\x05\x09\xa2\xa4\x46\x66\x2d\x1b\x6b\xb1\x8e\xb3\x16\xc9\xe5\x02\x6e\xe2\xb8\x5c\xf6\x22\xff\xd9\x0a\x99\xc2\x6c\xb7\x3c\xf8\x20\x89\xfe\x0d\x4f\x2f\x74\xa9\x45\xd5\xa0\xf6\xaf\x98\x7c\x96\xf0\xeb\xe2\xc4\x05\x73\x6e\xec\x76\x69\x65\xa2\xac\xb6\xd7\x24\xf0\x76\x10\xc3\x83\xb2\x9e\xd5\xa4\xfd\x29\x96\x16\x5f\x08\x23\x49\x71\xe5\xe5\x14\xef\x97\x8a\x5e\x8d\xd5\x3f\xff\x2b\xe6\xb5\xa4\x0e\xf1\x2d\xb6\xd6\xb0\x93\xb6\xc3\x1e\xbf\x61\x97\x27\x43\x7f\x85\xd5\x22\xbf\x08\x53\x21\x09\x2e\x7c\xcd\x25\xb9\x70\xd1\x91\xcb\x5f\x4b\x11\xde\x60\xa4\x48\x97\xf5\x8f\x00\xb5\x69\x5e\xa3\xde\x84\x89\xf2\x1a\xf1\x5e\x4d\xfa\x1f\x8a\x68\x53\x6b\xd1\x6c\x35\x14\x37\x61\x02\x57\xd8\xe8\xcb\xa5\x5a\xd8\x81\x2f\xbb\xc2\x56\x9b\x06\x64\xc1\xf8\xeb\x1e\x1d\x95\x56\xd1\x6a\x68\x11\xbf\xfe\xec\xc0\x95\x7c\x49\xa0\x66\xd0\x32\x9b\x44\x2d\x53\x86\x2d\x33\x1f\xb7\xc4\x64\x2a\x07\xa9\x44\xce\x82\x4b\x75\x9d\x8c\xc1\xf2\xbc\x06\xf0\x38\x75\xe8\xca\x95\x27\xa1\x05\x03\xf9\x29\x23\x68\xc3\xb7\x39\x52\x27\xe7\x55\x74\x93\x87\xa6\x13\xc7\xe5\x73\xc7\xac\xfb\x67\x56\x40\x58\xe6\x88\x75\xfa\x50\xb5\xf5\x4a\x6d\x2c\xa8\xe9\xfc\x7f\x00\x00\x00\xff\xff\x99\x65\x45\x06\x50\x74\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 29776, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

