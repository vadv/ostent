// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x7b\x73\xdb\x36\xb6\xff\x3f\x9f\x02\x97\x6d\xef\xdc\x76\x2a\xea\x26\xdb\xee\x66\x52\xdb\x33\x8e\xa5\xa4\x9a\xc6\x8f\xb5\xe5\xec\xf6\xaf\x0e\x25\x42\x12\x62\x8a\x64\x09\x50\x8e\xeb\xd1\x77\xdf\x83\x17\xdf\xa0\x48\x91\x72\x3c\xb3\xe9\x4c\x63\x3e\x80\xf3\xc2\xc1\xef\x1c\x80\x47\x38\xfa\x9f\xd1\xe5\xd9\xf4\xf7\xab\x31\x5a\xb1\xb5\xf7\xe2\xe4\x48\xfc\x41\x08\x2e\xb0\xe3\xc2\x05\xbf\x5c\x63\xe6\xa0\xf9\xca\x89\x28\x66\xc7\x56\xcc\x16\x83\xd7\x56\xf6\xd5\x8a\xb1\x70\x80\xff\x8c\xc9\xe6\xd8\xfa\xf7\xe0\xf6\x74\x70\x16\xac\x43\x87\x91\x99\x87\x2d\x34\x0f\x7c\x86\x7d\xe8\x37\x19\x1f\x63\x77\x89\x73\x3d\x7d\x67\x8d\x8f\xad\x0d\xc1\xf7\x61\x10\xb1\x4c\xe3\x7b\xe2\xb2\xd5\xb1\x8b\x37\x64\x8e\x07\xe2\xe6\x47\x44\x7c\xc2\x88\xe3\x0d\xe8\xdc\xf1\xf0\xf1\x4b\x4d\x88\x11\xe6\x61\x71\x0d\x77\x8f\x8f\xf6\xc8\x61\x8e\xfd\x6b\x40\x19\x27\xbe\xdd\x22\xb8\x02\x92\x47\xc3\xb4\xdd\xc9\x91\x47\xfc\x3b\x14\x61\xef\xd8\x22\xc0\xd2\x42\xec\x21\x04\x39\xc8\xda\x59\xe2\x61\xe8\x2f\x2d\xb4\x8a\xf0\xe2\xd8\x1a\x2e\x9c\x0d\x6f\x60\xf3\x67\xa5\xae\x94\x3d\x78\x98\xae\x30\x66\x9a\x00\xc3\x9f\xd9\x70\x4e\x69\xd2\x1f\xae\x87\xc4\x77\xf1\x67\x9b\x3f\x55\x14\xe8\x3c\x22\x21\xcb\x76\xf9\xe4\x6c\x1c\xf9\xd4\x2a\xda\x19\xd1\x68\x0e\x84\x3e\xd1\x61\xc4\x2d\x1c\x61\xb8\x7a\x65\xbf\xb4\x5f\xbe\xd6\x0f\xec\x35\xf1\xed\x4f\xc0\xd3\x05\xc5\x07\x6b\x87\xf8\xb2\xfd\xe3\x23\x59\x20\x7b\x7a\xfa\xfe\xfd\x78\x34\x23\xfe\x76\x0b\xed\x94\x30\xb2\xc7\xe3\x23\xf6\x28\x58\x08\x38\x0c\xd7\xc4\xbb\x53\x2f\xc5\x0b\xdf\xdd\x6e\x2d\x6d\xd4\xa3\xa1\x14\x4e\xc9\x3f\x54\xae\x71\x72\x34\x0b\xdc\x07\xf5\xd0\x77\x36\x68\xee\x39\x94\x1e\x5b\x70\x39\x73\x22\x24\xff\x0c\x5c\xbc\x70\x62\x8f\xe9\xdb\x05\xf9\x8c\xdd\x01\x0b\x42\x0b\x45\x01\x0c\x23\x6f\x4d\x96\xe0\x2c\x30\x0c\x09\x3f\x97\x24\xc4\xb8\x47\x80\x4a\x18\x7a\x7a\x31\x71\x75\x9b\x42\x2b\x37\x0a\x42\x37\xb8\xf7\x35\x17\x2e\x21\x8e\xd2\xc6\x42\xd8\x98\xb1\xc0\xcf\x0b\x09\x82\x2c\x97\x1e\x06\xbf\xf3\x3c\x27\xa4\xd8\xd5\x23\x29\x1b\x2b\x9b\xca\x46\x5c\x16\xd9\x4a\x3f\x76\xa2\x25\x1f\xa8\x6f\x14\xad\xe4\x75\x86\xad\x18\xef\xd0\x49\xd8\xd2\x68\x10\xf8\xde\x43\xbe\x09\x34\x9a\x4a\x39\x52\x63\x80\xcd\xa1\x5b\x0d\x25\xee\x97\x03\x60\x5b\x22\xf5\x6c\x7a\x0e\xa5\x11\x73\x83\xe0\x20\xe2\xa6\xc3\x35\x8b\x1c\x1f\x4c\x5e\x18\x44\x3d\x28\xca\xac\xaa\x51\x6e\x24\x74\x53\x0b\x39\x11\x71\x06\xf8\x33\x70\x77\x31\x50\x66\x51\x8c\x93\xd9\x57\x1c\x08\xee\x30\x9c\xfd\x4a\x81\x43\x49\x8d\x32\x7a\x1c\x0d\xa1\x53\x51\x2f\x27\xa7\x52\xec\x95\x14\x58\x63\x3f\xd6\xfe\x2d\xaf\x85\x98\x9e\x33\xc3\x9e\x87\xdd\xd9\x43\xd1\x04\x05\x0e\x1e\x29\x91\x54\x1e\xad\x88\x86\x11\xa6\x00\x6a\xb9\x69\x93\x74\x8f\x62\xdf\x27\xfe\xf2\x68\xe8\x91\x32\xdd\x06\xfd\x61\x90\x4a\x23\x02\x28\x55\x6c\x97\xb1\xd7\x68\x72\x33\xbd\x9e\xbc\xe5\xe6\x72\xca\xae\x51\x12\x63\x18\x7b\x39\x0b\xe6\x6c\x9c\x0e\x53\x71\x5a\xa5\x90\x20\x1f\xa0\x9a\x79\x97\x1d\x16\x0e\x4d\xaa\x29\xfc\xa9\xb0\x35\x67\x46\x42\xab\x08\x0d\x15\x3a\x27\x1a\x4f\xae\xb8\xb2\x55\x06\x2e\x98\xae\x6c\x5d\xad\x9e\x6e\xe1\x39\x55\x9c\x51\x61\x36\xb4\x9a\x00\xe5\x91\x4a\xb8\x02\xb7\xd2\xdb\x8c\x5e\x1f\x4e\xab\x7c\xbe\x62\x98\xca\x66\xde\xc7\xfb\xab\xa4\xe9\xe8\xfe\x82\x44\x1c\x32\xb2\xc6\xa5\x01\x4a\xc8\x37\x24\xa3\xe0\x4a\x52\xab\xc0\xa9\xca\x59\x91\xb3\xe7\xad\xe8\x5a\x35\x31\x94\x4d\x2b\x25\xcc\x4f\x90\xea\x96\xe5\x69\x64\xf2\x78\x7d\x19\x91\xe5\x8a\x99\xa1\xa6\xce\xed\x33\xb4\x3d\x42\xd9\x80\xf8\x90\x06\x61\xe3\xac\xd2\xa4\x0d\x36\x95\xf0\xfc\x0d\x4f\x02\xaa\xad\xc7\x5f\xb5\xb3\xd8\x2e\x5e\x21\x35\xb1\x0a\x69\xbf\x9c\x36\x4b\x13\xa7\x8d\xb3\x04\xb0\x67\x87\x70\x85\xf2\x8c\x41\xce\x9c\x91\x4d\x39\xc4\x15\x22\xf0\x06\x47\x94\x7b\xbf\x21\x06\xef\x13\x76\xf9\x6a\x80\xbe\x19\x0e\xef\xef\xef\x6d\x88\xa3\x11\xfc\x6f\xcf\x83\xf5\x50\xe6\xe1\x90\xb5\x7a\xd8\xa1\x98\x0e\x3d\x87\x61\x5a\x15\x55\x2e\x6f\xa6\xe3\x8b\x69\x55\x28\xe9\x06\x36\x5a\xd7\x83\x20\x8e\x22\xde\x07\xe4\xf4\x63\x46\x41\x4d\xc3\xd0\xc7\xf1\xf5\xcd\xe4\xf2\xe2\x69\x70\xa8\x10\xce\x33\xb7\x70\x03\x58\xa1\x56\x0c\x3a\x22\x89\xb5\x40\x75\xb6\x8f\x42\xc7\x75\x21\x95\xe1\xeb\x05\x8a\x37\xa0\xf7\x03\x5d\x55\x2e\x13\xa2\xe0\xbe\xb8\x34\xe0\xb4\xd7\x78\x0d\x69\xba\x5c\x87\xca\x86\x33\x2f\x98\xdf\xf1\x7c\x7f\xb0\x76\x07\xaf\xf4\x45\xb0\x58\xc0\x9a\x6b\xf0\x32\x97\x42\x3c\x3e\x32\xbc\x0e\xb9\x7d\x91\x05\xab\x18\x10\x8b\xbe\x79\x23\x2f\xfe\x00\xc7\xc7\x1e\x50\xb7\x90\x5d\x0c\x98\x29\x77\xb2\xa8\x63\xfe\xb7\x76\xcc\xc8\xa2\x96\xd7\x3c\x8c\x6b\x35\x6d\xc7\x0c\xa8\xd5\x72\x73\xfb\xd4\xcc\xad\xd6\x2c\xef\x37\xfa\xa6\xc9\xe2\xb0\x89\x67\x84\xb4\x4e\x83\xd7\x05\xc7\x68\x69\x3e\x88\x36\x4f\xaf\xd1\x66\x79\x40\x8d\x20\xaa\xb5\xd1\xa8\x76\x8b\x43\x77\xd8\x38\x11\xe2\xe8\x84\x8e\x91\xc2\xa9\xed\xf6\x97\xe2\x5e\x83\xda\x62\xe0\xbb\x0e\x62\x83\xea\xf1\x71\xf8\xc3\x8b\x1f\x86\xdb\xed\xe3\xa3\x94\x2f\x23\xb0\xc3\xc1\x9b\xef\xcf\x58\x20\xa9\xc2\x51\xa0\xfc\x2b\xfc\xe5\xfb\x40\xfe\x99\x47\xe6\x77\xc7\x8f\x6c\x45\xa8\xbd\x82\xc8\xe5\x61\xf1\x64\xfb\x42\x22\xe5\x14\xe4\x94\x08\x79\xa2\x76\x40\xea\x98\x29\xeb\xcc\x3d\x58\x39\x40\x2f\xe2\x87\x31\xe3\x7a\x4c\x46\xa7\x8c\x45\xc0\x0f\x6e\xc4\x40\x6c\xb7\xe9\x92\x65\x30\x5f\xe1\xf9\xdd\x2c\xf8\xac\xf7\x19\xd2\x7b\x11\xb6\x56\xc4\x75\xb1\x9f\xc4\x53\x71\xc7\xa5\xf9\x44\x3f\x9f\x79\x01\x2c\x79\x2c\xc1\x87\x33\x14\x11\x8e\x33\x7c\x17\x44\x8a\x63\x96\x21\x17\x8b\xbf\x3d\xff\xd7\x0d\xdf\xa6\x92\x2d\x0a\x8a\x0a\x12\xad\x94\x0d\x63\x70\x3e\x6a\xf1\x36\xf7\x84\xad\x10\xbf\x03\x6f\xe2\xae\x01\x74\xf9\x3f\x72\x4b\xe9\xf1\x11\x32\x9d\x25\x46\xdf\x92\x1f\xd1\xb7\xf3\x20\xc2\xe8\xcd\x31\x92\xa1\xe8\xec\xea\xd6\xfe\x00\x39\x24\x08\xc0\x22\x90\x50\xbc\xb6\x2f\xec\xdf\xf0\x03\x17\x12\x09\x24\x03\xba\xb3\x87\xc1\x85\x25\x45\x3e\x62\xae\xf6\x69\xee\x4b\x32\x91\x45\x7e\x70\x1f\x39\x2a\x83\x3c\x49\xe8\x70\xbd\x98\x6b\xec\x95\xec\xc1\xf1\x5d\x8d\xd4\x5e\xba\xfb\x2d\xc5\xd1\x99\x7c\x96\xee\x28\xa6\xaf\x38\xf1\x64\xa3\xe3\xa4\x0b\xa3\x9b\x07\xaa\xf8\xa0\x22\x23\x78\xd5\x1f\x9f\x89\x70\xf2\x4a\x85\xf8\x2b\x03\xa3\x21\x8b\x32\x6e\x91\xff\xd3\xc4\x49\x24\x0e\xf1\x11\xe6\x17\x89\xd0\xfc\xe6\x25\x82\x5c\x86\x84\x58\x61\x95\xd4\x2b\xb3\xd7\x0c\x9c\x35\x9e\xb0\x55\x16\x69\x92\x3b\xfe\x62\x87\x3b\x88\x66\x7c\xc0\x72\xbb\x57\xb1\x4f\x72\x79\xd2\xc9\x77\x85\x6d\xab\x7d\xb8\xc0\x68\x1d\x9e\x09\x1f\xaa\x2e\x5c\x86\xca\xaa\xe2\xa9\xde\xbc\x65\xe9\xee\x6d\x1d\xfc\xeb\x39\x2f\xe1\x9f\xa5\x78\x2c\x06\xb0\x0d\x7a\xb8\x8b\xd9\x03\xe4\xaa\x7f\xb4\x84\x10\x97\xd0\xbb\x14\x3e\x46\xef\x04\x91\x3c\x84\xf0\x26\xf6\x88\x44\x17\xce\x1a\xa7\x40\xa2\xf8\x29\x30\x71\x49\x24\xf6\xfc\x4a\x90\x52\xc0\x91\x1a\x4b\x08\x4c\xfd\x3f\xc5\x0d\x6f\x04\x37\x88\x20\x21\x7a\xf9\x8a\x73\x1b\x48\x76\x2e\xde\x08\x46\xdf\x57\x42\xd1\x9e\xdc\x94\x6e\x82\xdb\xdf\xb3\xcc\x94\x56\xd5\xcc\x4a\x30\xa1\x6d\x75\xba\x71\x88\xd7\xae\x0b\x4c\x27\x18\xe6\xff\xf5\x67\x34\xfc\xe5\x88\xc6\x61\x0a\x27\x66\x1d\x62\x8a\x43\x1c\xcd\x21\x6f\x07\x4d\xd2\x1b\x94\x50\xbc\x92\x0f\x84\xf4\x9a\x66\x23\xbc\xd3\x52\x4d\x03\xe6\x64\x15\xe9\x84\x5c\xda\x41\x7b\x81\xaf\x4a\xbb\xb0\x55\x92\xa2\x20\x7d\xa5\x1c\xfb\xca\x89\x9c\x35\xb5\xc7\x17\xb7\xe7\xb6\xbb\x40\xd6\xbb\x1b\x0b\x59\x62\x9a\x74\xa3\x73\x7e\xd5\x0f\x9d\xd3\x8f\xa7\x93\x0f\x3d\xd0\xb9\xbd\x19\x8f\x7a\x20\x33\xbd\x9c\x9e\x72\x71\x3a\x61\x5b\x0e\x91\xfa\x00\x38\xe2\x07\x6e\x77\x84\x93\x54\x9a\x41\x9c\x6c\xfb\x74\x18\xa7\xf8\x3d\x11\xc8\x35\xe2\x66\x04\x87\xc9\x22\xc2\xb8\x65\x97\xb8\x77\x98\xe3\x24\x3b\xe3\xdc\x44\x18\xa2\x3f\xa0\x53\x8e\xda\x57\xa2\xa6\x7b\x16\xbf\xbb\x9e\x8c\xc4\x17\x7c\x43\xca\x53\x6a\x7d\x1e\xc4\x3e\xc3\x6e\x6d\x73\x54\xb4\x91\x68\x26\x02\xda\x1e\xfd\x78\x54\xdb\xa3\x9b\x08\x3b\xbd\xa5\x58\x79\xdc\xe8\x8e\x43\x64\xbf\x44\x8b\x2c\x52\x10\x9a\x54\xa5\x59\x64\x61\xe7\xe1\x87\xe4\x32\xac\x3c\xf4\x34\x9f\xfc\x9a\x6c\x02\x33\x44\x67\x37\x2d\x27\x3d\x10\x1a\x61\x8f\x39\x13\xbf\x75\x97\xcb\x98\xb5\xe9\xd3\x8e\x43\x9e\x78\xa7\x99\x4b\xfa\x4c\x51\x72\x2b\xac\x09\xcc\xbc\x68\xe1\x18\x27\x6b\x79\x7d\x82\x44\x45\xcd\xb1\xf5\x76\x32\xbd\x41\x80\x79\x88\xe2\x79\x90\xfd\x98\x0d\x34\xeb\x57\x2d\x47\x85\xad\xe4\xd9\xd1\x30\xfb\xe4\x84\x7f\x9b\xd9\x73\xf1\xb4\x5b\x38\x18\x95\x2f\x2e\x1d\xe3\x38\x82\xde\xfe\x3e\x1d\xdf\xa0\x75\xe0\xc6\x5e\x80\x7e\x7a\xdf\xc1\x80\x6f\x0b\x22\x7e\xf7\xd3\xfb\x83\xcb\xd8\xda\x8e\x6d\x85\xec\x02\xad\xa4\xdf\x0c\x8f\x2c\x70\x14\x05\x51\x47\x68\x95\x34\x76\x62\xab\x6c\x76\x00\x70\x55\x84\xbf\xa2\xab\x71\x78\x9f\x13\xbc\x1a\x90\x55\xa7\xa8\x75\x33\xaf\x07\x84\x32\x41\xe7\x13\xb1\xaf\x06\xc5\x26\xcc\xfb\x80\x3e\x03\xdc\xf5\xc1\xbe\x1b\xa8\x65\x51\xa8\x0f\x54\x0b\x9d\xf9\x1d\x66\x1d\x61\x4d\x11\xd9\x89\x6b\xaa\xdd\x01\x80\x4d\x53\xfe\x8a\x6c\xe6\x21\xfe\x0a\x6d\xcf\x04\xda\x64\x5e\xf5\x65\x01\xce\x2c\xc3\xb3\x80\xb9\x1c\x2c\x75\xc7\xb9\x35\x5e\xef\xf1\xf9\x12\x7a\xa5\x28\x77\x3e\x3e\xcf\xe3\x1b\xbc\xb5\x7f\x23\xbe\x9b\x02\x1c\xaf\x39\x91\xd0\x76\x07\xcf\xcb\xd0\x96\x74\x69\x0c\x05\xbc\xc3\xbb\x36\x5b\x59\xbc\x43\xaf\xfb\xf5\x8a\x60\x97\x6d\x2c\x4e\xa2\xd7\xdd\x7a\x20\xf8\x05\xbe\x33\x66\xa6\x08\x1f\x92\x36\xed\x6b\xf6\x9a\x9e\x60\x93\x49\x3b\x7f\xf7\x69\x94\x54\x08\x01\xa1\x4c\x59\x8a\x78\xfc\x52\x5a\x5a\x16\x27\x64\x5f\x88\x7a\x3a\xe2\x2f\xd1\x8c\xf9\x03\x51\x99\xa2\xbf\x5c\x3b\xba\xfa\x43\xef\xf1\xbf\xbd\xbc\xfc\x60\x03\x2c\x2f\xc8\x12\xb8\xd8\x6f\x83\xc0\x13\x6f\xc4\x77\x6c\x39\xc7\x38\x11\xb9\x3f\x27\x69\xe9\x6a\xc7\xf2\x1b\x4b\xd4\x45\xd4\xd1\x97\x3f\xbd\xe0\x45\x22\x49\x91\x84\x10\xec\xec\xea\x56\x57\xcb\x9d\xe8\x5a\x09\x7e\x99\xaf\xdb\x51\xb5\x57\x92\x9c\xb5\x87\x2a\x20\x73\x52\x1d\x22\x0b\x3e\xac\x54\x86\xa3\x45\x10\xad\xb3\x75\x1d\xab\x20\x22\x7f\xf1\x1a\x21\x6f\x20\x5e\xcd\x82\x48\xa8\x1a\x30\x16\xac\xc5\xa3\x92\x0c\xff\x8c\x71\xf4\xc0\xab\x44\xd6\xa7\x73\x5e\x76\x98\xd3\x52\x2c\xcf\x45\xe9\x8a\xde\xf5\x14\x22\x0c\x68\x3c\x5b\x93\xe4\x77\x4d\xea\x2e\xd3\x27\x33\xee\x9c\xe9\x60\x19\x05\x71\x38\xe0\xe5\x7a\xd8\xcd\x2f\xfe\x33\x2d\xf9\xd8\x88\x86\x28\xb9\x1a\xd0\xb5\x2e\xb1\x14\xf7\xc5\xf2\xe4\x6a\xe7\x00\x21\xb1\xc9\x9e\x89\x27\x48\x67\x10\xac\xd4\x6f\x90\x4c\xbe\xa0\xc9\x19\x3c\x21\x91\xe6\x57\x61\x9b\x62\x09\x65\x56\x48\x5e\xdc\x32\x16\x55\xb1\x7c\x52\xf1\x3b\x2e\x62\x7e\xb4\x5d\x42\xf9\x4b\xb7\xb9\x7c\xb2\xce\xb6\x89\x84\x65\x39\x38\xb2\xc0\x5d\xb9\xf2\xb3\x54\xcf\x5f\xf9\x3b\x8c\x46\x63\x5c\x07\x3b\x20\x6a\x84\xe9\xca\xca\x7f\xc6\xbb\x1a\x5f\x4f\x2e\x47\xb6\x7a\x09\x9a\x55\x94\x96\x71\x9e\x2f\x4a\xa2\x25\x97\xc5\x89\xd8\xd6\x4f\xcc\x93\x6e\x47\x35\x84\x2a\xb2\xcb\x55\xc3\x65\xa4\x12\x17\x6d\xd1\xd4\x5d\x3c\x01\x98\xba\x8b\x83\x62\x29\x90\x37\x41\x69\xa1\x93\xfa\x88\xcb\xec\x29\xcf\x42\x53\xd7\xdc\x01\xb3\xee\x62\x37\xca\x1a\x74\xec\x04\xb2\xff\x2d\x88\x6a\xb0\xdd\x9e\x80\x6a\x76\x87\x44\x96\xdd\x78\x9a\x62\xe9\xe8\x5d\x8f\x50\xda\x40\xb6\xbc\x04\x1c\x45\x47\xef\x9e\x35\x88\xba\x8b\x5d\x18\x5a\xfa\x7d\x10\xcf\x8d\x69\xd6\x07\x3d\x52\x34\x5a\x32\x55\xc7\x7e\x9c\x75\x8a\xc9\xc5\xe5\x68\xcc\x2b\x54\x94\x77\xe4\x0c\x58\xad\x8b\xd3\xb0\xb6\x83\x25\xd4\x0b\x3f\xb1\x6b\x23\xdf\xe8\x9d\xf8\x60\x71\x28\x01\x35\xf9\x92\x84\xe9\x6f\x21\xba\xc4\x2c\xc3\x4c\xac\x81\xb0\x0a\x6a\x3b\x87\xae\x0e\x14\x77\x38\x64\xa1\x80\xa0\x58\x1a\xde\x4a\x9e\x74\xa8\x3a\x09\x94\xfd\x2e\x5a\x96\xa7\xb7\x48\x4d\x9e\x22\x52\x93\xc3\x46\x6a\xd2\x2e\x52\x93\xd6\x91\x9a\x34\x88\xd4\x06\x1d\xbf\x46\xea\xa4\xb7\x39\x52\x1b\x6c\xb7\x67\xa4\x36\xbb\x43\x22\x4b\x9b\x48\x3d\xe9\x33\x52\x37\x90\xad\x1c\xa9\x27\xcf\x3b\x52\x93\xc3\x45\x6a\x52\x86\xd7\xab\xd3\xb3\xdf\xc6\xd3\x43\x44\x42\xc2\x23\xa1\x26\xdf\x34\x56\x57\x48\x38\xbe\xbe\xbe\xbc\x3e\x98\x80\x8a\x7a\x07\xf9\x26\x07\xcb\x25\x84\x80\x93\xc3\xe6\x12\x06\xac\xd8\x23\x97\xa8\x75\xae\x0e\xb1\xbb\xf8\x6d\xaa\x79\x36\x51\xe7\x4c\x9d\x04\xca\x95\x01\x74\x92\x67\xd2\x47\x76\x43\x9e\x2a\xbb\xe1\xbf\x68\x3d\x7c\x7a\xc3\x3f\x05\x1c\x32\xbf\x91\x9f\x1a\xaa\x13\x9c\x73\xbc\x0e\xa2\x87\x86\x79\x0c\x10\xda\x9d\xc8\x98\xb4\xf9\xba\xb1\xbb\x5f\x72\x63\xb2\xe7\x9e\xd9\x4d\x8d\x33\x24\xd2\xec\x4e\x6f\x8a\x54\xe9\xbd\x13\xf6\x29\xa5\xa0\x57\x14\xb3\x56\xa7\x91\xca\xa8\x8c\x1a\x61\xc4\x89\x3e\xe3\x3c\x08\xb4\x38\xdc\xb6\xaf\xc9\x8b\xf6\xdb\xf6\x4d\xbe\x35\xf6\xbb\xed\x1b\xd2\x27\x40\xdb\x90\x1e\x14\x6c\x81\xbc\x09\x6b\xaf\xa2\x60\x8e\x29\xc5\xb4\x21\xdc\x86\x74\x37\xda\x1a\xb4\x69\x07\xb6\xf2\xf8\x1a\x13\xd0\x66\x4b\xfe\x9f\x17\xe6\x76\x9d\x71\x21\xad\x3e\xd2\xe1\xcb\x02\xbe\x61\x48\xf7\x44\x52\xb3\x3f\x66\xc1\x71\x17\xdc\xdf\x88\xe9\x0e\x7f\xfd\x80\x8d\xf0\x3c\xc2\x8e\x40\xdb\xe2\xca\x36\xb3\xac\x6d\x24\xe5\x87\xc9\xf9\x64\x6a\x87\xd4\xb7\x3f\xc0\xc4\x30\x4b\x38\x68\x2c\x5c\xba\xee\xee\x4f\xb6\xf3\x20\x6a\xb0\xde\x4e\xc5\x08\xbd\x98\xa6\x87\x27\xe4\xc5\xde\x15\x6d\xfa\xc2\x7b\x83\x13\xed\x07\xf7\x21\x3d\x04\xda\x6f\x96\x4f\x80\xf6\x9b\xe5\x41\xd1\x1e\xc8\x9b\xd0\xfe\xa3\x3c\xde\x0a\x2d\xbd\x60\xc6\x4f\x69\x65\x0e\x8b\x9b\x22\xff\x66\xb9\x1b\xf9\x0d\x9a\x7d\x45\xfe\x26\xc8\xbf\x59\x3e\x47\xe4\x37\x0c\xe9\x9e\xc8\x6f\xf6\xcd\x44\x16\x13\xf2\x3f\x15\x4a\x19\x14\xde\x0f\xa5\x36\xcb\xbe\x51\x8a\xb6\x2c\x8f\x0c\x21\xc1\x4b\x6b\x23\x75\x40\xc8\xd5\x47\xf2\x26\xf6\xd5\x64\xc4\xab\xf1\xfc\x65\x5a\x25\x19\xea\xfa\xef\x90\xb8\x75\xc7\xbc\x28\xcc\xcb\x92\x6a\x56\x06\x99\xf4\xb8\x2d\xf4\x50\xaf\x33\xff\x35\x29\x37\x97\xa4\x28\x8e\xd2\x82\xf3\x90\xc6\x70\x2f\x14\x40\x05\x3d\x1b\xd6\x9e\xa7\x5a\x45\x04\xd6\xff\xec\xa1\x65\xb7\x0b\x32\x6f\x58\x14\x9a\x74\xb9\x21\x7f\xb5\xed\x72\x8d\x29\xb8\xae\x5f\x53\xe8\xce\x8b\x42\xf5\x0f\x79\x4f\x74\xb7\xa9\x3a\xf8\xb2\xfe\xd7\xe1\xed\x06\x20\xad\xf8\xff\x49\x0c\x00\x2f\xf4\xdf\x39\x00\x9d\xaa\x4c\x75\x2a\x50\x59\x64\xfa\xea\x49\x4e\x83\x08\x29\xb2\x40\xb1\x8e\x87\x26\x70\x2a\xb7\xfd\x50\xb9\x19\x5f\x77\x3f\x53\x42\x68\x75\x3d\xe9\x81\xca\xc5\xe4\x6c\xdc\x03\x99\x8f\x93\xeb\x69\x0f\x64\xae\xc5\x56\x7e\x57\x2a\xd3\xc9\xf9\x98\x67\x36\x72\x62\xf5\x60\xa3\x53\x41\xaf\xeb\x81\x19\x2a\x42\x74\xaf\x21\xd6\x39\x8b\x4a\x88\x21\xbc\x5c\xcb\x27\x99\xa8\x28\x12\x2a\x95\x6c\x64\xae\x21\xdd\x40\xaa\xbb\x7c\xa0\xc3\x47\xee\xa4\xf2\x4c\x7b\x48\x68\xf4\x61\x9b\x27\x8a\x4b\xf2\x9b\x85\x93\xe4\xe0\xb6\x24\x45\x14\xb9\x10\x3f\x87\x0f\x52\x9a\x84\x91\x3c\x76\x2d\x73\xa0\x9d\x85\xc0\x44\x73\xbc\x0a\x3c\xc8\x21\xf9\x29\x73\x57\xe9\xad\xcc\x51\xae\x30\x80\xba\xcb\x11\x2b\xdd\xcd\x93\xcf\x3e\x3a\x5e\x9c\x3b\x91\xad\xe2\x78\xb7\xb6\xb1\x3b\x53\xba\x0f\xbd\xd5\x69\x60\x76\x62\xcd\xe4\xec\x37\xc1\x7b\xbb\xd5\xe7\x45\xb5\xe0\xb0\x59\x8a\xaf\x22\x96\x0c\xed\x77\xf8\x81\xa7\xed\xf2\x91\x06\x78\xb0\x62\xe0\x71\xba\xdc\x8e\x3f\x27\xf1\x40\x9d\x41\x2a\xd7\x07\x63\xde\xc3\x88\xce\x0d\xa4\x48\x72\x14\x95\x84\xac\x9d\xf9\x2a\x4d\x42\x14\x97\x73\x78\xc8\xfb\x15\x7e\xac\x01\x4f\xed\x5b\x40\xc1\x34\x0f\x51\x87\xf2\xaa\x64\x24\x8e\x49\xe9\x17\x1b\x2d\x92\x84\x94\xbe\x88\x51\xff\x48\xc9\x0b\xc2\xdf\x9b\xf3\x10\x2d\xdc\x85\x53\x08\x9a\x95\xad\xae\xa2\x60\x43\x5c\x1c\xd5\xb5\x6c\x28\x2d\xe4\x6c\x4c\x85\xd4\xd7\xa9\xb8\x7c\xf1\x06\x89\x65\xaa\x50\xad\xe8\x0d\x59\xa9\xa1\x59\x10\x8f\x2f\x88\xd9\x4a\x72\xfd\xf9\xff\x53\xb6\xfc\x15\x7f\x63\xe2\x5c\x19\xc9\x1b\xb8\x0c\x85\x74\x76\xbe\x6a\x92\xd8\x92\x05\xc2\x7f\xa2\xb2\xc3\xba\x88\x1f\xc9\x68\xc0\xe1\xc2\x04\x41\x39\x8a\x75\xed\x13\x30\xdd\x37\x3b\xd1\x4b\x80\x24\x3b\x91\x8b\xe9\xfc\x39\xa0\x5d\x7e\x0f\x43\x8a\xbf\x58\x49\x5f\xf1\xdc\xcb\xf8\x32\x54\x1e\x6a\x6c\x20\x3c\xcc\xf8\xd6\x25\x11\x9e\x33\xf1\xa1\xae\xa7\x9f\xbf\x24\x4e\xd0\x21\x76\x65\xe2\x2d\x37\xf8\x2a\xf7\xfd\x4e\x9e\x16\x03\xee\x74\xea\x91\xa5\x7f\x26\x9f\x4b\x3b\x97\x8e\x22\xcd\x9e\xd3\x68\xab\xa6\x09\x58\xaa\x9d\xb4\xd2\x81\x8e\xf6\x99\x13\x61\x96\x6d\x2d\xc4\xcf\x1e\xdf\xe8\x28\x8d\x56\x89\x3a\xff\x09\x00\x00\xff\xff\x17\x2e\x68\x50\xe0\x67\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26592, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

