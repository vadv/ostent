// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\xff\x73\xdb\xb6\x92\xff\x3d\x7f\x05\x4f\x7d\xef\xe6\xe5\x4d\x25\x5d\x72\xed\x5d\x26\xb5\x3d\xe3\x58\x72\xa2\x69\x6c\xeb\x2c\x39\x77\xfd\xa9\x43\x89\x90\x84\x98\x22\x59\x12\x92\xe3\x6a\xfc\xbf\xdf\x2e\xbe\xf0\x2b\x40\x93\x22\xe5\x3a\x79\xe9\x4c\xc7\x24\x01\xec\x2e\x16\xbb\x9f\xdd\x85\x40\xe6\xe8\xdf\x06\x57\x67\xd3\xdf\xc6\x43\x6b\xc5\xd6\xee\x8b\x93\x23\xfe\xc7\xb2\xe0\x82\xd8\x0e\x5c\xe0\xe5\x9a\x30\xdb\x9a\xaf\xec\x30\x22\xec\xb8\xb3\x61\x8b\xee\x9b\x4e\xba\x69\xc5\x58\xd0\x25\x7f\x6c\xe8\xf6\xb8\xf3\x7f\xdd\x9b\xd3\xee\x99\xbf\x0e\x6c\x46\x67\x2e\xe9\x58\x73\xdf\x63\xc4\x83\x71\xa3\xe1\x31\x71\x96\x24\x33\xd2\xb3\xd7\xe4\xb8\xb3\xa5\xe4\x2e\xf0\x43\x96\xea\x7c\x47\x1d\xb6\x3a\x76\xc8\x96\xce\x49\x97\xdf\xfc\x68\x51\x8f\x32\x6a\xbb\xdd\x68\x6e\xbb\xe4\xf8\x95\x22\xc4\x28\x73\x09\xbf\x86\xbb\xdd\xae\x37\xb0\x99\xdd\xfb\xe0\x47\x0c\x89\x3f\x3c\x58\x70\x05\x24\x8f\xfa\x49\xbf\x93\x23\x97\x7a\xb7\x56\x48\xdc\xe3\x0e\x05\x96\x1d\x8b\xdd\x07\x20\x07\x5d\xdb\x4b\xd2\x0f\xbc\x65\xc7\x5a\x85\x64\x71\xdc\xe9\x2f\xec\x2d\x76\xe8\xe1\xb3\xc2\xd0\x88\xdd\xbb\x24\x5a\x11\xc2\x14\x01\x46\xbe\xb0\xfe\x3c\x8a\xe2\xf1\x70\xdd\xa7\x9e\x43\xbe\xf4\xf0\xa9\xa4\x10\xcd\x43\x1a\xb0\xf4\x90\xcf\xf6\xd6\x16\x4f\x3b\x79\x3d\x5b\x51\x38\x07\x42\x9f\xa3\x7e\x88\x1a\x0e\x09\x5c\xbd\xee\xbd\xea\xbd\x7a\xa3\x1e\xf4\xd6\xd4\xeb\x7d\x06\x9e\x0e\x4c\xbc\xbb\xb6\xa9\x27\xfa\xef\x76\x74\x61\xf5\xa6\xa7\xef\xdf\x0f\x07\x33\xea\x3d\x3c\x40\x3f\x29\x8c\x18\xb1\xdb\x11\x37\x02\x0d\x01\x87\xfe\x9a\xba\xb7\xb2\x91\x37\x78\xce\xc3\x43\x47\x29\xf5\xa8\x2f\x84\x93\xf2\xf7\xa5\x69\x9c\x1c\xcd\x7c\xe7\x5e\x3e\xf4\xec\xad\x35\x77\xed\x28\x3a\xee\xc0\xe5\xcc\x0e\x2d\xf1\xa7\xeb\x90\x85\xbd\x71\x99\xba\x5d\xd0\x2f\xc4\xe9\x32\x3f\xe8\x58\xa1\x0f\xcb\x88\xbd\xe9\x12\x8c\x05\x96\x21\xe6\xe7\xd0\x98\x18\x5a\x04\x4c\x89\xc0\x48\x77\x43\x1d\xd5\x27\xd7\xcb\x09\xfd\xc0\xf1\xef\x3c\xc5\x05\x25\x24\x61\xd2\x99\x0b\xbb\x61\xcc\xf7\xb2\x42\x82\x20\xcb\xa5\x4b\xc0\xee\x5c\xd7\x0e\x22\xe2\xa8\x95\x14\x9d\xa5\x4e\x45\x27\x94\x45\xf4\x52\x8f\xed\x70\x89\x0b\xf5\x83\xa4\x15\x37\xa7\xd8\xf2\xf5\x0e\xec\x98\x6d\x14\x76\x7d\xcf\xbd\xcf\x76\x81\x4e\x53\x21\x47\xa2\x0c\xd0\x39\x0c\x2b\xa1\x84\x76\xd9\x05\xb6\x05\x52\xcf\x66\x64\x5f\x28\x31\xb3\x08\xb6\x45\x9d\x64\xb9\x66\xa1\xed\x81\xca\x73\x8b\xa8\x16\x45\xaa\x55\x76\xca\xac\x84\xea\xda\xb1\xec\x90\xda\x5d\xf2\x05\xb8\x3b\x04\x28\xb3\x70\x43\x62\xef\xcb\x2f\x04\x1a\x0c\xb2\x5f\x49\x70\x28\x4c\xa3\x88\x1e\x47\x7d\x18\x94\x9f\x97\x9d\x99\xd2\xc6\x2d\x4c\x60\x4d\xbc\x8d\xb2\x6f\x71\xcd\xc5\x74\xed\x19\x71\x5d\xe2\xcc\xee\xf3\x2a\xc8\x71\x70\x69\x81\xa4\xb4\x68\x49\x34\x08\x49\x04\xa0\x96\x71\x9b\x78\x78\xb8\xf1\x3c\xea\x2d\x8f\xfa\x2e\x2d\xd2\xad\x30\x1e\x16\xa9\xb0\x22\x80\x52\xf9\x7e\x29\x7d\x0d\x46\x93\xe9\xf5\xe8\x1d\xaa\xcb\x2e\x9a\x46\x41\x8c\xfe\xc6\xcd\x68\x30\xa3\xe3\x64\x99\xf2\x6e\x95\x40\x82\x78\x60\x95\xf8\x5d\x7a\x59\x10\x9a\x64\x57\xf8\xa3\xd1\x35\x32\xa3\x41\x27\x0f\x0d\x9a\x39\xc7\x33\x1e\x8d\x71\xb2\x3a\x05\xe7\x54\x57\xd4\xae\x9a\x9e\xea\xe1\xda\x3a\xce\x56\xce\x1b\x6a\x39\x40\x71\xa5\x62\xae\xc0\xad\xd0\x9a\x9a\xd7\xc7\x53\x9d\xcd\x6b\x96\xa9\xa8\xe6\x7d\xac\x5f\x27\x4d\x43\xf3\xe7\x24\x36\x01\xa3\x6b\x52\x58\xa0\x98\x7c\x45\x32\x12\xae\x04\x35\x0d\x4e\x69\xbd\x22\xa3\xcf\x1b\x3e\x54\xe7\x18\x52\xa7\x5a\x09\xb3\x0e\xa2\xef\x59\x74\x23\x93\xc5\xab\xcb\x90\x2e\x57\xcc\x0c\x35\x65\x66\x9f\xa2\xed\xd2\x88\x75\xa9\x07\x69\x10\x31\x7a\x95\x22\x6d\xd0\xa9\x80\xe7\x1f\x30\x09\xd0\x6b\x0f\x9b\xea\x69\xec\x31\x5e\x41\x64\x62\x15\x44\xed\x72\xda\x2e\x4d\x9c\xb6\xf6\x12\xc0\x9e\x1d\xc2\x14\x8a\x1e\x63\xd9\x73\x46\xb7\xc5\x10\x97\x8b\xc0\x5b\x12\x46\x68\xfd\x86\x18\xbc\x4f\xd8\xc5\x6a\x20\x7a\xdb\xef\xdf\xdd\xdd\xf5\x20\x8e\x86\xf0\x7f\x6f\xee\xaf\xfb\x22\x0f\x87\xac\xd5\x25\x76\x44\xa2\xbe\x6b\x33\x12\xe9\xa2\xca\xd5\x64\x3a\xbc\x9c\xea\x42\x49\x33\xb0\x51\x73\x3d\x08\xe2\x48\xe2\x6d\x40\x4e\x3b\x6a\xe4\xd4\x14\x0c\x7d\x1a\x5e\x4f\x46\x57\x97\x4f\x83\x43\xb9\x70\x9e\xba\x85\x1b\xc0\x0a\x59\x31\xa8\x88\xc4\x6b\x01\x7d\xb6\x6f\x05\xb6\xe3\x40\x2a\x83\xf5\x42\x44\xb6\x30\xef\xfb\x68\xa5\x2d\x13\x42\xff\x2e\x5f\x1a\x20\xed\x35\x59\x43\x9a\x2e\xea\x50\xd1\x71\xe6\xfa\xf3\x5b\xcc\xf7\xbb\x6b\xa7\xfb\x5a\x5d\xf8\x8b\x05\xd4\x5c\xdd\x57\x99\x14\x62\xb7\x63\x64\x1d\xa0\x7e\xad\x0e\x54\x31\x20\x56\xf4\xf6\xad\xb8\xf8\x9d\x93\x01\xea\x1d\xab\x97\x0f\x98\x19\xb9\x32\xec\xfe\x33\x9b\xa1\xa4\xba\x81\x1f\x11\xf7\x55\x01\x9b\xd1\x88\xf3\x59\x8f\x30\x6d\x8b\x8f\xe0\x46\x0a\xfa\xb1\x66\x0c\xf2\x72\x64\xd5\xb1\x16\x7e\x08\x56\xbc\x59\xaf\xef\xe9\x02\xd4\xb9\xa0\xcb\xf9\x8a\xcc\x6f\x67\xfe\x17\xde\xd6\x8d\xb0\x74\xfd\x41\xb5\x95\x24\x7f\x48\x53\x38\x81\x20\xcd\xeb\x49\xf2\x87\xd5\x59\xd8\x2e\x66\x63\xff\xf8\x1c\x41\x39\x25\xec\xeb\xcc\xa5\xb0\x38\xbd\x0f\xd4\x21\x82\xee\xe8\xfc\x25\x94\xde\x02\x83\x54\x39\xa9\x10\x92\x2e\x4a\x52\x49\x49\x69\x6a\xcf\x46\xe7\xbd\x29\x96\xec\xfa\xac\x92\x7a\xc1\x86\x09\x28\xd3\xcf\x35\xaf\xb6\xa4\x45\x54\x78\xc9\x3d\x07\x8c\x15\x75\x1c\xe2\xc5\x48\xc6\xef\x34\xb6\x8f\xba\x7f\xa1\x93\xa4\x6d\x76\xdc\x3c\x8c\xb9\x63\xbc\x7c\x8a\x6f\xbc\x38\x82\xe0\xe3\x6b\x13\x0b\x2a\x78\xe7\x4a\xfe\x34\x4f\x30\x9a\xb5\x62\xb3\xf2\x43\xfa\x27\xfa\xa8\xdb\xc5\xc7\x7a\x04\x4b\xd9\x35\x76\xea\x2e\x43\x7f\x13\x74\xd1\x95\x89\x63\xc0\xa9\x8c\xcb\x80\xdd\xf1\x21\x56\x7c\xd5\x8d\xd6\xb9\x48\x24\x4a\x4b\x43\x50\x2f\xf8\x0e\x10\xe2\xc4\xd4\x5e\x04\xcc\x99\x7a\x86\x38\x9d\x5e\xd4\xdc\xd2\x99\xfb\x7f\xe0\x4a\xd4\xd9\x47\x55\x99\x2a\x78\xd7\x90\x87\x5b\x44\x33\xe1\x5d\x0e\x8d\xf0\xc6\xa9\xe2\x5f\x7b\xcf\x2c\xe7\x97\x42\x06\xcc\x11\x47\xe7\xbc\x02\x2a\x9d\xb0\xb6\x90\x28\x6d\xda\xcb\x7a\x76\xbb\x3b\xca\x56\x59\x65\x5d\x93\x05\x84\xda\x15\x4a\xa9\xc5\xf1\x50\xb4\x73\xfc\x96\x0a\x34\xcb\xd4\x47\x49\x34\xae\x51\xc8\xb8\x31\xd8\x68\x8d\x32\x9d\x62\xd0\x45\x37\x02\x81\xe7\xab\x78\x1f\x69\x86\x3e\x1d\x97\x96\xe7\xd3\xd3\x77\x93\x1e\x3d\x1f\x9f\x9e\xfd\x3a\x9c\x4e\x7a\x37\xd4\x63\x3a\xd7\x14\x74\xed\x64\xd9\x03\x7b\x7e\x4b\x98\xd9\x29\xc6\xa2\x5d\x9f\x03\x98\xb2\x80\xfd\x64\x1f\x5e\x5f\x5f\x5d\xd7\x10\x9d\x84\xa1\x1f\x9a\x25\x1f\xf2\xe6\x56\x04\x57\x89\x71\xb9\xfc\xef\x7e\x9b\x0e\x6b\x88\x3f\xbb\x87\x24\xcc\x28\xfd\x3b\x6c\xad\x2f\x7c\x31\xfb\x32\x56\xe1\x9a\x5d\xaa\xf2\xf0\xa1\x4c\x25\xa5\x1e\x50\x05\x07\x21\xa8\xeb\xd2\xe0\xa3\x35\xc7\x97\x3a\x7c\x12\x31\x9b\x37\x03\x3a\x19\x02\x8c\x54\x3b\x06\xf6\x12\x93\x97\x81\xbf\xa1\x83\xc8\xcd\xcb\xcc\x8c\x65\x3a\xa8\xdf\x03\x31\xe7\x7b\xf1\xf8\xdf\x65\x3a\xc9\xd3\xbe\xc2\xa6\x67\xc9\x12\x25\xba\x97\xb6\x5e\x43\xf5\x29\x6f\x3a\x94\xe6\x25\x8b\x6a\x8a\x7f\xc4\xbb\x33\x7a\x17\xb3\xdd\x5b\xed\x62\x78\x0b\x5a\x17\x2e\x5a\x43\xe9\x09\x04\x1c\x4a\xe7\x82\x43\x35\x95\x97\x03\x52\x46\xe3\x7c\xa6\x7b\x2b\x9c\x8f\xde\x5b\xdf\xba\xed\xf2\xec\x23\xed\x76\xaf\xb6\x38\x7b\xda\x6a\x69\x1e\x6c\xcc\xe5\x52\xdc\x78\xa8\x7a\xe9\x6c\x7c\x63\x2e\x98\x80\xbb\x66\xc9\x61\x48\x85\xc2\x48\x33\xad\x6f\xba\x32\x4a\x56\x6a\x9f\xd2\x48\x2c\x43\x2b\xb5\x91\x35\xf3\x43\x6e\x0b\x3e\x54\x2a\xeb\xaf\xba\x5c\xca\x3a\x53\xce\x2f\xbe\xde\x2a\x4a\xfa\x9c\xa9\x8c\x6a\x77\x6e\xc6\x3a\x0a\xa4\xf8\x1a\x0a\x29\x2e\xe6\xe1\x2a\xa9\x36\xb2\x5a\x5c\xb0\x7a\x4e\x5f\xd7\xdd\xe3\x20\x0b\xac\xf6\x0c\xb0\x30\xf2\x19\xc4\xd6\x27\xde\x89\x74\x4a\x76\x22\x9d\x03\xef\x44\x0e\x4a\x76\x22\x9d\x6a\x3b\x91\x83\x3a\x3b\x91\xc5\xb9\x7e\xd3\xf1\xd6\x69\xb2\x13\x39\xf8\xbe\x13\xf9\x95\xef\x44\x0e\x4a\x77\x22\x75\xfe\xb5\xf7\xcc\x8c\x11\x74\xf0\x55\xec\x44\x0e\x9e\xe1\x4e\xa4\x53\xbe\x9b\x37\x10\xc5\xa7\x73\x3e\xba\xbc\x1a\x54\xdf\x0e\x73\x60\x62\xbe\x53\xb2\x1f\x36\xe2\xcd\x4d\x76\xf3\x9c\x4a\xbb\x79\xb1\xfc\xb5\x76\xf3\x9c\xaf\x6d\x37\x2f\xd6\x77\x4a\x3b\x86\xcd\x0d\xdd\x8a\x9a\x76\x37\x06\xfb\xed\x6e\xe4\x59\x94\x6e\x6f\x54\xb5\xb0\x54\xea\xa5\x66\xbb\x67\xfe\xa5\x86\x37\xde\x51\x72\x72\x3b\x4a\x15\x94\xfe\xf8\x8e\x52\x53\x9d\x57\xd8\x51\xaa\xe8\x14\x19\x8d\x37\xd9\x51\x72\x9e\x7e\x47\x29\x7b\xe2\x40\xdd\x54\x39\x56\xfc\xd8\x99\x02\x5d\x2e\xfd\x26\x77\x88\xe0\x89\xf7\xad\x82\xc8\x9c\x5b\xab\xb6\x43\xe5\xd6\xe3\x89\x39\xb7\xd6\x9d\xb8\x3a\x19\x87\xfe\x9c\x44\x91\x0e\x3f\x0b\x89\x74\x71\x62\xdf\x74\x22\x1d\xaf\xd5\x3e\x89\x34\x5f\x88\xfd\x12\x69\x71\x94\xcf\xb4\x65\x65\x61\x82\xa5\x3b\x39\xa8\x31\xef\x16\x92\xa4\xf1\xa4\x8d\x24\xe9\xf9\xa7\xfd\xe6\x1d\x35\xd3\x41\x45\x41\xf4\xf0\xc5\x80\x0b\xee\x69\x99\x2a\x02\xa3\x25\x8e\x27\x9e\xcf\x06\x64\x1e\x12\x9b\x57\x02\x65\x45\x41\x10\x21\x8f\x16\x67\xd9\xad\x35\xc1\xb5\x1f\x92\x3d\x27\x98\x94\x3d\xe5\xf3\x43\x16\x87\x2b\x7c\xc6\x93\xc0\xdd\x44\x53\xf0\xcb\xc3\x94\x3d\x87\xdc\xa2\x0b\xa2\x9a\xf0\x56\x13\xd8\xe2\x9c\x25\xd8\x37\x5d\x09\xa2\xef\x89\xca\x61\x12\x95\xed\xd2\x9c\xa8\xa8\xb6\x43\x25\x2a\x9f\xde\x9b\x13\x15\xdd\x81\xed\x93\x4f\xe2\xac\xb6\xb5\x74\xfd\x19\xbe\x72\xc8\x6c\xb6\xa9\x92\xb4\x14\x27\xf9\x4d\x27\x2d\xf1\xba\xed\x93\xb4\xf0\x45\xf9\x06\x92\x96\x4f\xef\xff\xd5\x93\x16\xd3\x3b\x0f\x82\xe8\x41\x92\x96\xe7\x16\xd9\xb6\x75\x7d\xa0\xa6\xf5\xc7\x91\x6d\xbb\xdc\x33\xb2\x6d\x97\xcf\x20\xb2\x95\xbe\xfb\xac\x06\x6c\xed\xd0\x42\x75\x59\xc7\x96\xcc\x7d\x1e\x1e\x7e\xc9\xbf\x84\x2c\xdf\x3d\xc6\xd7\x91\xf9\x9b\xeb\xbb\x5d\xff\x9f\x2f\xfe\xd9\x47\x4f\x13\x13\x2e\x39\xb4\x0f\x0a\xd0\x46\xbb\x9c\x03\x98\x82\x9a\x14\xc1\xb6\x70\xa5\xcf\xb0\xef\x29\x63\xa1\x5c\xe2\x8f\xd4\xbb\x8d\x7a\x63\x3b\xb4\xd7\x51\xef\xdd\xd5\xd5\xc7\x5e\xb4\xf2\xef\x04\xe2\x01\x6f\xab\x10\xc8\xe2\x2d\xcc\x42\x0b\xc8\x09\x2c\x84\xf3\x7e\x00\x30\xa9\xce\xe5\xe1\x41\xe9\xf2\x82\x40\x36\x7a\xaf\x22\x57\x2a\x74\x24\xe6\x9c\x79\x5d\x42\xe1\xf9\x5e\x53\x83\x39\xe4\x2c\xba\x93\x48\x22\x00\x7c\xb7\xe3\xca\x7d\x78\xa8\x74\x60\x02\xba\xe3\xdf\xd3\x39\xbe\x2f\x63\x92\xe4\x7f\x36\x24\xbc\x8f\xf9\x98\x43\xa1\x94\x48\x1a\x5f\xb4\x99\xad\x29\x33\xe4\x4d\xa5\x08\x5c\x09\x77\xc5\xeb\x3e\xfc\x3e\x9f\x47\x55\xb5\x1b\x90\x97\x70\xb5\xc6\x06\x22\x6c\x24\x0d\xca\xb5\x4c\x44\x12\x4c\xa9\x4a\x8a\xa4\x20\xd7\x6e\x20\x69\x74\x67\x07\xed\x8a\x8a\x14\xf9\x18\xba\x18\xc8\x5a\x6b\xef\xe9\x11\x0b\xa9\x15\x67\x58\xe3\x07\xf4\x72\x9b\x28\x43\xde\x24\x0f\x28\x4a\x3e\x1e\x5e\x8f\xae\x06\x3d\xd9\x85\x8b\x5f\xc0\xd2\x54\xd8\xca\x80\xa9\xbc\xcc\x7b\x72\x4d\xeb\x32\x7b\x6c\xd9\x9c\x60\x68\x3a\x9c\x68\x84\xe2\x17\x27\x32\xa4\x55\x40\xe7\xb9\x4b\x03\x44\x66\xe1\xbc\x00\xfc\xa3\x01\x4e\x00\x2c\x20\x0d\x1a\x8d\x12\x5b\x90\xe6\x73\xf4\xe5\xcc\xf5\x23\xe0\xcf\xf9\x20\x43\x81\xf9\xc0\xf0\xdc\x0f\x25\xc7\x34\x43\x14\x0b\x5b\x2f\xfe\x77\x82\x1f\xfc\x10\x3d\x5e\x88\xba\x3c\x5b\x85\xd7\x99\x6c\xb0\x81\xaa\x2d\xea\x60\x1f\x9e\x58\xe2\x1d\x14\x65\x22\x55\x14\xf9\x22\xff\x38\xc7\x6e\x07\x75\xc8\x92\x58\x7f\xa3\x3f\x5a\x7f\x9b\xe3\xde\xc5\xdb\x63\x95\x4c\x8c\x6f\x60\x5d\x23\x14\x80\x85\xbb\xdd\x2d\xb9\xb7\xf8\xc1\x14\x20\x35\xbb\xef\x5e\x76\x44\xff\xde\xa5\x90\xf6\x88\x39\xca\x92\x93\xf4\xd8\xf2\xfc\xbb\xd0\x96\x08\x05\xe2\xc7\x23\x8e\xfa\xcc\x31\x8e\x52\x01\x90\xe7\x24\x89\xaa\xd4\xf0\x9b\x88\x84\x67\xe2\x59\x62\x49\x49\x53\x26\xfb\x38\x69\xc2\x68\x72\x1f\x49\x3e\x56\x9e\x11\x34\xb5\xc7\x67\xe4\xb8\xc4\x30\x21\x6c\x32\x30\xea\xb3\x30\x65\x11\xd9\x3f\x55\xec\x43\xb8\x17\x2e\x2e\x5e\xc4\x42\xe3\xcd\x2b\x2b\x62\x90\x0b\x91\x24\x13\x84\x79\xa5\x3e\xd8\x03\x9c\x15\x5c\xb0\x55\x1a\x49\xe2\x3b\x6c\x78\xc4\x1c\x78\x37\x5c\xb0\xcc\x27\x40\x36\x1e\xcd\x14\x55\x27\x7f\xcf\xe5\x92\xfb\x70\x81\xd5\x3a\x3c\x13\x5c\xaa\x26\x5c\xfa\x52\xab\xfc\xa9\xfa\x02\x0e\x4b\x3e\x81\xf3\xc8\xa9\x2f\xee\xee\x02\x2c\x59\x92\xbb\xf2\x05\xac\x03\x1c\xea\xe7\xb4\x9a\xe8\xe1\xd0\xe8\x36\x41\x8e\xc1\x39\x27\x52\x40\x0f\xf5\x4b\x9f\x40\x10\x87\x86\xfc\x2b\x29\x62\x74\x6f\x40\xc3\x4b\xfe\x4d\x94\x9c\x1b\xe5\x20\xa4\x44\x09\x1c\x49\xff\x81\x7f\xac\x57\xaf\x91\x5b\x57\xb0\x73\xc8\x36\xc3\x88\x6c\x91\xd1\x4b\x2d\x0a\xed\xc5\xed\xbf\xd2\xcc\xb4\xb3\xd2\x33\x2b\x20\x04\xb8\x3d\x1f\x75\xba\xb5\xa9\x5b\x6f\x08\x78\x12\xac\xf0\xbf\x7b\xb3\x28\xf8\xe5\x28\xda\x04\x55\x82\xec\x26\x22\x01\x09\xe7\x50\x32\xc2\x4c\x92\x1b\x2b\xa6\x38\x16\x0f\xb8\xf4\x8a\x66\x25\xa8\x53\x52\x4d\x7d\x48\xbf\x53\x13\x69\x04\x5a\xd9\x9f\x7a\x1b\x22\x97\x56\x2f\x6c\x85\xef\xe7\xe3\x27\xb8\x3a\x96\xba\xd2\x65\x38\xc3\xcb\x9b\x8b\x9e\xb3\xb0\x3a\xe7\x13\xcc\x45\x0d\xfb\x33\xb5\xa9\x5d\x8c\xdb\xa4\x76\xfa\xe9\x74\xf4\xb1\x35\x6a\x37\x93\xe1\xa0\x35\x62\xd3\xab\xe9\x29\x8a\xd6\x08\xf4\x32\x50\xd5\x06\xf2\xc9\x93\x1b\x0d\xa1\x4f\x50\xd1\x60\x9f\x3c\x57\xf2\x64\xe0\x27\xf9\x3d\x11\xfa\x19\xb8\xed\x05\x7f\x23\x28\x56\x48\xcd\x21\x9b\xd6\xf1\x0f\x49\x36\x06\x40\x71\x16\xad\x3d\x04\xcc\x9c\x2e\x6a\x9e\xbc\xc5\xc7\x5d\x73\x1f\xb4\x3b\x19\xf0\x4f\x23\x1a\xd2\xa0\x42\xef\x0b\x7f\xe3\x31\xe2\x94\x76\xd7\xee\x9a\x9f\xf0\x48\xb7\xc7\x38\x0c\x77\x7b\x0c\xe3\xf1\xa8\xb5\xb4\x2b\x0b\x19\xcd\x21\x88\xee\x97\x7c\xd1\x45\x82\x3f\x23\x43\xea\x45\x33\xa9\x97\x74\x51\xba\xe8\x65\x50\xa7\x3e\xcc\x50\x95\xf6\x64\x29\x56\xf7\x77\x18\x30\x20\x2e\xb3\x47\x5e\xed\x21\x57\x1b\x56\x67\x4c\x3d\x0e\x59\xe2\x8d\x9c\x96\xb6\x99\xb6\x64\x0a\xae\x11\x38\x5d\xb8\xb0\x8d\x7e\x5a\x2c\x57\x2c\x79\xb2\xef\xdd\x68\x3a\xb1\x00\xee\xac\x08\x7f\x2c\x4b\x7f\xf6\x72\xe4\x95\x17\x31\x47\xb9\xcf\xf3\xcc\x8e\xfa\xe9\x27\x27\xf8\xbd\xab\x3d\x6b\xa9\xc7\x85\x83\x55\xf9\xcb\xa5\x63\x08\x21\x16\x3f\xdd\x68\xad\x7d\x67\xe3\xfa\xd6\x4f\xef\x1b\x28\xf0\x5d\x4e\xc4\xbf\xff\xf4\xfe\xe0\x32\xd6\xd6\x63\x5d\x21\x9b\xa0\x2a\x6d\x37\xaf\x8b\xdf\xf1\x6e\x84\xaa\x82\x86\x06\x56\xe5\xfb\xe7\xed\xe3\xaa\x24\xfc\x1d\x58\x1f\x5f\xd9\xe7\x84\xac\x06\x50\x55\x89\x69\x99\xd3\xb5\x00\x4e\x26\xd4\x7c\x22\xf6\x7a\x3c\xac\xc2\xbc\x0d\xd4\x33\x20\x5d\x1b\xec\x9b\xe1\x59\x1a\x80\xda\x00\x34\xf5\xad\x90\x46\x88\x26\x89\x68\x20\x4d\x7d\xca\xa4\x7d\x4c\x53\x94\xbf\x83\x5a\x85\xd5\xfd\x8e\x6a\xcf\x04\xd5\x44\x36\xf5\xd7\x62\x9b\x59\x86\x67\x81\x70\x19\x44\x6a\x0e\x71\x6b\xb2\xde\xe3\xe7\x4b\xfc\xb9\x39\x06\xb8\x8b\xe1\x45\x01\xda\xf0\x73\x9d\x02\xd4\x6e\x29\x7e\xf3\x1d\x47\xf4\x7e\xa5\x28\x54\x0e\xd5\x52\x2d\x15\x51\x00\x07\x9c\xd7\xd9\xb6\xc2\x01\xad\x6e\xda\x4b\x82\x4d\xb6\xac\x90\x44\xab\x5b\xf6\xf1\xcf\xf8\x4f\xfa\x3b\x63\xca\x3b\x70\x49\xea\xf4\x2f\xd9\x57\x7a\x82\x0d\x25\x65\xf7\xcd\x3d\x28\x88\x6a\x3a\x50\x10\xfa\xf3\xc4\x7b\xc6\x13\xce\xb1\xe0\x41\x81\xca\x0a\x02\x8a\xfe\x83\x83\x7a\xe3\xd1\x00\x97\xd1\x5b\x96\x1c\x04\x90\x26\x66\x81\x8d\xa9\x31\xd5\x1c\x25\x1e\x71\x93\x1b\x21\x9b\x53\xff\xd5\xc9\x45\x82\x08\x3c\x27\xd4\xce\x42\xde\xe3\x2f\xd3\x15\x13\x93\x64\x56\x21\xf5\x43\xca\xee\x6b\x0e\xbb\xa4\xf3\x8a\xb0\x11\x0f\x99\xd0\x3f\xeb\x0e\xb9\x26\x11\x75\x88\x57\x92\x05\x21\x6c\xa8\x6d\xdd\x13\x35\x6c\x2a\xbf\x2f\x5f\xfe\x5b\x41\xad\x05\xf8\x89\x2f\x00\xe6\x80\x65\x0b\x90\xcf\x0c\x1b\xe1\x90\x7a\xed\x42\x0b\x43\xaf\x9f\xf0\x47\xc3\x20\xb2\x3a\x30\xd3\x56\x7e\x49\x43\x5a\x37\x6d\xd2\x9a\x0c\xaf\xdb\xfa\x01\x92\xcf\xf3\x7a\xd4\x1a\xad\xcb\xd1\xd9\xb0\x35\x62\x9f\x46\xd7\xd3\xd6\x88\x5d\x0f\x27\xad\xd1\x9a\x8e\x2e\x86\x78\xc8\x55\x38\x62\x6b\xba\x3b\xe5\x54\x9b\xfe\xde\x2a\x43\x4a\xf3\xd8\xa4\xce\x2b\xca\x63\xd2\x10\x82\xe4\x37\xa0\xd0\x27\xad\x9e\x3c\x3a\x27\x8f\xbd\xa6\xae\xbb\xd1\xda\x92\x5d\xc5\x83\x8e\x8c\x38\x99\x7f\x43\x28\xd5\xdf\x76\x1c\xf5\x19\xfc\x13\xf9\x32\x45\x9c\x03\x9f\xc4\x07\x01\xe3\xa3\x78\xfc\x04\x26\xbe\x10\x15\xfa\x6e\xcc\x48\x1c\xe3\x4b\x9d\x28\xef\x58\xa0\x9f\x39\x59\xf9\xae\x43\xc2\x63\x08\xa6\xe3\xe4\x96\x1f\xed\x83\x84\x8c\xfa\x0e\xc2\x97\x38\x20\x99\x7a\xf8\xc9\x76\x37\xf1\xd3\x17\x5c\xdf\x9a\x03\x83\x75\x4f\x36\xa6\x32\x42\x18\x2d\x0f\x99\xf5\xe2\x23\x9a\xf1\x69\x42\xce\xfd\xe1\x41\x1d\x43\xaa\xc1\x61\xbb\xe4\x5b\x18\x1c\x3e\x43\x0b\x32\x01\x7c\x4f\x40\x3c\x8a\xa3\x82\xef\x22\xd5\xe3\xce\xcf\x71\x00\x91\xff\x36\x80\x78\xd5\x89\x7f\x62\xd7\x08\xe7\x15\x24\x88\xf3\x19\x99\xb0\xac\xed\xf9\x2a\x49\x58\x24\x97\x0b\x78\x88\xe3\x0a\x89\x8b\xfc\xc7\x31\x64\xf6\xb2\xd9\xf0\xb8\x83\x24\x7a\x37\x3c\xb3\xd0\x65\x15\x55\xe3\xd9\x7f\x27\xe4\xf3\x84\x5f\x9a\x73\x16\x4c\xb7\xb1\xdb\xa5\x9d\x0b\xb0\xda\x5e\xe3\xd0\xdf\x52\x87\x84\x65\x3d\xab\x49\xfb\x26\x91\x16\x5f\x3b\x23\x69\x71\xe5\xe5\x04\x9f\x97\x8a\x5e\x8d\xd5\xcf\xff\x91\xf0\x5a\x50\x97\x04\x36\x5b\x69\xd8\xc9\xb5\xc3\x1e\xbf\x63\x97\x47\xa3\x7e\x05\x6b\x91\xdf\x9d\xa9\x90\xff\x1a\x5f\xa6\x49\x1b\xae\xf3\xd2\x00\xc6\x39\x07\xb1\x32\xa4\xcb\xfa\xc7\x58\xba\x6f\x4a\xa3\xde\xb7\x89\x53\x1a\xf1\xf6\x4e\xf6\x9f\xa3\x68\x52\x66\xd1\x7c\x21\x94\x34\x61\xee\x66\x6c\x0c\xa4\xa9\x1a\x3b\x70\xb3\x33\xb6\x3a\x34\x24\x73\xc6\x5f\x2a\x69\xa9\xaa\x8a\xad\xa1\x41\xe8\xca\xc5\xac\x62\xb0\x29\x0f\x54\x8d\xc3\x54\xfa\x25\x81\x9a\x21\x8a\x7f\x9a\x45\xbc\x23\x21\xed\x3d\xf5\x01\x19\xf1\x3c\xfe\x5e\xcc\x98\x87\xa9\x97\xf8\xfa\xea\x16\xa3\x05\x1f\x2c\x1e\xc6\xb6\x29\x26\x53\x39\x48\xa5\xd2\x15\x34\xd5\x55\xe6\x15\x1d\x71\x54\x03\x78\x9c\xba\x74\xe9\xc9\x43\xd0\x82\x81\xfc\x60\x12\xb4\xe1\xdb\x1c\x99\x43\xf3\x2a\xba\xc9\xf3\xd2\xa9\x93\xf2\x85\x13\xd6\xbd\x33\x3b\x24\x2c\x77\xba\x3a\x7b\x9e\xda\x7e\xa1\xf6\x14\xd4\x74\xfe\x3f\x00\x00\xff\xff\x2d\x87\xb8\xea\xb6\x74\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 29878, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

