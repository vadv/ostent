// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x73\xdb\x46\x92\xff\xdf\x9f\x02\x87\xec\x5e\xad\xb7\x96\xe4\xd9\x97\xbd\x4d\x39\x92\xaa\x64\x91\xb2\x59\xb1\x24\x96\x48\xe9\x2e\x7f\xa5\x40\x62\x48\x8e\x05\x02\x08\x30\xa4\xac\xb0\xf4\xdd\xaf\x7b\x1e\x78\x0e\x20\xbc\xa8\xc8\x5e\xa7\x2a\x25\x10\x33\xd3\xdd\xd3\xd3\xfd\xeb\xee\xc1\x00\x3e\xfa\x8f\xe1\xd5\xd9\xec\xd7\xc9\xc8\x58\xb3\x8d\xf3\xea\xe4\x88\xff\x31\x0c\xb8\x20\x96\x0d\x17\x78\xb9\x21\xcc\x32\x16\x6b\x2b\x08\x09\x3b\x36\xb7\x6c\xd9\xfb\xc9\x4c\x36\xad\x19\xf3\x7b\xe4\xf7\x2d\xdd\x1d\x9b\xff\xd7\xbb\x39\xed\x9d\x79\x1b\xdf\x62\x74\xee\x10\xd3\x58\x78\x2e\x23\x2e\x8c\x1b\x8f\x8e\x89\xbd\x22\xa9\x91\xae\xb5\x21\xc7\xe6\x8e\x92\x7b\xdf\x0b\x58\xa2\xf3\x3d\xb5\xd9\xfa\xd8\x26\x3b\xba\x20\x3d\xfe\xe3\x1f\x06\x75\x29\xa3\x96\xd3\x0b\x17\x96\x43\x8e\xdf\x28\x42\x8c\x32\x87\xf0\x6b\xf8\xb5\xdf\xf7\x87\x16\xb3\xfa\x1f\xbd\x90\x21\xf1\xc7\x47\x03\xae\x80\xe4\xd1\x20\xee\x77\x72\xe4\x50\xf7\xce\x08\x88\x73\x6c\x52\x60\x69\x1a\xec\xc1\x07\x39\xe8\xc6\x5a\x91\x81\xef\xae\x4c\x63\x1d\x90\xe5\xb1\x39\x58\x5a\x3b\xec\xd0\xc7\x7b\xb9\xa1\x21\x7b\x70\x48\xb8\x26\x84\x29\x02\x8c\x7c\x61\x83\x45\x18\x46\xe3\xe1\x7a\x40\x5d\x9b\x7c\xe9\xe3\x5d\x49\x21\x5c\x04\xd4\x67\xc9\x21\x9f\xad\x9d\x25\xee\x9a\x59\x3d\x1b\x61\xb0\x00\x42\x9f\xc3\x41\x80\x1a\x0e\x08\x5c\xbd\xed\xbf\xe9\xbf\xf9\x97\xba\xd1\xdf\x50\xb7\xff\x19\x78\xda\x30\xf1\xde\xc6\xa2\xae\xe8\xbf\xdf\xd3\xa5\xd1\x9f\x9d\x7e\xf8\x30\x1a\xce\xa9\xfb\xf8\x08\xfd\xa4\x30\x62\xc4\x7e\x4f\x9c\x10\x34\x04\x1c\x06\x1b\xea\xdc\xc9\x46\xde\xe0\xda\x8f\x8f\xa6\x52\xea\xd1\x40\x08\x27\xe5\x1f\x48\xd3\x38\x39\x9a\x7b\xf6\x83\xbc\xe9\x5a\x3b\x63\xe1\x58\x61\x78\x6c\xc2\xe5\xdc\x0a\x0c\xf1\xa7\x67\x93\xa5\xb5\x75\x98\xfa\xb9\xa4\x5f\x88\xdd\x63\x9e\x6f\x1a\x81\x07\xcb\x88\xbd\xe9\x0a\x8c\x05\x96\x21\xe2\x67\xd3\x88\x18\x5a\x04\x4c\x89\xc0\x48\x67\x4b\x6d\xd5\x27\xd3\xcb\x0e\x3c\xdf\xf6\xee\x5d\xc5\x05\x25\x24\x41\xdc\x99\x0b\xbb\x65\xcc\x73\xd3\x42\x82\x20\xab\x95\x43\xc0\xee\x1c\xc7\xf2\x43\x62\xab\x95\x14\x9d\xa5\x4e\x45\x27\x94\x45\xf4\x52\xb7\xad\x60\x85\x0b\xf5\x83\xa4\x15\x35\x27\xd8\xf2\xf5\xf6\xad\x88\x6d\x18\xf4\x3c\xd7\x79\x48\x77\x81\x4e\x33\x21\x47\xac\x0c\xd0\x39\x0c\x2b\xa1\x84\x76\xd9\x03\xb6\x39\x52\x2f\x66\xe4\x40\x28\x31\xb5\x08\x96\x41\xed\x78\xb9\xe6\x81\xe5\x82\xca\x33\x8b\xa8\x16\x45\xaa\x55\x76\x4a\xad\x84\xea\x6a\x1a\x56\x40\xad\x1e\xf9\x02\xdc\x6d\x02\x94\x59\xb0\x25\x91\xf7\x65\x17\x02\x0d\x06\xd9\xaf\x25\x38\xe4\xa6\x91\x47\x8f\xa3\x01\x0c\xca\xce\xcb\x4a\x4d\x69\xeb\xe4\x26\xb0\x21\xee\x56\xd9\xb7\xb8\xe6\x62\x3a\xd6\x9c\x38\x0e\xb1\xe7\x0f\x59\x15\x64\x38\x38\x34\x47\x52\x5a\xb4\x24\xea\x07\x24\x04\x50\x4b\xb9\x4d\x34\x3c\xd8\xba\x2e\x75\x57\x47\x03\x87\xe6\xe9\x56\x18\x0f\x8b\x94\x5b\x11\x40\xa9\x6c\xbf\x84\xbe\x86\xe3\xe9\xec\x7a\xfc\x1e\xd5\x65\xe5\x4d\x23\x27\xc6\x60\xeb\xa4\x34\x98\xd2\x71\xbc\x4c\x59\xb7\x8a\x21\x41\xdc\x30\x4a\xfc\x2e\xb9\x2c\x08\x4d\xb2\x2b\xfc\xd1\xe8\x1a\x99\x51\xdf\xcc\x42\x83\x66\xce\xd1\x8c\xc7\x13\x9c\xac\x4e\xc1\x19\xd5\xe5\xb5\xab\xa6\xa7\x7a\x38\x96\x8e\xb3\x91\xf1\x86\x5a\x0e\x90\x5f\xa9\x88\x2b\x70\xcb\xb5\x26\xe6\xf5\xe9\x54\x67\xf3\x9a\x65\xca\xab\xb9\x89\xf5\xeb\xa4\x69\x69\xfe\x9c\xc4\xd6\x67\x74\x43\x72\x0b\x14\x91\xaf\x48\x46\xc2\x95\xa0\xa6\xc1\x29\xad\x57\xa4\xf4\x79\xc3\x87\xea\x1c\x43\xea\x54\x2b\x61\xda\x41\xf4\x3d\xf3\x6e\x54\x64\xf1\xea\x32\xa0\xab\x35\x2b\x86\x9a\x32\xb3\x4f\xd0\x76\x68\xc8\x7a\xd4\x85\x34\x88\x14\x7a\x95\x22\x5d\xa0\x53\x01\xcf\x3f\x60\x12\xa0\xd7\x1e\x36\xd5\xd3\xd8\x53\xbc\xfc\xb0\x88\x95\x1f\x76\xcb\x69\xb7\x2a\xe2\xb4\xb3\x56\x00\xf6\xec\x10\xa6\x90\xf7\x18\xc3\x5a\x30\xba\xcb\x87\xb8\x4c\x04\xde\x91\x20\x44\xeb\x2f\x88\xc1\x4d\xc2\x2e\x56\x03\xe1\xbb\xc1\xe0\xfe\xfe\xbe\x0f\x71\x34\x80\xff\xfb\x0b\x6f\x33\x10\x79\x38\x64\xad\x0e\xb1\x42\x12\x0e\x1c\x8b\x91\x50\x17\x55\xae\xa6\xb3\xd1\xe5\x4c\x17\x4a\xda\x81\x8d\x9a\xeb\x41\x10\x47\x12\xef\x02\x72\xba\x51\x23\xa7\xa6\x60\xe8\x76\x74\x3d\x1d\x5f\x5d\x3e\x0f\x0e\x65\xc2\x79\xe2\x27\xfc\x00\xac\x90\x15\x83\x8a\x48\xbc\x16\xd0\x67\xfb\x86\x6f\xd9\x36\xa4\x32\x58\x2f\x84\x64\x07\xf3\x7e\x08\xd7\xda\x32\x21\xf0\xee\xb3\xa5\x01\xd2\xde\x90\x0d\xa4\xe9\xa2\x0e\x15\x1d\xe7\x8e\xb7\xb8\xc3\x7c\xbf\xb7\xb1\x7b\x6f\xd5\x85\xb7\x5c\x42\xcd\xd5\x7b\x93\x4a\x21\xf6\x7b\x46\x36\x3e\xea\xd7\x30\xa1\x8a\x01\xb1\xc2\x77\xef\xc4\xc5\x6f\x9c\x0c\x50\x37\x8d\x7e\x36\x60\xa6\xe4\x4a\xb1\xfb\xef\x74\x86\x92\xe8\x06\x7e\x44\x9c\x37\x39\x6c\x46\x23\xce\x66\x3d\xc2\xb4\x0d\x3e\x82\x1b\x29\xe8\xc7\x98\x33\xc8\xcb\x91\x95\x69\x2c\xbd\x00\xac\x78\xbb\xd9\x3c\xd0\x25\xa8\x73\x49\x57\x8b\x35\x59\xdc\xcd\xbd\x2f\xbc\xad\x17\x62\xe9\xfa\x83\x6a\x2b\x49\xfe\x90\xa6\x70\x02\x41\x9a\xd7\x93\xe4\x77\xc3\x5c\x5a\x0e\x66\x63\x7f\xfb\x1c\x42\x39\x25\xec\xeb\xcc\xa1\xb0\x38\xfd\x8f\xd4\x26\x82\xee\xf8\xfc\x35\x94\xde\x02\x83\x54\x39\xa9\x10\x92\x2e\x4b\x52\x49\x49\x69\x66\xcd\xc7\xe7\xfd\x19\x96\xec\xfa\xac\x92\xba\xfe\x96\x09\x28\xd3\xcf\x35\xab\xb6\xb8\x45\x54\x78\xf1\x6f\x0e\x18\x6b\x6a\xdb\xc4\x8d\x90\x8c\xff\xd2\xd8\x3e\xea\xfe\x95\x4e\x92\xae\xd9\x71\xf3\x28\xcc\x1d\xa3\xe5\x53\x7c\xa3\xc5\x11\x04\x9f\x5e\x9b\x48\x50\xc1\x3b\x53\xf2\x27\x79\x82\xd1\x6c\x14\x9b\xb5\x17\xd0\x3f\xd0\x47\x9d\x1e\xde\xd6\x23\x58\xc2\xae\xb1\x53\x6f\x15\x78\x5b\xbf\x87\xae\x4c\xec\x02\x9c\x4a\xb9\x0c\xd8\x1d\x1f\x62\x44\x57\xbd\x70\x93\x89\x44\xa2\xb4\x2c\x08\xea\x39\xdf\x01\x42\x9c\x98\xda\x8b\x80\x39\x53\xb7\x20\x4e\x27\x17\x35\xb3\x74\xc5\xfd\x3f\x72\x25\xea\xec\xa3\xaa\x4c\x15\xbc\x6b\xc4\xc3\x2d\xa2\x99\xf0\x2e\x9b\x86\xf8\xc3\xae\xe2\x5f\x8d\x67\x96\xf1\x4b\x21\x03\xe6\x88\xe3\x73\x5e\x01\x95\x4e\x58\x5b\x48\x94\x36\x35\xb2\x9e\xfd\xfe\x9e\xb2\x75\x5a\x59\xd7\x64\x09\xa1\x76\x8d\x52\x6a\x71\x3c\x10\xed\x1c\xbf\xa5\x02\x8b\x65\x1a\xa0\x24\x1a\xd7\xc8\x65\xdc\x18\x6c\xb4\x46\x99\x4c\x31\xe8\xb2\x17\x82\xc0\x8b\x75\xb4\x8f\x34\x47\x9f\x8e\x4a\xcb\xf3\xd9\xe9\xfb\x69\x9f\x9e\x4f\x4e\xcf\x7e\x19\xcd\xa6\xfd\x1b\xea\x32\x9d\x6b\x0a\xba\x56\xbc\xec\xbe\xb5\xb8\x23\xac\xd8\x29\x26\xa2\x5d\x9f\x03\x14\x65\x01\xcd\x64\x1f\x5d\x5f\x5f\x5d\xd7\x10\x9d\x04\x81\x17\x14\x4b\x3e\xe2\xcd\x9d\x08\xae\x12\xe3\x72\xf9\xdf\xff\x3a\x1b\xd5\x10\x7f\xfe\x00\x49\x58\xa1\xf4\xef\xb1\xb5\xbe\xf0\xf9\xec\xab\xb0\x0a\xd7\xec\x52\x95\x87\x0f\x65\x2a\x09\xf5\x80\x2a\x38\x08\x41\x5d\x97\x04\x1f\xad\x39\xbe\xd6\xe1\x93\x88\xd9\xbc\x19\xd0\xa9\x20\xc0\x48\xb5\x63\x60\x2f\x31\x79\x19\xf8\x5b\x3a\x88\xdc\xbc\x4c\xcd\x58\xa6\x83\xfa\x3d\x90\xe2\x7c\x2f\x1a\xff\x9b\x4c\x27\x79\xda\x97\xdb\xf4\x2c\x59\xa2\x58\xf7\xd2\xd6\x6b\xa8\x3e\xe1\x4d\x87\xd2\xbc\x64\x51\x4d\xf1\x4f\x78\x77\x4a\xef\x62\xb6\x8d\xd5\x2e\x86\x77\xa0\x75\xe1\xa2\x35\x94\x1e\x43\xc0\xa1\x74\x2e\x38\x54\x53\x79\x39\x20\xa5\x34\xce\x67\xda\x58\xe1\x7c\x74\x63\x7d\xeb\xb6\xcb\xd3\xb7\xb4\xdb\xbd\xda\xe2\xec\x79\xab\xa5\x85\xbf\x2d\x2e\x97\xa2\xc6\x43\xd5\x4b\x67\x93\x9b\xe2\x82\x09\xb8\x6b\x96\x1c\x86\x54\x28\x8c\x34\xd3\xfa\xa6\x2b\xa3\x78\xa5\x9a\x94\x46\x62\x19\x3a\xa9\x8d\x8c\xb9\x17\x70\x5b\xf0\xa0\x52\xd9\x7c\xd5\xe5\x52\xda\x99\x32\x7e\xf1\xf5\x56\x51\xd2\xe7\x8a\xca\xa8\x6e\xe7\x56\x58\x47\x81\x14\x5f\x43\x21\xc5\xc5\x3c\x5c\x25\xd5\x45\x56\x8b\x0b\x56\xcf\xe9\xeb\xba\x7b\x14\x64\x81\x55\xc3\x00\x0b\x23\x5f\x40\x6c\x7d\xe6\x9d\x48\xbb\x64\x27\xd2\x3e\xf0\x4e\xe4\xb0\x64\x27\xd2\xae\xb6\x13\x39\xac\xb3\x13\x99\x9f\xeb\x37\x1d\x6f\xed\x36\x3b\x91\xc3\xef\x3b\x91\x5f\xf9\x4e\xe4\xb0\x74\x27\x52\xe7\x5f\x8d\x67\x56\x18\x41\x87\x5f\xc5\x4e\xe4\xf0\x05\xee\x44\xda\xe5\xbb\x79\x43\x51\x7c\xda\xe7\xe3\xcb\xab\x61\xf5\xed\x30\x1b\x26\xe6\xd9\x25\xfb\x61\x63\xde\xdc\x66\x37\xcf\xae\xb4\x9b\x17\xc9\x5f\x6b\x37\xcf\xfe\xda\x76\xf3\x22\x7d\x27\xb4\x53\xb0\xb9\xa1\x5b\xd1\xa2\xdd\x8d\x61\xb3\xdd\x8d\x2c\x8b\xd2\xed\x8d\xaa\x16\x96\x48\xbd\xd4\x6c\x1b\xe6\x5f\x6a\x78\xeb\x1d\x25\x3b\xb3\xa3\x54\x41\xe9\x4f\xef\x28\xb5\xd5\x79\x85\x1d\xa5\x8a\x4e\x91\xd2\x78\x9b\x1d\x25\xfb\xf9\x77\x94\xd2\x27\x0e\xd4\x8f\x2a\xc7\x8a\x9f\x3a\x53\xa0\xcb\xa5\x7f\xca\x1c\x22\x78\xe6\x7d\x2b\x3f\x2c\xce\xad\x55\xdb\xa1\x72\xeb\xc9\xb4\x38\xb7\xd6\x9d\xb8\x3a\x99\x04\xde\x82\x84\xa1\x0e\x3f\x73\x89\x74\x7e\x62\xdf\x74\x22\x1d\xad\x55\x93\x44\x9a\x2f\x44\xb3\x44\x5a\x1c\xe5\x2b\xda\xb2\x32\x30\xc1\xd2\x9d\x1c\xd4\x98\x77\x07\x49\xd2\x64\xda\x45\x92\xf4\xf2\xd3\xfe\xe2\x1d\xb5\xa2\x83\x8a\x82\xe8\xe1\x8b\x01\x07\xdc\xd3\x28\xaa\x08\x0a\x2d\x71\x32\x75\x3d\x36\x24\x8b\x80\x58\xbc\x12\x28\x2b\x0a\xfc\x10\x79\x74\x38\xcb\x5e\xad\x09\x6e\xbc\x80\x34\x9c\x60\x5c\xf6\x94\xcf\x0f\x59\x1c\xae\xf0\x99\x4c\x7d\x67\x1b\xce\xc0\x2f\x0f\x53\xf6\x1c\x72\x8b\xce\x0f\x6b\xc2\x5b\x4d\x60\x8b\x72\x16\xbf\x69\xba\xe2\x87\xdf\x13\x95\xc3\x24\x2a\xbb\x55\x71\xa2\xa2\xda\x0e\x95\xa8\xdc\x7e\x28\x4e\x54\x74\x07\xb6\x4f\x6e\xc5\x59\x6d\x63\xe5\x78\x73\x7c\xe5\x90\x59\x6c\x5b\x25\x69\xc9\x4f\xf2\x9b\x4e\x5a\xa2\x75\x6b\x92\xb4\xf0\x45\xf9\x06\x92\x96\xdb\x0f\xff\xee\x49\x4b\xd1\x3b\x0f\x82\xe8\x41\x92\x96\x97\x16\xd9\x76\x75\x7d\xa0\xa6\xf5\x47\x91\x6d\xb7\x6a\x18\xd9\x76\xab\x17\x10\xd9\x4a\xdf\x7d\x56\x03\x76\x56\x60\xa0\xba\x8c\x63\x43\xe6\x3e\x8f\x8f\x3f\x67\x5f\x42\x96\xef\x1e\xe3\xeb\xc8\xfc\xcd\xf5\xfd\x7e\xf0\xf7\x57\x7f\x1f\xa0\xa7\x89\x09\x97\x1c\xda\x07\x05\x68\xa3\x9d\x72\x00\xd4\x33\x5a\x37\xf4\xcd\xe0\x5b\xd5\xb0\xb7\xdf\xc3\xf8\xc7\x47\x19\x15\x22\x3a\x69\xf3\xc7\xe8\x86\xc6\x72\x86\xb4\x4f\x19\x0b\xa4\x95\x7c\xa2\xee\x5d\xd8\x9f\x58\x81\xb5\x09\xfb\xef\xaf\xae\x3e\xf5\xc3\xb5\x77\x2f\x28\x00\x29\x23\x17\x0b\xa3\x5d\xd0\x5c\x0b\x4c\x15\x58\x08\xff\xff\x08\x78\x54\x9d\xcb\xe3\xa3\x5a\x8e\x0b\x02\x09\xed\x83\x0a\x7e\xb9\x90\x97\x9f\x5c\x67\x41\x28\x11\xe9\xba\x8d\x6f\xb1\x2f\xa7\xde\x15\x51\x8b\xdd\x68\x51\x40\xfb\x19\x77\x36\x63\x1d\x36\x3e\x29\x52\x3d\x30\x74\x14\x0e\x1a\x07\x01\x74\xac\x82\xf4\xa8\x1c\xfb\x4b\x10\x5f\x09\x53\x6d\x41\x40\xeb\x24\xbc\xb7\x7c\x23\x27\x75\xd2\x3f\x92\x0d\xe8\x1e\x32\x0d\x54\x83\x9b\xcf\x81\x18\x38\x5e\x3f\x8d\x1a\x0f\xea\xcb\x17\xb9\x0c\xe1\xa3\x7c\x43\x5e\x68\xb3\x95\x8b\xd1\x45\xfe\x8d\xa5\x64\x64\x4c\xe1\xb5\xbc\x2c\xf0\x17\xf4\x14\x2e\x35\x22\x5d\xb5\xb0\x07\xec\x9f\x8c\x7b\xa5\x93\x04\xb6\xc9\x38\xa6\x11\x95\x5f\x9c\x48\x9a\x15\xc2\xc2\xc2\xa1\x3e\x86\x04\xb1\xce\x10\x71\xc6\x43\x34\x33\x30\x8d\xe4\xf4\x5a\x21\xce\x09\x12\xf2\x42\x32\xb3\x56\x86\xc9\xf9\x20\x43\x65\xdb\xfd\x73\x2f\x90\x1c\x93\x0c\x51\x2c\x6c\xbd\xf8\xdf\x29\x7e\x69\x44\xf4\x78\x25\x36\x04\xd2\xe5\x7f\x9d\xc9\xfa\x5b\x28\x17\x43\x13\xfb\x88\x8c\xf6\xea\x76\x74\x7d\x3d\x1e\x8e\xf0\x8e\x48\x54\xf9\x57\x41\xf6\x7b\x28\x80\x56\xc4\xf8\x0b\xfd\x87\xf1\x97\x05\x6e\x9a\xbc\x3b\x56\xcb\x39\xb9\x01\xef\x0b\x51\x00\x16\xec\xf7\x77\xe4\xc1\xe0\x27\x62\x80\xf0\xfc\xa1\x77\x69\x8a\xfe\xfd\x4b\x21\xed\x11\xb3\x95\x69\xc7\x79\xb9\xe1\x7a\xf7\x81\x72\x36\x10\x3f\x1a\x71\x34\x60\x76\xe1\x28\x15\x36\x79\x32\x14\xab\x4a\x0d\xbf\x09\x49\x70\x26\xee\xc5\x96\x14\x37\xa5\xd2\x9e\x93\x36\x8c\xa6\x0f\xa1\xe4\x63\x64\x19\x41\x53\x77\x7c\xc6\xb6\x43\x0a\x26\x84\x4d\x05\x8c\x06\x2c\x48\x58\x44\xfa\x4f\x15\xfb\x10\xee\x85\x8b\x8b\x17\x91\xd0\xf8\xe3\x8d\x11\x32\x48\xc2\x48\x9c\x82\xc2\xbc\x12\x5f\x0a\x02\xce\x0a\x44\xd8\x3a\x89\x2f\xd1\x2f\x6c\x78\xc2\x1c\x78\x37\x5c\xb0\xd4\xb7\x47\xb6\x2e\x4d\x55\x73\x27\x7f\xcd\x24\xb1\x4d\xb8\xc0\x6a\x1d\x9e\x09\x2e\x55\x1b\x2e\x03\xa9\x55\x7e\x57\x7d\x7a\x87\xc5\xdf\xde\x79\xe2\xb8\x19\x77\x77\x01\x96\x2c\x4e\x9a\xf9\x02\xd6\x01\x0e\xf5\x1c\xaf\x26\x7a\xd8\x34\xbc\x8b\x91\x63\x78\xce\x89\xe4\xd0\x43\x3d\x62\x14\x08\x62\xd3\x80\x7f\x9e\x45\x8c\xee\x0f\x69\x70\xc9\x3f\xc6\x92\x71\xa3\x0c\x84\x94\x28\x81\x23\xe9\xdf\xf0\x8f\xf1\xe6\x2d\x72\xeb\x09\x76\x36\xd9\xa5\x18\x91\x1d\x32\x7a\xad\x45\xa1\x46\xdc\xfe\x27\xc9\x4c\x3b\x2b\x3d\xb3\x1c\x42\x80\xdb\xf3\x51\xa7\x3b\x8b\x3a\xf5\x86\x80\x27\xc1\x0a\xff\xa7\x3b\x0f\xfd\x9f\x8f\xc2\xad\x5f\x25\xc8\x6e\x43\xe2\x93\x60\x01\x41\x1b\x66\x12\xff\x30\x22\x8a\x13\x71\x83\x4b\xaf\x68\x56\x82\x3a\x25\xd5\xcc\x83\xf4\x37\x31\x91\x56\xa0\x95\x7e\xc6\xdc\x12\xb9\xb4\x7a\x61\x6b\xfc\x30\x00\x7e\xfb\xcb\x34\xd4\x95\x2e\x0f\x1d\x5d\xde\x5c\xf4\xed\xa5\x61\x9e\x4f\x21\xdb\x34\x0b\x36\x86\x6a\x53\xbb\x98\x74\x49\xed\xf4\xf6\x74\xfc\xa9\x33\x6a\x37\xd3\xd1\xb0\x33\x62\xb3\xab\xd9\x29\x8a\xd6\x0a\xf4\x52\x50\xd5\x05\xf2\xc9\x23\x23\x2d\xa1\x4f\x50\xd1\x60\x9f\x3c\xd0\xf2\x6c\xe0\x27\xf9\x3d\x13\xfa\x15\x70\x6b\x04\x7f\x63\x28\x61\x48\xcd\x21\xdb\xce\xf1\x0f\x49\xb6\x06\x40\x71\x08\xae\x3b\x04\x4c\x1d\x6b\x6a\x9f\xbc\x45\x7b\x15\x99\x2f\xe9\x9d\x0c\xf9\x37\x19\x0b\xd2\xa0\x5c\xef\x0b\x6f\xeb\x32\x62\x97\x76\xd7\x6e\xd7\x9f\xf0\x48\xd7\x60\x1c\x86\xbb\x06\xc3\x78\x3c\xea\x2c\xed\x4a\x43\x46\x7b\x08\xa2\xcd\x92\x2f\x28\xc8\x23\xfc\x19\x17\xa4\x5e\x34\x95\x7a\x49\x17\xa5\xcb\x7e\x0a\x75\xea\xc3\x0c\x55\x69\x4f\x9a\x62\x75\x7f\x87\x01\x43\xe2\x30\x6b\xec\xd6\x1e\x72\xb5\x65\x75\xc6\xd4\xe3\x90\x26\xde\xca\x69\x69\x97\x69\x4b\xaa\xe0\x1a\x83\xd3\x05\x4b\xab\xd0\x4f\xf3\xe5\x8a\x21\x8f\x14\xbe\x1f\xcf\xa6\x06\xc0\x9d\x11\xe2\x53\xba\xe4\xf7\x36\xc7\x6e\x79\x11\x73\x94\xf9\x2e\xd0\xfc\x68\x90\xbc\x73\x82\x1f\xda\x6a\x58\x4b\x3d\x2d\x1c\xac\xca\x9f\x2e\x1d\x43\x08\x31\xf8\xb1\x4a\x63\xe3\xd9\x5b\xc7\x33\x7e\xfc\xd0\x42\x81\xef\x33\x22\xfe\xf5\xc7\x0f\x07\x97\xb1\xb6\x1e\xeb\x0a\xd9\x06\x55\x69\xb7\x79\x5d\xf4\x72\x79\x2b\x54\x15\x34\x34\xb0\x2a\x5f\x7c\xef\x1e\x57\x25\xe1\xef\xc0\xfa\xf4\xca\xbe\x24\x64\x2d\x00\x55\x95\x98\x96\x39\x5d\x07\xe0\x54\x84\x9a\xcf\xc4\x5e\x8f\x87\x55\x98\x77\x81\x7a\x05\x48\xd7\x05\xfb\x76\x78\x96\x04\xa0\x2e\x00\x4d\x7d\xa4\xa4\x15\xa2\x49\x22\x1a\x48\x53\xdf\x50\xe9\x1e\xd3\x14\xe5\xef\xa0\x56\x61\x75\xbf\xa3\xda\x0b\x41\x35\x91\x4d\xfd\xb9\xd8\x56\x2c\xc3\x8b\x40\xb8\x14\x22\xb5\x87\xb8\x0d\xd9\x34\x78\x7c\x89\xe7\x33\x22\x80\xbb\x18\x5d\xe4\xa0\x0d\xbf\x13\x2a\x40\xed\x8e\xe2\xc7\xe6\x71\x44\xff\x17\x8a\x42\x65\x50\x2d\xd1\x52\x11\x05\x70\xc0\x79\x9d\x6d\x2b\x1c\xd0\xe9\xa6\xbd\x24\xd8\x66\xcb\x0a\x49\x74\xba\x65\x1f\x3d\xc6\x7f\xd6\xe7\x8c\x09\xef\xc0\x25\xa9\xd3\xbf\x64\x5f\xe9\x19\x36\x94\x94\xdd\xb7\xf7\x20\x3f\xac\xe9\x40\x7e\xe0\x2d\x62\xef\x99\x4c\x39\xc7\x9c\x07\xf9\x2a\x2b\xf0\x29\xfa\x0f\x0e\xea\x4f\xc6\x43\x5c\x46\x77\x55\x72\x10\x40\x9a\x98\x01\x36\xa6\xc6\x54\x73\x94\x68\xc4\x4d\x66\x84\x6c\x4e\xfc\x57\x27\x17\xf1\x43\xf0\x9c\x40\x3b\x0b\xf9\x1b\x9f\x4c\x57\x4c\x4c\xe2\x59\x05\xd4\x0b\x28\x7b\xa8\x39\xec\x92\x2e\x2a\xc2\x46\x34\x64\x4a\xff\xa8\x3b\xe4\x9a\x84\xd4\x26\x6e\x49\x16\x84\xb0\xa1\xb6\x75\x4f\xd4\xb0\x99\xfc\xb0\x7d\xf9\xb3\x82\x5a\x0b\xf0\x23\x5f\x00\xcc\x01\xcb\x16\x20\x9b\x19\xb6\xc2\x21\xf5\xbe\x87\x16\x86\xde\x3e\xe3\x43\x43\x3f\x34\x4c\x98\x69\x27\x4f\xd2\x90\xd6\x4d\x97\xb4\xa6\xa3\xeb\xae\x1e\x40\xf2\x79\x5e\x8f\x3b\xa3\x75\x39\x3e\x1b\x75\x46\xec\x76\x7c\x3d\xeb\x8c\xd8\xf5\x68\xda\x19\xad\xd9\xf8\x62\x84\x07\x4c\x85\x23\x76\xa6\xbb\x53\x4e\xb5\xed\xf3\x56\x19\x52\xda\xc7\x26\x75\x80\x31\x7d\x3e\x9b\x9f\x97\x93\xa7\x59\x13\xd7\xbd\x70\xa3\x0e\x3a\x8a\x1b\xc2\x3f\x53\xff\x5e\x51\xa2\xb7\x65\xdb\xea\x93\xfb\x27\xf2\x28\x64\x94\xf6\x9e\x44\x67\xff\xa2\xd3\x77\xfc\x14\x26\xbe\x7c\x15\x78\x4e\xc4\x46\x9c\xdc\x4b\x9c\x5e\x37\x0d\x50\xc9\x82\xac\x3d\xc7\x26\xc1\x31\x1e\x56\x17\xe7\x4a\x71\x92\xe9\x0f\x01\x88\xfb\xd1\x7b\xff\x90\x8b\x51\xcf\xc6\x97\x92\x76\x96\xb3\x25\x38\x54\xdc\x8a\xb0\xeb\x15\x57\xba\xe6\xd4\x60\xdd\xe3\x8d\x89\xb4\x10\x46\xcb\x93\x66\xfd\xe8\x34\x6d\x74\xa4\xf0\x16\x05\x79\x7c\x54\x67\x91\x6a\x70\xd8\xad\xf8\x3e\x06\xc7\xd0\xc0\x80\x74\x00\xdf\x52\x10\xb7\xa2\xd0\xe0\x39\x48\xf5\xd8\xfc\x67\x14\x45\xe4\xbf\x4c\x20\x5e\xb4\xe2\x1f\xf8\x2d\xc4\xf4\x0a\x12\x44\x49\x8d\xcc\x5a\x36\xd6\x62\x1d\x67\x2d\x92\xcb\x05\xdc\xc4\x71\xb9\xec\x45\xfe\xd3\x1c\x32\x85\xd9\x6e\x79\xf0\x41\x12\xfd\x1b\x9e\x5e\xe8\x52\x8b\xaa\x41\xed\x5f\x31\xf9\x2c\xe1\xd7\xc5\x89\x0b\xe6\xdc\xd8\xed\xd2\xca\x44\x59\x6d\xaf\x49\xe0\xed\x20\x86\x07\x65\x3d\xab\x49\xfb\x53\x2c\x2d\xbe\xf4\x46\x92\xe2\xca\xcb\x29\xde\x2f\x15\xbd\x1a\xab\x7f\xfe\x57\xcc\x6b\x49\x1d\xe2\x5b\x6c\xad\x61\x27\xd7\x0e\x7b\xfc\x86\x5d\x9e\x0c\xfd\x15\xac\x45\x7e\xf5\xa6\x42\x12\x5c\x78\xa6\x39\x69\xb8\xe8\xc8\xe5\xaf\xde\x08\x6f\x30\x52\xa4\xcb\xfa\x47\x80\xda\x34\xaf\x51\x6f\xfb\x44\x79\x8d\x78\x77\x28\xfd\x8f\x61\xb4\xa9\xb5\x68\xb6\x1a\x8a\x9b\x30\x81\x2b\x6c\xf4\xa5\xa9\x16\x76\xe0\x66\x57\xd8\x6a\xd3\x80\x2c\x18\x7f\x1f\xa5\xa3\xd2\x2a\xb2\x86\x16\xf1\xeb\xcf\x0e\x5c\xc9\x57\x07\x6a\x06\x2d\xb3\x49\xd4\x32\x65\xd8\x32\xf3\x71\x4b\x4c\xa6\x72\x90\x4a\xe4\x2c\x68\xaa\xeb\x64\x0c\x96\xe7\x35\x80\xc7\xa9\x43\x57\xae\x3c\x09\x2d\x18\xc8\xcf\x35\x41\x1b\xbe\xd6\x94\x3a\x39\xaf\xa2\x9b\x3c\x34\x9d\x38\x2e\x9f\x3b\x66\xdd\x3f\xb3\x02\xc2\x32\x47\xac\xd3\x87\xaa\xad\x57\x6a\x63\x41\x4d\xe7\xff\x03\x00\x00\xff\xff\xa3\x1e\xce\xe4\x34\x75\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 30004, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

