// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\xb6\x93\x7f\x9f\x4f\x81\x63\xdb\x9b\xa6\x53\x51\x97\x5c\x7b\x97\x49\x6d\xcf\x38\x96\x92\x6a\x1a\xdb\x3a\x5b\xce\x5d\x5f\x75\x28\x11\x92\x10\x53\x24\x4b\x80\x72\x5c\x8d\xbe\xfb\xed\x02\xe0\x33\x29\x93\x22\xa5\x78\xe6\x9f\xcc\xc4\xe2\x03\xb0\x4f\x58\xfc\xb0\x00\x96\x38\xf9\xb7\xc1\xf5\xc5\xe4\xcf\xf1\x90\x2c\xc5\xca\x79\x71\x76\x22\x7f\x08\x81\x0b\x6a\xd9\x70\x81\x97\x2b\x2a\x2c\x32\x5b\x5a\x01\xa7\xe2\xd4\x08\xc5\xbc\xf7\xc6\x48\xbf\x5a\x0a\xe1\xf7\xe8\xdf\x21\x5b\x9f\x1a\xff\xd7\xbb\x3b\xef\x5d\x78\x2b\xdf\x12\x6c\xea\x50\x83\xcc\x3c\x57\x50\x17\xea\x8d\x86\xa7\xd4\x5e\xd0\x4c\x4d\xd7\x5a\xd1\x53\x63\xcd\xe8\x83\xef\x05\x22\x55\xf8\x81\xd9\x62\x79\x6a\xd3\x35\x9b\xd1\x9e\xbc\xf9\x99\x30\x97\x09\x66\x39\x3d\x3e\xb3\x1c\x7a\xfa\x2a\x22\x24\x98\x70\xa8\xbc\x86\xbb\xcd\xc6\x1c\x58\xc2\x32\x7f\xf7\xb8\x40\xe2\xdb\x2d\x81\x2b\x20\x79\xd2\x4f\xca\x9d\x9d\x38\xcc\xbd\x27\x01\x75\x4e\x0d\x06\x2c\x0d\x22\x1e\x7d\x90\x83\xad\xac\x05\xed\xfb\xee\xc2\x20\xcb\x80\xce\x4f\x8d\xfe\xdc\x5a\x63\x01\x13\x9f\x15\xaa\x72\xf1\xe8\x50\xbe\xa4\x54\x44\x04\x04\xfd\x22\xfa\x33\xce\xe3\xfa\x70\xdd\x67\xae\x4d\xbf\x98\xf8\x54\x53\xe0\xb3\x80\xf9\x22\x5d\xe5\xb3\xb5\xb6\xd4\x53\x23\x6f\x67\xc2\x83\x19\x10\xfa\xcc\xfb\x01\x5a\x38\xa0\x70\xf5\xda\x7c\x65\xbe\x7a\x13\x3d\x30\x57\xcc\x35\x3f\x03\x4f\x1b\x14\xef\xad\x2c\xe6\xaa\xf2\x9b\x0d\x9b\x13\x73\x72\xfe\xe1\xc3\x70\x30\x65\xee\x76\x0b\xe5\xb4\x30\xaa\xc6\x66\x43\x1d\x0e\x16\x02\x0e\xfd\x15\x73\xee\xf5\x4b\xf9\xc2\xb5\xb7\x5b\x23\x32\xea\x49\x5f\x09\xa7\xe5\xef\x6b\xd7\x38\x3b\x99\x7a\xf6\xa3\x7e\xe8\x5a\x6b\x32\x73\x2c\xce\x4f\x0d\xb8\x9c\x5a\x01\x51\x3f\x3d\x9b\xce\xad\xd0\x11\xd1\xed\x9c\x7d\xa1\x76\x4f\x78\xbe\x41\x02\x0f\x9a\x11\x4b\xb3\x05\x38\x0b\x34\x43\xcc\xcf\x66\x31\x31\xf4\x08\x50\x89\x42\x4d\x27\x64\x76\x54\x26\x57\xca\x0e\x3c\xdf\xf6\x1e\xdc\x88\x0b\x4a\x48\x83\xa4\xb0\x14\x36\x14\xc2\x73\xb3\x42\x82\x20\x8b\x85\x43\xc1\xef\x1c\xc7\xf2\x39\xb5\xa3\x96\x54\x85\xb5\x4d\x55\x21\x94\x45\x95\x8a\x1e\x5b\xc1\x02\x1b\xea\x3b\x4d\x2b\x7e\x9d\x62\x2b\xdb\xdb\xb7\x62\xb6\x3c\xe8\x79\xae\xf3\x98\x2d\x02\x85\x26\x4a\x8e\xc4\x18\x60\x73\xa8\xb6\x83\x12\xfa\x65\x0f\xd8\x16\x48\x3d\x9b\x9a\x7d\x65\xc4\x4c\x23\x58\x84\xd9\x49\x73\x4d\x03\xcb\x05\x93\xe7\x1a\x31\x6a\x14\x6d\x56\x5d\x28\xd3\x12\x51\x51\x83\x58\x01\xb3\x7a\xf4\x0b\x70\xb7\x29\x50\x16\x41\x48\xe3\xde\x97\x6f\x08\x74\x18\x64\xbf\xd4\xe0\x50\x50\xa3\x88\x1e\x27\x7d\xa8\x94\xd7\xcb\xca\xa8\x14\x3a\x05\x05\x56\xd4\x0d\x23\xff\x56\xd7\x52\x4c\xc7\x9a\x52\xc7\xa1\xf6\xf4\x31\x6f\x82\x1c\x07\x87\x15\x48\x6a\x8f\xd6\x44\xfd\x80\x72\x00\xb5\x4c\xb7\x89\xab\x07\xa1\xeb\x32\x77\x71\xd2\x77\x58\x91\x6e\x8d\xfa\xd0\x48\x85\x16\x01\x94\xca\x97\x4b\xd9\x6b\x30\xba\x9d\xdc\x8c\xde\xa1\xb9\xac\xa2\x6b\x14\xc4\xe8\x87\x4e\xc6\x82\x19\x1b\x27\xcd\x94\xef\x56\x09\x24\xa8\x07\x64\x47\xbf\x4b\x37\x0b\x42\x93\x2e\x0a\x3f\x25\xb6\x46\x66\xcc\x37\xf2\xd0\x50\xa2\x73\xac\xf1\x68\x8c\xca\x96\x19\x38\x67\xba\xa2\x75\x23\xf5\xa2\x12\x8e\x55\xc6\x99\xe4\x7a\x43\xa3\x0e\x50\x6c\xa9\x98\x2b\x70\x2b\xbc\x4d\xe9\xf5\xf1\xbc\xcc\xe7\x4b\x9a\xa9\x68\xe6\x7d\xbc\xbf\x4c\x9a\x96\xee\x2f\x49\x84\xbe\x60\x2b\x5a\x68\xa0\x98\x7c\x4d\x32\x1a\xae\x14\xb5\x12\x9c\x2a\xed\x15\x19\x7b\xde\xc9\xaa\x65\x1d\x43\xdb\xb4\x54\xc2\x6c\x07\x29\x2f\x59\xec\x46\x55\x1e\x1f\x5d\x06\x6c\xb1\x14\xd5\x50\xb3\xcb\xed\x53\xb4\x1d\xc6\x45\x8f\xb9\x10\x06\xd1\xca\x5e\x15\x91\xae\xb0\xa9\x82\xe7\xef\x30\x08\x28\xb7\x1e\xbe\x6a\x66\xb1\xa7\x78\xf9\xbc\x8a\x95\xcf\xbb\xe5\xb4\x5e\x54\x71\x5a\x5b\x0b\x00\x7b\x71\x08\x57\x28\xf6\x18\x62\xcd\x04\x5b\x17\x87\xb8\xdc\x08\xbc\xa6\x01\x47\xef\xaf\x18\x83\xf7\x19\x76\x71\x36\xc0\xdf\xf6\xfb\x0f\x0f\x0f\x26\x8c\xa3\x01\xfc\x37\x67\xde\xaa\xaf\xe2\x70\x88\x5a\x1d\x6a\x71\xca\xfb\x8e\x25\x28\x2f\x1b\x55\xae\x6f\x27\xc3\xab\x49\xd9\x50\xd2\x0e\x6c\x22\x5d\x0f\x82\x38\x9a\x78\x17\x90\xd3\x8d\x19\x25\xb5\x08\x86\x3e\x0d\x6f\x6e\x47\xd7\x57\xc7\xc1\xa1\xdc\x70\x9e\xba\x85\x1b\xc0\x0a\x3d\x63\x88\x46\x24\x39\x17\x28\x8f\xf6\x89\x6f\xd9\x36\x84\x32\x38\x5f\xe0\x74\x0d\x7a\x3f\xf2\x65\xe9\x34\x21\xf0\x1e\xf2\x53\x03\xa4\xbd\xa2\x2b\x08\xd3\xd5\x3c\x54\x15\x9c\x3a\xde\xec\x1e\xe3\xfd\xde\xca\xee\xbd\x8e\x2e\xbc\xf9\x1c\xe6\x5c\xbd\x57\x99\x10\x62\xb3\x11\x74\xe5\xa3\x7d\x89\x01\xb3\x18\x10\x8b\xbf\x7d\xab\x2e\xfe\x02\xc7\xa7\x0e\x50\x37\x88\x99\x1f\x30\x13\xee\x6c\xbe\x8b\xf9\x7f\x36\x63\xc6\xe6\x3b\x79\xcd\xfc\x70\xa7\xa6\xcd\x98\x01\xb5\x9d\xdc\xec\x2e\x35\xb3\xcb\x35\xcb\xfa\x4d\x74\x53\x67\x72\x58\xc7\x33\x7c\xbe\x4b\x83\x37\x39\xc7\x68\x68\x3e\x18\x6d\x8e\xaf\xd1\x7a\x71\x40\x8d\x60\x54\x6b\xa2\xd1\xce\x25\x8e\xa8\xc2\xda\x0a\x08\xa2\x13\x39\x25\x1a\xa7\xb6\xdb\xdf\xf2\x6b\x0d\x7a\x89\x01\x57\x1d\xe4\x02\xd5\x66\xd3\xff\xe9\xc5\x4f\xfd\xed\x76\xb3\x51\xf2\xa5\x04\xb6\x10\xbc\x71\x7d\xc6\x00\x49\x35\x8e\x02\xe5\xdf\xe1\x17\xd7\x81\xdc\x0b\x87\xcd\xee\x4f\x37\x62\xc9\xb8\xb9\x84\x91\xcb\xa1\xf2\xc9\xf6\x85\x42\xca\x09\xc8\xa9\x10\xf2\x4c\xaf\x80\xec\x62\xa6\xad\x33\x73\x60\xe6\x00\xb5\x98\xeb\x87\x02\xf5\x18\x0d\xce\x85\x08\x80\x1f\xdc\xc8\x86\xd8\x6e\x93\x29\x4b\x6f\xb6\xa4\xb3\xfb\xa9\xf7\x25\x5a\x67\x48\xee\xe5\xb0\xb5\x64\xb6\x4d\xdd\x78\x3c\x95\x77\x28\xcd\x67\xfe\xe5\xc2\xf1\x60\xca\x63\x48\x3e\xc8\x50\x8e\x70\xc8\xf0\xbd\x17\x68\x8e\x69\x86\x28\x16\xbe\xbd\xfc\xdf\x5b\x5c\xa6\x52\x25\x72\x8a\x4a\x12\x8d\x94\xf5\x43\x70\x3e\x6e\x60\x99\x07\x26\x96\x04\xef\xc0\x9b\xd0\x35\x80\x2e\xfe\x51\x4b\x4a\x9b\x0d\x44\x3a\x0b\x4a\xbe\x67\x3f\x93\xef\x67\x5e\x40\xc9\xdb\x53\xa2\x86\xa2\x8b\xf1\x9d\xf9\x11\x62\x48\x10\x40\x04\x9b\xcd\x3d\x7d\x24\x12\xbc\x80\xd4\xf4\xb1\x77\x65\xa8\xf2\xe6\x95\x92\xf6\x44\xd8\x91\x3b\xa3\x1b\xa9\x18\x96\xb8\xde\x43\x60\xe9\xe0\x11\xc4\x8f\x6b\x9c\xf4\x85\x5d\x59\x2b\x5e\x7e\xc3\x05\x8d\xc4\x54\x51\xf5\x3b\x4e\x83\x0b\xf5\x2c\x59\x4c\x4c\x5e\x21\xf1\x78\x8d\xe3\xac\x0d\xa3\xdb\x47\xae\xf9\x90\x3c\x23\x78\xd5\x1d\x9f\x91\xf4\xef\x52\x85\xf0\x55\x05\xa3\xbe\x08\x52\x1e\x91\xfd\xa9\xe3\x1f\x0a\x82\xb0\x71\xf1\x22\x16\x1a\x6f\x5e\x11\x08\x63\x98\x4f\x35\x4c\x29\xbd\x52\xcb\xcc\xc0\x39\x82\x12\xb1\x4c\x83\x4c\x7c\x87\x2f\x9e\x70\x07\x59\x0c\x1b\x2c\xb3\x70\x15\xba\x2c\x13\x22\x9d\xfd\x90\x5b\xb1\xda\x87\x0b\xb4\xd6\xe1\x99\x60\x53\xb5\xe1\xd2\xd7\x56\x95\x4f\xa3\x75\x5b\x91\x2c\xdc\xee\x42\xfe\xa8\xbb\x2b\xe4\x17\x09\x14\xcb\x06\x6c\x02\x1c\xf6\x7c\xfa\x08\x61\xea\x5f\x0d\xd1\xc3\x66\xfc\x3e\x41\x8e\xc1\x7b\x49\xa4\x80\x1e\x9a\xb8\x46\x10\x9b\x05\x72\x6d\x4f\xd5\x36\x07\x2c\xb8\x92\x2b\x79\xb9\x6e\x94\x83\x90\x1d\x46\x90\x48\xfa\x23\xfe\x90\x57\xaf\x91\x5b\x4f\xb1\xb3\xe9\x3a\xc3\x88\xae\x91\xd1\xcb\x52\x14\xda\x8b\xdb\x7f\xa5\x99\x95\x6a\x55\xce\xac\x80\x10\xd0\xed\x65\xad\xf3\xb5\xc5\x9c\x66\x55\xa0\x27\x41\x0b\xff\xbb\x3b\xe5\xfe\x6f\x27\x3c\xf4\x13\x24\xa9\xd6\x21\xe4\xd4\xa7\xc1\x0c\xa2\x75\xd0\x24\xb9\x21\x31\xc5\xb1\x7a\x20\xa5\x8f\x68\xd6\x82\xba\x48\xaa\x89\x27\xac\xb4\x22\xad\x40\x2b\xf2\xcd\x4e\x90\xab\xd4\x2e\x62\x19\x07\x26\x24\xba\xd2\x3e\x3d\xb6\x02\x6b\xc5\xcd\xe1\xd5\xdd\xa5\x69\xcf\x89\xf1\xfe\xd6\x20\x86\xec\x21\xed\xe8\x5c\x8e\xbb\xa1\x73\xfe\xe9\x7c\xf4\xb1\x03\x3a\x77\xb7\xc3\x41\x07\x64\x26\xd7\x93\x73\x14\xa7\x15\xac\x65\xc0\xa8\x0b\x6c\x63\xae\x67\xb7\x07\x37\x45\xa5\x04\xdd\xd4\x8b\xe3\xc1\x9b\xe6\x77\x24\x7c\xab\xe0\xb6\x17\xc0\x8d\xe6\x01\xa5\x0d\xab\x84\x9d\x23\x1c\x92\x6c\x0d\x71\x23\x69\x96\xee\x30\x4e\xfb\x68\x57\xe1\x59\x54\x33\xbf\xd1\x7a\x36\x90\x5b\xf6\x15\x81\x4e\xa1\xf4\xa5\x17\xba\x82\xda\x3b\x8b\x93\xbc\x8d\x64\x31\x39\x96\xed\x51\x0f\x07\xb4\x3d\xaa\xc9\x11\xa7\xb3\xc0\x2a\x0b\x19\xed\x21\x88\xed\x17\x5e\xb1\x79\x82\x3f\xa3\x8a\xe0\x8a\x65\x82\x2b\xdd\x45\xd9\xdc\xcc\xa0\x4e\x73\x98\x61\x51\x60\x93\xa5\x58\xbf\xbf\x43\x85\x01\x75\x84\x35\x72\x1b\x57\xb9\x0e\x45\x93\x3a\xcd\x38\x64\x89\xb7\xea\xb4\xac\xcb\xc0\x24\x33\xa5\x1a\x41\xa7\x0b\xe6\x56\x65\x3f\x2d\x4e\x48\x88\xcc\x9e\x39\x35\xde\x8d\x26\xb7\x04\xe0\x8e\x70\x3a\xf3\xd2\x1b\xd7\x40\x73\xf7\x34\xe5\x24\xb7\x6c\x3c\x3d\xe9\xa7\x9f\x9c\xe1\x3e\xcc\x9e\xb3\xa5\xa7\x85\x83\x56\xf9\xea\xd2\x09\x84\x10\xf2\xee\xcf\xc9\xf0\x96\xac\x3c\x3b\x74\x3c\xf2\xcb\x87\x16\x06\x7c\x97\x13\xf1\x87\x5f\x3e\x1c\x5c\xc6\xc6\x76\x6c\x2a\x64\x1b\x54\x65\xdd\xc6\x75\x6c\x4e\x83\xc0\x0b\x5a\xa2\xaa\xa2\x51\x02\xab\xea\xc5\x01\x70\x55\x13\xfe\x06\xac\x4f\xb7\xec\x73\x42\xd6\x0a\x50\x8d\x02\xd3\x5d\x9d\xae\x03\x70\xaa\x42\xcd\x23\xb1\x2f\xc7\xc3\x3a\xcc\xbb\x40\xbd\x0a\xa4\xeb\x82\x7d\x3b\x3c\x4b\x03\x50\x17\x80\xe6\x5b\xb3\x7b\x2a\x5a\x22\x9a\x26\x52\x02\x69\xfa\xcd\x01\x30\x2d\xa2\xfc\x0d\xd4\x6a\xb4\xee\x37\x54\x7b\x26\xa8\xa6\xa2\xa9\xaf\x8b\x6d\xd5\x32\x3c\x0b\x84\xcb\x20\x52\x7b\x88\x5b\xd1\xd5\x1e\x1b\x94\x50\x2b\x01\xb8\xcb\xe1\x65\x01\xda\x30\x8d\x44\x81\xda\x3d\xc3\x5c\x64\xac\x61\xfe\xc1\x50\xa8\x1c\xaa\xa5\xde\xd4\x44\x01\xac\xf0\xbe\xc9\xb2\x15\x56\xe8\x74\x59\x5e\x13\x6c\xb3\x64\x85\x24\x3a\x5d\x94\x07\x82\x5f\x61\x27\x31\xd5\x3b\xb0\x49\x9a\x94\xdf\xb1\xae\x74\x84\x05\xa5\xc8\xef\xdb\xf7\xa0\x38\xfd\x07\x08\xa5\x72\x4e\xe4\xe3\x57\xca\xd2\x2a\xf3\x20\xfd\x42\x26\xcb\x31\x77\x41\xa6\xc2\xed\xc9\xb4\x93\x68\x6f\xda\x22\xf8\x19\xca\xbb\xb1\xdc\x88\xc6\x24\x84\xec\xc2\xfe\xbb\xeb\xeb\x8f\x26\xe0\xf3\x9c\x2d\x80\x27\x31\xb0\xbe\x5a\x86\x53\x64\xa2\x2c\xc6\xe2\x1b\x43\xe6\x3b\xa8\xc4\x44\x4c\xf0\x78\x8a\x76\xb2\x09\x7e\x31\xbe\x8b\xb2\xe0\xce\xa2\x1c\x08\xbc\xcc\xe6\xe3\xe8\x9c\x2a\x55\xdf\x68\xa6\x05\x88\x1b\x27\x7c\xa8\x1c\x0e\x23\x61\x7f\x32\xf7\x82\x55\x3a\x55\x63\xe9\x05\xec\x1f\x4c\xfb\x71\x7a\xf2\xd5\xd4\x0b\xa4\x96\x9e\x10\xde\x4a\x3e\x42\xf6\xf8\x7b\x3e\xc3\xb4\xc1\x22\xff\xff\x09\x69\xf0\x18\x73\x90\xb3\x70\x99\x8d\x12\xad\x6b\x4a\x11\x7a\x3c\x9c\xae\x58\xfc\xa9\x92\xbe\x4b\xd5\x49\xb5\x36\x32\xeb\x2d\x02\x2f\xf4\x7b\x98\x81\x47\xed\xec\x1c\x3f\x55\x12\x9b\x45\x16\x24\xf1\x55\x8f\xaf\xa2\xac\x49\x79\x9f\xcf\x38\xae\xe3\x12\x20\x32\x95\xa6\x8c\xdb\x5f\xb9\x80\xe4\xa2\xbf\x28\xaa\xe9\x01\x9a\x54\xca\x3c\x5a\x90\xdf\xa5\x59\xf2\x09\x91\xb1\x7c\x79\xf1\x30\x6f\x65\x28\x13\x5e\xb1\x4b\xc1\x9d\x94\xc9\x66\x1c\x6f\xed\xbd\xc5\x53\x39\xb4\xa5\x02\x46\xc9\x9b\x09\x67\x44\x12\xb8\x2b\xa6\x71\x16\x92\xf3\x4b\x3f\xaa\xa8\xd5\xba\xbb\x60\x06\xd4\x08\x28\x5f\x1a\x59\x3d\xc6\xc3\x9b\xd1\xf5\xc0\xd4\x2f\xa5\x2a\x85\x3c\x31\xe4\xf9\xa2\x20\x5a\x7c\x99\xef\x7d\x0d\x3c\xa4\xba\xa7\x3d\x91\xda\xa0\x93\xe5\x32\x59\x6d\x29\x81\xe4\x45\x53\xe0\xb4\xe7\x47\xc7\x4d\xdc\x16\x3d\x10\x6c\xda\xf3\xb4\x31\xcb\x76\x64\x85\x39\xc1\x30\x33\x71\xc8\x27\x10\xd5\x9e\x37\x05\x54\x54\xaf\x15\x9e\xfe\x6b\x82\x27\x9a\xad\x1b\xec\x4c\x39\x41\x2c\x46\x43\xe8\x4c\x60\x73\xf0\xbe\x4b\xd4\x2c\x13\x2d\xf2\xd3\x04\x30\x07\xef\x9f\x35\x5e\xa2\x12\xbb\xe1\xb2\xf0\x5d\x0f\x86\xbd\x3c\xed\x7d\x0e\x93\x86\x17\x43\x37\x5c\xa1\xc5\x78\x69\xfa\x84\x20\xc6\xe8\xea\x7a\x30\xc4\x14\x13\xed\x1b\x19\xfb\x95\xab\x62\xd5\x4c\xce\x48\xa8\xe7\xbe\x8c\x6b\x20\xde\xe0\xbd\xdc\x7a\x38\x94\x7c\x11\xf9\x82\x80\xc9\x17\x0c\xdd\x0d\x4e\xd8\x03\x77\xa0\x56\x82\x88\x6a\x2b\x58\x21\xe2\x15\xad\x20\x5b\xd2\x84\x95\xc4\x91\xbc\x9c\xd2\xa7\xe9\x27\x53\xa5\x5a\x9e\x9b\x4b\x18\x50\xa3\x64\x7e\x15\x20\x9d\xfc\x9d\xe8\x23\x37\x61\x6a\xab\x93\x34\x79\x5d\x7d\xd4\xbe\x71\x53\x75\xd2\x5b\xa9\x4f\x6b\xd3\x59\x40\xc0\x8e\x1f\x10\xb0\xc3\x05\x04\xec\x89\x80\x80\x35\x0e\x08\x58\xe3\x80\x80\x7d\x0b\x08\xd2\xb5\xeb\x06\x04\xac\xb3\x80\x80\x75\x19\x10\x8c\x3a\x0d\x08\xca\x44\x2b\x06\x04\xa3\xe7\x1d\x10\xb0\x23\x05\x04\x0c\xe1\x77\x7c\x7e\xf1\xc7\x70\x72\x88\x11\x37\x43\x7e\xaf\x90\x40\x52\x18\xde\xdc\x5c\xdf\x1c\x4c\x3e\x4d\x7d\x7f\xf1\x46\x07\x8b\x58\x32\xe4\x8f\x12\xb1\xb0\x7a\x11\x4b\xbc\x68\x5f\x67\x8c\xcf\x39\x59\xbd\x31\x3e\xd9\x49\x6c\x36\xca\xe7\xb7\xc0\xea\x47\x2d\xd1\x56\x6b\x6d\x95\x62\xb7\xac\xab\x91\xce\xca\x68\xaa\x50\x26\x51\xa1\x89\x3e\xb5\xa3\xb0\x9c\x1b\xd7\xd5\x67\x9f\x28\x8c\x7d\xad\x28\x0c\x3f\xd4\x3d\x76\x18\x86\x9b\x4a\x87\x8a\xc3\x80\x76\xd2\x31\x2f\xe9\xca\x0b\x1e\x6b\xc6\x5b\x50\xb3\x69\xc0\x25\x15\xf9\xb6\xa4\xdd\x45\x10\x26\x4d\xd9\x4d\x14\x96\x76\x81\x58\x90\x27\xc2\xb0\x27\xe5\xe3\x0f\x96\xdf\x95\x80\x48\x4b\x96\x66\xf3\x81\x8e\xee\xf6\x50\x87\x12\xa4\xf3\x8c\xa3\x35\x29\xf8\x71\x96\xbb\xa5\xf7\xec\xb7\xdc\x1d\x6f\xa7\x76\xbb\xdc\xed\xf3\xa3\xc3\xaa\xcf\x0f\x86\xaa\x7e\xea\x4b\xd9\x71\xe0\xcd\x28\xe7\x94\xd7\xc4\x55\x9f\x37\x85\x55\x54\xa4\x19\xaa\xaa\x43\x77\xaa\x10\x35\xfd\xdd\xc2\xf3\x02\xd7\xb6\x5d\xcc\xe7\xe5\x07\x51\x3c\x27\x64\xc7\xd6\xec\x06\x37\x53\x5e\x98\x06\xc2\x26\xd3\xeb\xf1\xad\xec\xec\xf0\xeb\x7a\x62\x40\x67\x01\xb5\x24\x00\x67\xe6\xd9\x55\x42\x3a\xe0\xf6\xe5\x22\x7e\x1c\x5d\x8e\x26\xa6\xcf\xdd\xa2\x80\xbd\xfd\x64\x4b\xd6\x01\x6a\x89\x06\x71\x4e\x85\xf5\x76\x88\x16\xaf\x53\xc5\x8c\x7d\x27\xe4\xc9\x59\x0f\x59\xa9\x9f\x1a\x57\x0e\x83\xec\xe8\x3d\xfb\x01\xbb\xcf\x0f\x81\xeb\xeb\xc5\xd1\x71\x7d\xbd\x38\x18\xae\xaf\x17\x89\x2d\x3f\xa9\x33\xb8\xc8\xc2\xf1\xa6\x78\x94\xac\xb0\x44\x58\x17\xe3\xd7\x8b\xa6\x18\x8f\x4a\x7d\xc3\xf8\x3a\x18\x8f\x6d\xf4\xdc\x31\x1e\x5b\xb3\x1b\x8c\x4f\x79\x64\x2c\x46\x15\xc6\x7f\x1d\x44\x42\x5d\xf7\x43\xa4\xf5\xa2\x6b\x44\xe2\x0d\x53\x3a\x7d\x88\xdd\x92\x7c\xce\x08\xf7\xf3\x39\x9d\x7e\x94\xa7\xee\x33\xcc\xe8\xc4\x4a\xe6\x78\x34\xc0\xc4\x42\x77\xb1\xe3\xf0\x19\x0d\x6d\x60\xc7\xb8\x4e\xbd\xd4\xcd\xb8\xc6\x5d\xae\x86\x7e\x9d\xfa\xd7\x24\x3b\xde\xe7\x21\x07\x94\x28\xd3\x42\xdf\xe3\x69\x28\x35\x53\xe5\x13\xad\x02\x06\x73\x78\xf1\xd8\xb0\xda\x15\x9b\xd5\x4c\x64\x8d\xab\xdc\xb2\x7f\x9a\x56\xb9\xa1\x1c\x5c\xd4\xdd\x91\x97\x8f\x89\xac\xd1\x87\xc6\x67\x51\xb5\x89\x3e\x89\x73\xf7\xd7\xeb\x8d\x1a\xe0\x17\xd9\x00\xf8\x55\xc2\xae\x06\xc8\x7f\xab\xd0\x2a\x33\x36\x1a\xf1\x4b\x13\x63\x5f\x1f\xe5\xa0\x0a\x0c\x57\x40\xc7\x96\xe7\x39\x20\x95\xbb\x6e\xa8\xdc\x0e\x6f\xda\x1f\x77\x21\xb5\xba\x19\x75\x40\xe5\x6a\x74\x31\xec\x80\xcc\xa7\xd1\xcd\xa4\x03\x32\x37\x72\xff\xa0\x2d\x95\xc9\xe8\x72\x88\xa1\x8c\xea\x58\x1d\xd8\xe8\x5c\xd2\x6b\x7b\x96\x87\x1e\x1c\xda\xe7\x3d\x47\x41\x8a\x8e\x7b\x61\x30\x51\x0f\xe4\x40\x49\x4c\x7d\xf0\x9a\x0e\x2d\x52\xd7\x10\x5c\x10\x5d\x54\x3d\x30\xf4\xd8\x91\x39\x37\x3d\x55\x1e\xc2\x97\xe8\xe8\xcf\xb3\x1b\x55\x31\x5e\x05\x3f\x8b\x8f\x91\x8b\x03\x42\x19\xf9\xe0\xa9\x80\x10\xc0\xc4\x8c\xd4\x21\x70\xa9\xe3\xf5\x0c\x02\xf6\x99\xd1\xa5\xe7\x40\xc4\x88\x67\xde\x8d\x93\x5b\x19\x96\xf8\x14\x00\xdd\x46\x20\x52\x83\x7e\xea\xe1\x27\xcb\x09\xe3\xa7\x2f\xa4\xbd\x4b\x8e\x9b\x6b\x3a\x6a\xa7\xbe\x36\x80\xda\xfa\x88\x32\x33\x0e\x3b\xe2\xb3\xe8\x24\xf7\xed\x36\x3a\xc4\xaa\x01\x87\xf5\x42\x6e\x8e\x48\x20\x0c\x08\x8c\xe9\x18\xa1\xab\x47\x31\xbe\x7b\x0e\x52\x3d\x35\x7e\x8d\x87\x02\x7d\x1e\xaa\x9a\x06\x0c\xb1\x74\x25\x30\xd7\x90\x20\x8e\x4c\x74\xe8\xb1\xb2\x66\xcb\x24\xf4\xd0\x5c\x2e\xe1\x21\xd6\x2b\x84\x20\xfa\x40\x60\x1d\x87\x84\xa1\x1c\x41\x90\x84\x79\x27\x63\x84\xb2\xf8\xa0\xee\xc8\xf4\xdf\x09\xf9\x3c\xe1\x97\xd5\xd1\x07\x7e\xca\x81\xc5\xae\xac\xdc\x50\x59\x5a\x6a\x1c\x78\x6b\x66\xd3\x60\x57\xc9\x7a\xd2\xbe\x49\xa4\xc5\x29\x19\x4d\x8b\xab\x2f\x6f\xf1\xf9\x4e\xd1\xeb\xb1\xfa\xf5\x3f\x12\x5e\x73\xe6\x50\xdf\x12\xcb\x12\x76\xba\xed\xb0\xc4\x5f\x58\xe4\xc9\xf1\xbb\x86\xb7\x70\x88\x5f\x67\xcb\x3a\x91\x2c\x9b\x13\xfa\x37\xd1\xc7\x40\xfe\xf8\x99\x7b\x2e\x29\x3a\xae\xfd\xb2\x02\x86\x73\x1d\x84\x64\x48\xef\x2a\x1f\x63\xe9\xbe\xc1\x49\x14\xfc\xc7\xc1\x89\x9a\x37\x67\xcf\x25\x6d\xf3\x09\x0f\xcb\x7f\x64\x93\xbc\xc2\x28\xac\xf2\xa5\xaf\x5d\xb5\xb2\x80\x74\xbb\xca\xb7\x36\x0b\xe8\x4c\xc8\x6d\xb6\x8e\xbe\xd8\x89\xbd\xa1\xc5\xd0\x95\x1b\xb3\x8a\x83\xcd\xee\x81\xaa\xf5\x30\x95\x9e\x9c\x37\x1c\xa2\x0c\x44\x62\x35\x6f\xd6\xfe\x0e\x9a\x45\x8e\xae\x9e\xbf\x8c\xee\xc7\x72\x98\x02\x67\x37\xc8\x1a\x47\x0b\x59\x59\x3d\x8c\x7d\xd3\x68\x36\xb5\x4c\x05\x2a\xe8\xaa\xcb\xcc\xe6\xa5\x3a\x06\x08\x78\x9c\x3b\x6c\xe1\x5e\xa8\xe7\x8a\x41\xe1\x50\xd9\xf4\xb1\x9b\xa6\x2e\x1a\x0f\x35\x7a\x91\xb1\x70\x3e\xa7\x79\x61\x05\x54\xa4\x4b\x4b\xe1\xd3\xa7\x71\x5a\xda\x17\x96\xb1\x3a\xff\x1f\x00\x00\xff\xff\xa0\xca\x8b\xdd\xaa\x69\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27050, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

