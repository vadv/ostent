// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x6d\x73\xe3\xb6\xf1\x7f\x7f\x9f\x82\x7f\xfe\x93\x4e\x93\x89\xa8\x3a\x73\x69\xd3\x8b\xe5\x8e\xcf\xd2\x5d\x38\x39\xdb\xaa\x2d\x5f\x9b\x57\x19\x88\x04\x25\x9c\x29\x92\x21\x40\xf9\x5c\x8d\xbe\x7b\x17\x0f\x7c\x16\x25\x3e\xc9\xe7\x74\xdc\x69\xcf\x22\x08\xec\xfe\xb0\x00\x7e\xbb\x20\x97\xe8\xe9\xff\x8d\xaf\x2f\x66\xbf\x4e\x27\xda\x92\xad\xdc\x57\x67\xa7\xe2\x8f\xa6\xc1\x0f\x8c\x6c\xf8\xc1\x7f\xae\x30\x43\x9a\xb5\x44\x21\xc5\x6c\xa4\x47\xcc\x19\xfc\xa8\x67\x6f\x2d\x19\x0b\x06\xf8\xf7\x88\xac\x47\xfa\xbf\x07\x77\xe7\x83\x0b\x7f\x15\x20\x46\xe6\x2e\xd6\x35\xcb\xf7\x18\xf6\xa0\x9d\x39\x19\x61\x7b\x81\x73\x2d\x3d\xb4\xc2\x23\x7d\x4d\xf0\x43\xe0\x87\x2c\x53\xf9\x81\xd8\x6c\x39\xb2\xf1\x9a\x58\x78\x20\x2e\xbe\xd3\x88\x47\x18\x41\xee\x80\x5a\xc8\xc5\xa3\x93\x58\x10\x23\xcc\xc5\xe2\x37\x5c\x6d\x36\xc6\x18\x31\x64\xfc\xec\x53\xc6\x85\x6f\xb7\x1a\xfc\x02\x91\xa7\xc3\xb4\xde\xd9\xa9\x4b\xbc\x7b\x2d\xc4\xee\x48\x27\xa0\x52\xd7\xd8\x63\x00\x38\xc8\x0a\x2d\xf0\x30\xf0\x16\xba\xb6\x0c\xb1\x33\xd2\x87\x0e\x5a\xf3\x0a\x06\x2f\x2b\x35\xa5\xec\xd1\xc5\x74\x89\x31\x8b\x05\x30\xfc\x99\x0d\x2d\x4a\x93\xf6\xf0\x7b\x48\x3c\x1b\x7f\x36\x78\xa9\x92\x40\xad\x90\x04\x2c\xdb\xe4\x13\x5a\x23\x59\xaa\x17\xed\xac\xd1\xd0\x02\x41\x9f\xe8\x30\xe4\x16\x0e\x31\xfc\xfa\xde\x38\x31\x4e\x7e\x8c\x0b\x8c\x15\xf1\x8c\x4f\xa0\xd3\x86\x8e\x0f\x56\x88\x78\xb2\xfe\x66\x43\x1c\xcd\x98\x9d\xbf\x7f\x3f\x19\xcf\x89\xb7\xdd\x42\x3d\x05\x46\xb6\xd8\x6c\xb0\x4b\xc1\x42\xa0\x61\xb8\x22\xee\xbd\xba\x29\x6e\x78\xf6\x76\xab\xc7\x46\x3d\x1d\x4a\x70\x0a\xff\x50\x4d\x8d\xb3\xd3\xb9\x6f\x3f\xaa\x42\x0f\xad\x35\xcb\x45\x94\x8e\x74\xf8\x39\x47\xa1\x26\xff\x0c\x6c\xec\xa0\xc8\x65\xf1\x25\x65\x30\x31\xac\x01\xf3\x03\x5d\x0b\x7d\x18\x47\x5e\x9d\x2c\xa0\x10\xc6\x21\x51\x68\x93\x44\x1a\x9f\x12\xd0\x27\x1c\x0e\x1c\x37\x22\x76\x5c\xa7\x50\x4b\x49\xe7\xc8\x70\x08\xd3\xc8\x1d\xac\xec\xc1\x89\x16\x20\xdb\x26\xde\x62\xe0\x62\x07\x06\x3f\x1e\x82\xb8\xfd\x3c\x62\xcc\xf7\x0a\x22\x98\xbf\x58\xb8\x98\x8b\x70\x51\x40\xb1\x1d\x8f\xad\xac\xac\xac\x2c\x2b\x71\x70\xb2\x56\x5c\x8c\xc2\x05\x1f\xba\xff\x57\xb2\x92\xdb\x19\xb5\x62\x06\x04\x28\x51\x4b\xc3\x81\xef\xb9\x8f\xf9\x2a\x50\x69\x26\x71\xa4\xd6\x81\x51\x80\x66\x7b\x24\xf1\x99\x3a\x00\xb5\x25\x51\xcf\xa6\xe5\x50\x1a\x31\x37\x08\x48\x23\xf6\x48\x5f\x82\x65\xf3\xe3\x30\x0f\x91\x67\x43\x19\x81\x89\x22\x56\xda\x48\x5f\xa1\xcf\x92\x0b\xde\x68\x27\xdf\x5b\xcb\x64\x95\xc1\x10\xf1\xb5\x0d\x52\xd4\xaa\xd7\xca\x34\x50\x1c\x82\x21\xca\xa1\x18\xc2\x5c\x2a\xcc\x2c\x0e\xab\x38\x8e\xe9\xa4\x94\x05\xda\x9e\x81\x3e\x3b\x8d\xdc\x4c\x9f\xe2\xaa\xf0\xa7\x88\xc5\x25\x71\x3d\x64\x31\xb2\xc6\x65\x63\x22\xd5\x55\xce\xb4\xf4\xcd\x70\xf8\xf0\xf0\x60\x40\xd7\x42\xf8\x9f\x61\xf9\xab\xa1\xe4\x38\x60\x04\x17\x23\x8a\xe9\xd0\x45\x0c\x53\xf6\x0f\x6b\x15\x8c\x62\x53\x7c\x9c\xdc\xdc\x9a\xd7\x57\x45\x4b\x08\xf9\x31\x45\xa2\xf2\x28\xba\xa4\x12\x6c\xbc\x60\x80\xc1\xb4\xcc\x6f\xa0\xa0\x70\x41\x3c\xbe\xdc\x34\x87\x84\x94\x89\xd2\x72\x9f\x2c\xdf\xc6\x05\x51\xbc\x08\xf8\xb5\x64\x00\x01\x31\x19\xd4\xb1\x79\x3b\xbb\x31\xdf\x6e\xb7\xa7\x43\xde\xa0\x67\xcc\x5d\x81\x92\xe0\x4f\xde\x9c\x06\x3f\xc9\x65\xc2\x27\x11\xcc\xe0\x52\xb5\x8c\xab\x32\xa7\xbc\x27\xa5\xd5\xa2\xfa\xf2\x0c\x7b\x18\x95\x7a\x18\xed\xef\xe1\x5d\xc0\x08\x5f\x83\x7f\xa8\x5e\xba\xa8\xd8\x4b\x17\xed\xed\xe5\x87\xf3\x1e\x7a\x38\x8c\xdc\x7d\xbc\x94\xb9\x84\x0b\xe8\x84\xf2\xbe\x87\xfd\x65\xae\x4e\xe8\x3f\x14\xfd\x28\xef\xe0\x0a\xaf\xc0\x85\xc9\xa8\x2d\xe1\x39\xee\x48\x5f\xc7\x1e\xd5\x77\x1c\x88\x4d\x06\x27\x39\x9e\xdb\x6c\x18\x5e\x05\x9c\x72\x34\x1d\xbc\x3d\xe8\xa6\x6f\xde\xc8\x1f\xbf\x81\x35\xb0\x0b\x72\x75\xcd\xe0\xd6\xd9\xcd\xb2\xb6\x73\x14\xb5\xb6\xb3\x53\x6b\xce\x86\x87\x8d\x62\x05\xd1\x51\xd0\x81\xdc\xbd\x46\x21\xc7\x31\x0a\xe9\xc5\x28\x01\xdd\x0d\xee\xef\xdd\xc0\x05\xb4\x0f\x70\xeb\xc5\x51\xc0\xad\x17\x87\xc1\x25\x17\x07\xa2\xfc\xb8\xc1\x1a\xe2\x64\x4e\x1e\xda\x28\xf6\x6e\xdb\xed\x4f\xc5\x70\x5b\x45\xd9\x3c\xf0\x16\x7b\xb4\xcd\x66\xf8\xed\xab\x6f\x87\xdb\xed\x66\x23\xf1\x95\x01\x8b\xb0\x09\xb0\x12\x2f\x88\x18\x17\x6d\x8e\xcf\x19\x0b\x61\x37\x04\x17\xc2\x2a\xdb\x6d\x1a\xc5\x0c\xac\x25\xb6\xee\xe7\xfe\xe7\x38\xd6\x4d\xaf\x51\x48\xd0\x60\x49\x6c\x1b\xc3\xae\x82\x85\x11\x18\x55\x5e\x71\x18\x9f\xe8\xe7\x0b\xd7\x87\x28\x48\x17\x7a\xb8\x42\x17\xcd\xb1\xcb\x15\xbe\xf3\x43\xa5\x31\xab\x50\x44\x73\x70\xf7\xf2\x5f\xb7\x3c\xa4\x93\x35\x5e\x49\x12\x9d\x81\x8d\xb8\x79\x85\x08\x2e\x5e\x6c\x42\xea\x74\x36\x88\x60\x26\x50\x9d\xd7\x79\x20\x6c\xa9\xf1\x2b\x18\x60\x3e\x5a\x20\x97\xff\x23\x37\x3a\x9b\x0d\xc4\x94\x0b\xac\x7d\x45\xbe\xd3\xbe\xb2\xfc\x10\x6b\x6f\x46\x9a\x24\xef\x8b\xe9\x9d\xf1\x81\x50\x0e\x80\x85\x80\x50\xdc\x36\xae\x8c\x5f\xf0\x23\x07\xa9\x09\x1a\x00\xb9\xf3\xc7\xc1\x95\x2e\x21\x9f\x32\x3b\x9e\x60\xc2\xf5\x84\x64\xb1\x04\x67\xe4\x3f\x84\x48\xb9\xc3\xb3\x44\x0e\xef\x17\xb3\x2b\x5b\x25\x3b\x43\xee\x6a\x32\xf6\x8a\x28\x0e\x70\x68\x41\x6c\x26\x63\x28\xb9\xcb\x48\x4b\x47\xb1\x82\x3b\x8a\xa5\x21\x73\x6a\x65\x69\xc6\x27\x9d\x1d\x17\xc5\xed\x23\x2d\x83\x10\x85\x7d\x63\x18\x10\x6f\x8d\xc3\x64\xdf\xb5\x03\x8b\x69\xbb\xb8\x0c\x46\x96\xee\x44\x33\x64\x61\x66\xd2\xe5\xff\xd4\x99\x82\x92\x72\xf8\xfc\xe1\x3f\x92\x9e\x89\x0b\xf1\x2f\x6c\x7d\x61\x55\x63\xe1\x91\xa1\xf3\x99\xe7\x2b\xa0\x39\x26\x10\xb6\xcc\x52\x4b\x72\xc5\x6f\x1c\x98\x6c\xa2\x1a\x1f\xf1\xdc\xfe\x2c\xf2\x48\x2e\xf4\x3e\xfb\xba\x10\xa2\xb4\xd1\x02\x43\x7a\x7c\x25\x7c\xa8\xba\x68\x19\x2a\xab\x8a\xd2\xf8\x81\x05\x4b\x9f\x58\xec\xe3\xfb\x98\x51\x24\xdf\xb3\x94\x80\xc5\x40\x36\xe1\x26\xdb\x99\x3f\xc2\x56\xec\xb7\x86\x04\x65\x13\x7a\x9f\x92\xd3\xf8\x9d\x10\x92\x27\x28\x5e\xc5\x18\x93\xf0\x0a\xb6\xb7\x29\x4d\x29\x7d\x8a\xaa\x6c\x12\xf2\xdd\x6f\x99\xb0\x0a\x2c\xb5\xc7\x12\x82\xb1\xff\xac\xb4\xe1\xb5\xd0\x76\x01\x85\xda\xc9\x09\xd7\x36\x90\xea\x6c\xbc\x16\x8a\xbe\xd9\x49\x74\x2d\xb5\xa9\xbe\x09\x6d\x7f\xcd\x2a\x53\xbd\xda\xad\xac\xc4\x25\xb1\xad\xce\xd7\x88\xb8\x75\x9b\x54\x63\x4c\xb9\x46\x97\xe3\xc4\x69\x76\x2a\x4b\xb6\x5b\xb9\x67\x88\x55\xc2\x1d\xbb\x19\xc8\x99\xcf\x50\x16\x64\x27\x56\x8a\x27\x5f\x2f\xd4\xb4\xd3\x26\xf2\x79\x1b\xf6\xa2\x15\x7f\x2c\xaa\xab\xf9\x3a\x45\x21\x5a\x51\x63\x72\x75\x77\x69\xd8\x8e\x31\x81\xdb\x1f\xf8\x53\x53\xfd\xdd\xad\xae\xe9\x62\x19\x74\x97\x75\x39\xed\x4f\xd6\xf9\xc7\x73\xf3\x43\x4f\xb2\xee\x6e\x27\xe3\x9e\x44\xcd\xae\x67\xe7\x1c\x56\x27\x2e\xcb\x31\x50\x1f\x84\x46\x3c\xd8\xca\x76\x66\x34\x29\xa5\x1e\xa5\xc9\xba\x4f\xc7\x69\x4a\xdf\x13\x91\x5a\x2d\x6d\x95\x84\x61\x3a\x21\xc6\xc7\x60\x35\x33\xaa\xa4\x35\x7e\xab\x21\xaf\x99\xa2\x93\xfd\x11\x9b\x9a\x84\x7d\x05\x5d\x71\x4b\xb9\x40\x33\x51\xc8\x58\xbc\x81\xaa\x08\x5f\x4a\xb5\x2f\xfd\xc8\x63\xd8\xde\x5b\x5d\x2b\xda\x48\x54\x13\xce\xa9\x45\x3b\xee\x61\x5a\x34\x13\x6e\xa6\xb7\x70\x29\xcf\x09\xdd\x39\x86\xb4\x0b\x9a\x88\x93\x12\x8c\xb9\x2b\x64\x22\x8e\x91\xa7\x16\x92\x8b\x96\xf2\xb4\x52\x7f\x61\xc7\x62\x13\x0a\x21\x71\xa4\xd2\x70\x41\x83\xa0\x31\x76\x19\x32\xbd\xc6\x4d\xae\x23\xd6\xa4\x4d\x33\x0d\x79\xe1\x9d\x56\x2e\xe9\x33\x24\xc9\xed\x96\x4c\x58\x79\xa1\x83\x2a\x17\x6b\x79\xaf\x11\xbf\x35\x7a\x6b\xce\x6e\x35\x60\x3f\x8d\x62\xcb\xf7\xb2\x6f\x18\x4d\x6f\xff\x0e\xe4\xb4\xf0\xf8\x76\x7e\x3a\xcc\x96\x9c\x05\xb4\xf5\x46\xe8\x30\x38\x18\x95\x2f\x8e\x8e\x71\x1e\xd1\xde\xfe\x3a\x9b\xdc\x6a\x2b\xdf\x8e\x5c\x5f\x7b\xfd\xbe\x83\x01\xdf\x16\x20\x7e\xfd\xfa\xfd\xd1\x31\x36\xb6\x63\x53\x90\x5d\xa8\x95\xf4\x1b\xbd\x11\x07\x87\xa1\x1f\x76\xa4\x56\x29\xe3\x20\xb7\xca\x6a\x47\x20\x57\x25\xf8\x85\x5d\x2b\x87\xf7\x39\xd1\x6b\x05\xb3\x66\xdf\xae\x55\xad\xbc\x1e\x18\xaa\x8a\x3a\x9f\x48\xfd\x6e\x52\xac\xa3\xbc\x0f\xea\xab\xa0\xbb\x3e\xd4\x77\x23\xb5\x2c\x0b\xf5\xc1\x6a\x01\xb2\xee\x31\xeb\x48\x6b\x4a\xc8\x41\x5e\x53\xf5\x8e\x40\x6c\xb1\xe4\x17\x66\xab\x1e\xe2\x17\x6a\x7b\x26\xd4\x26\xe3\xaa\x2f\x4b\x70\xd5\x18\x9e\x05\xcd\xe5\x68\xa9\x3b\xcf\xad\xf0\xaa\xc5\x8b\x4e\x68\x95\xb2\xdc\xe5\xe4\x32\xcf\x6f\x70\xd7\xf8\x85\x78\x76\x4a\x70\x3c\x0b\x44\x52\xdb\x3d\x94\x97\xa9\x2d\x69\x52\x9b\x0a\x78\x83\x77\xfd\x3f\xa6\xe2\x62\x77\x3e\x7b\x57\x37\x9a\x01\xec\xf5\xc9\x3b\x08\xfc\x02\xef\x03\x33\xd3\x9f\x9b\xbb\x49\xfd\x3d\xcf\x91\x9e\xe0\x01\x52\x3c\xb1\xbb\x2f\x91\x24\xb5\x06\x04\xc9\x5c\x8c\xb3\xd3\x34\x27\x03\xf1\x3f\x71\xbe\x96\x7a\xec\xfe\xf6\xfa\xfa\x83\x01\x24\xea\x90\x05\xb4\x33\x64\xda\xed\xcf\x21\x76\xca\xe9\x0b\x73\xe6\x0d\xe6\xae\x6f\xdd\xa7\x49\x55\xea\x3d\xf5\x3e\x89\x6f\x7d\xdf\x15\x77\x2e\xb8\x1c\xb9\xc6\x96\xaf\xb5\xf9\x62\x40\x3c\xc7\xd7\xf9\x85\x9e\xbc\xa9\x06\x99\x17\xd3\xbb\x1c\x25\x25\xb9\xaa\x49\x7a\x49\xb6\x4b\x99\x34\x25\xa9\x52\x6f\x01\x47\xde\x55\xc9\x73\x22\x35\xbb\x54\x94\x24\x44\xab\x6c\x90\x14\xf2\xd9\xa9\xe3\x87\xab\xac\x9d\xf8\x35\x74\x4e\x24\xd6\x15\xd1\xfc\x33\xc2\xe1\x23\xcf\x0e\x59\x9d\x5b\x3c\xab\x39\x49\x01\x89\x85\xc9\x94\x95\xf8\x19\xa6\xd0\x35\xa0\xd1\x7c\x45\x92\x2c\x7b\x75\x95\x69\x93\xc9\x09\xe2\x63\xc4\xa0\x8b\x85\x9c\xe4\x52\x9d\x45\xe8\x47\x81\x96\xfc\x1a\xd0\x55\x9c\x8f\x2e\xae\x8b\x29\xba\x68\xa7\x55\x01\x1e\xae\xb2\xa9\x4a\xe5\xd5\x74\xf8\x2f\xa8\x11\xaa\x54\x2e\xbc\x2e\xa6\x55\xb5\xb8\xe2\x1c\xcc\x61\x01\x34\x3f\x0b\xab\x14\xd3\x75\xb3\x20\x79\x3a\xcb\xe4\x33\xcc\x21\x9b\x2f\x20\x7e\xc5\x21\x66\xd0\x01\x28\x9b\x50\x7e\xd3\xae\x8f\x0f\x0b\x89\x75\x10\x96\x71\x70\x16\x81\x2b\xbe\xbe\x8b\xb0\x73\x09\x55\x9d\x87\x6a\x1f\xcf\x00\xde\x10\xd3\x65\xe1\xc5\xdb\x74\x72\x63\x5e\x8f\x0d\x75\x13\xba\x57\x4c\xf2\x2a\x81\x84\x4b\x3e\xc7\x5f\x95\x6e\x56\x2e\xd1\xa6\xb3\xa7\x7a\xb5\x1d\xc8\x5b\x50\x99\x6f\xb9\x44\xb5\x0c\x2a\xf1\xa3\x29\x9f\xda\x4e\x2b\x3a\xb5\x9d\x9e\xd9\x14\x04\x36\x25\xd3\x82\x30\xf5\x8e\x95\x19\x33\x1e\x3f\x16\xf2\x75\xeb\x11\xad\xed\x1c\xe6\xd9\x0a\xa0\x2f\x34\xdb\x9e\x66\x2b\x4c\xda\x92\x65\x77\x4c\xcd\xe6\x24\x9b\x12\xec\xf8\x5d\x8f\xfc\x5a\x03\x5b\x1e\x01\xa7\xd6\xf1\xbb\xe7\xcf\xac\xb6\xd3\x98\x58\x4b\x5f\xd0\xf0\xcc\x5e\xaa\x95\x16\x52\x46\x80\x4b\x8a\xb6\x4d\x16\x3d\xcf\xac\xc8\x8c\x91\x79\x75\x3d\x9e\xf0\x8c\x14\x35\x89\x72\x76\xde\xdd\xdb\xfd\xa9\x1b\x2c\x93\xbb\xa1\x84\x8b\x84\x56\xd2\x0a\xde\xf8\x9d\x78\x67\x71\x24\x7c\xb1\xf4\x12\xc0\xf4\x0b\x84\x2e\x7e\xad\x92\x01\x2b\xd9\x6d\x87\xb4\x83\x03\xa7\xef\x91\x78\x60\xc2\x16\x52\x08\x8a\x99\xdd\x8d\xf0\xa4\x23\xd5\x09\x50\xf6\xcd\x68\x19\x4f\x6f\xde\x9c\xb4\xf3\xe6\xa4\x6f\x6f\x4e\xfa\xf1\xe6\xa4\x93\x37\x27\x35\xbc\x79\x05\xd0\x17\x6f\xde\xde\x9b\x57\x98\xb4\xa5\x37\xdf\x31\x35\xbb\x78\x73\xb3\x4f\x6f\x5e\x03\x5b\xd9\x9b\x9b\x7f\x00\x6f\x4e\xbe\xa4\x37\x27\x65\x12\x9e\x9e\x5f\xfc\x32\x99\xf5\xe7\x2e\x49\xce\x5d\xc6\xd2\xeb\xfa\xf3\x1d\x00\x27\x37\x37\xd7\x37\xc7\xc2\xa7\x84\x77\x80\x67\xf6\x1c\x6e\xe4\xf1\x99\xc7\x0d\x37\x2a\x29\xba\x71\xb8\xb1\x77\x66\x75\x70\xef\xc5\x17\x58\xf5\x03\x8e\x7d\x53\xa9\x13\xa0\x5c\xae\x40\x27\x3c\x66\x1f\x01\x10\x79\xaa\x00\x88\x7f\x8e\xda\x26\x02\x92\x6f\x09\xfa\x0c\x81\xb8\xc4\xa6\x31\xd0\x25\x5e\xf9\xe1\x63\x8b\x50\x07\x94\x1d\x8e\x75\xaa\x10\xbd\x04\x3b\xed\x83\x9d\x2a\x9b\xb6\x8c\x76\x76\x4d\xc3\xe6\xe1\x4e\x51\x2a\x7d\x40\x41\x9f\x28\x85\xbc\x1d\xab\xa5\xba\x4f\x63\x15\x61\x55\xf6\x08\x6b\x5c\xe8\x73\x8f\x8b\xa0\x2b\x4f\xf8\xfc\xb8\x7a\xbd\xb6\x79\x7e\x9c\xbc\xb6\xec\xf7\xf9\x71\x40\x5b\xf1\x6d\x40\x7b\xa6\x5b\x10\xd8\x94\x6d\xa7\xa1\x6f\x61\x4a\x31\x6d\x41\xb8\x01\x3d\xcc\xb7\x15\x90\x8e\x47\xb7\xd9\xef\x01\xfe\xe7\x99\xb7\xc2\xba\x2d\x29\x6d\xc7\x7c\x6c\xc1\xbb\xb7\x62\x85\xc1\x5f\xcf\x67\x63\x6c\x85\x18\x09\xda\x2b\x6e\x39\x33\xfb\xcd\x5a\x28\x3f\x98\x97\xe6\xcc\x08\xa8\x67\x7c\x80\xf9\x5a\x8d\x70\x50\x1b\x5c\xba\x21\xee\x0f\xdb\xa5\x1f\xd6\xd8\x08\xa7\x30\x02\x37\xa2\xf1\xb9\x00\xcf\x9b\xf6\x03\xfa\x84\xac\x5f\xc9\x1a\x6d\x48\x3f\xa0\xc7\xe0\xfc\xf5\xa2\x15\xe7\xaf\x17\x3d\x73\x3e\x08\x6c\xca\xf9\x1f\xd1\x22\x44\x1e\xd3\x16\xae\x3f\xe7\xc7\x0d\x32\xc4\xa2\x36\xfc\xbf\x5e\x1c\xe6\xff\x0a\x78\x2f\xe1\x76\x7b\xd2\xaf\x30\x69\x4b\xd2\xdf\x31\x21\xeb\x92\xfe\xf3\x22\xa8\xf5\xe2\x09\x09\xaa\x72\x5a\xb7\x21\xa8\xf5\xa2\x6f\x82\xa2\x0d\xd3\x28\x03\x88\x02\xd3\x1c\xca\xd8\x3d\xe5\xf2\x28\x79\x15\x63\x6a\x8e\x79\x52\x9f\xb7\x48\xb3\x29\x83\x38\x4f\x3c\x20\xf6\xbe\x83\x63\x54\x32\x62\x56\x54\xbd\xf4\xc5\xa4\xc5\x5d\xa1\x85\xba\x9d\xf9\x4f\x9d\xb4\x74\x29\x8a\xe2\x30\x4d\x4c\x0f\x68\x04\xd7\xa2\x03\x5a\xa1\x9f\x35\x73\xd4\xd3\x5e\x85\xc4\x0f\x09\x7b\x6c\xd8\xec\x8a\x58\x35\x93\x47\x93\x26\xb7\xe4\x3f\x4d\x9b\xdc\x60\x0a\x53\xd7\xdb\x93\x10\xcf\xf3\x4c\xe3\x0f\x7e\xcf\xe2\x66\x33\x75\xb6\xdd\xfe\x2f\xc4\x9b\x0d\x40\xfa\x65\xc0\xeb\xef\xf9\x00\xf0\x0f\x02\x0e\x0e\x40\xa7\x8c\xd5\x38\x0a\xa8\x91\xb0\xaa\xae\x96\xfe\x5a\xda\xa2\xe7\x13\x23\x20\xb8\xc9\x3c\x77\x37\x3b\x1c\xa6\x90\x93\x74\xd7\x9f\xa4\xdb\xc9\x4d\xa7\xb3\x27\xf2\x3d\xbc\x31\x7b\x92\x74\x65\x5e\x4c\x7a\x12\xf5\xd1\xbc\x99\xf5\x24\xea\x46\x3c\xf5\xef\x43\xd2\xcc\xbc\x9c\xf0\x40\x48\x2e\xc2\x9e\x6c\x76\x2e\x64\x76\x3d\x64\x43\x79\x94\xee\xf9\xcb\xb1\x27\x97\xb1\x33\xf7\xaf\x37\xb2\x24\xe3\x45\x45\x40\xa6\xa2\x87\xcc\x6f\x88\x1f\x34\xd5\x5c\x16\xc4\xee\x26\x77\x5e\x6f\xa6\x3e\xb2\xed\xf8\xcc\xe5\x33\xa5\x25\x89\x72\xcf\x92\xa3\xe3\xf2\x41\x24\x3f\x5d\x12\x62\x94\x44\x91\xac\x25\x0e\xe5\x1d\x38\x7e\x14\xf2\x93\x1e\xd3\x23\xef\x74\x0d\xec\x65\xe1\xa5\xef\xc2\x98\xf0\x93\x68\xa7\xe9\xa5\x8c\xb9\xa6\x18\x3c\x82\xcd\xe9\x2e\x7d\x42\x28\xcb\x3e\x22\x37\xca\x1d\x10\xb7\xe3\xb4\xb9\xa6\x8e\x3f\xf3\xf9\x00\xb4\x2e\x9e\x31\x26\x0e\x9e\xdb\x75\xa2\x98\x91\x9c\x51\xb7\xdd\xc6\x87\x4e\x35\xd0\xba\x5e\x88\x37\x2d\xba\x8c\x15\xee\xf1\x23\xdf\x1a\xc8\xa2\xd8\x63\x00\x0a\xdf\xe5\x72\x39\x8e\x1f\x12\x07\xa3\x4e\xee\x95\xfb\x91\x09\x6f\x51\x49\xf7\x35\x50\x24\x41\x8f\x8a\x6a\x56\xc8\x5a\xa6\x51\x8d\xd2\x72\x09\x85\xbc\x5d\xe1\x2b\x11\x28\x35\xee\x80\x42\xd3\xc0\x66\x2d\xeb\xab\xe8\x26\x8a\x48\xe9\x53\x91\x06\x51\x47\x2a\x5f\x38\xbd\xbf\xa5\xe2\x85\xe0\x6f\xaa\x03\x9b\x18\xdc\x15\x2a\x78\xe1\x9d\xb5\xa6\xa1\xbf\x26\x36\x0e\xf7\xd5\xac\x89\x16\x82\x40\xa6\x7c\xf4\x8f\x29\x5c\xbe\x59\xc4\xba\x96\x76\x68\x2f\xf4\x9a\xaa\xd4\xd0\x38\xc4\xe5\x9b\x6b\xb6\x94\x5a\x7f\xf8\x4b\xaa\x96\xdf\xe2\x77\xaa\x34\xef\x0c\x0d\x6a\x4c\x19\x0a\xf1\xb1\xb5\xac\x13\x29\x13\x47\xc3\xbf\x6b\xe5\x09\x0b\xd1\x42\x18\xe1\x0a\xb2\x2e\x2c\x10\x2d\x27\x71\x5f\xfd\x84\x6d\xdb\x86\x3b\xf1\x9e\x22\x09\x77\xe4\x86\x3d\x7f\x6e\x68\x97\x8f\x75\x48\xf1\x73\x9a\xf4\x16\x0f\xe6\x2a\x6f\x06\x6a\x86\x56\x56\x10\x33\xac\xf2\xae\x4d\x42\x6c\x31\xf1\x82\xb0\xa7\x6f\x73\x92\x49\xd0\xc1\xb9\x25\xee\x18\x24\xa8\xa3\xcc\x61\xfa\xf0\x1d\x35\xff\xff\x67\xf0\x60\x3a\x5b\xf7\xa3\x0d\x5b\x12\x6a\x2c\x91\x67\xbb\x58\x94\x14\x0f\x06\x45\xb5\x74\x15\x02\x00\x3e\xc0\xcb\x2c\xcb\xab\x63\x71\x40\xee\xb9\x4b\x16\xde\x85\x2c\x97\xe3\x5a\xc2\x96\xb6\x83\x32\x55\x35\x21\x67\x85\xab\xe0\x46\x78\x45\x14\x62\x96\xad\x2d\xcc\x95\x3d\x73\x12\x29\x0b\x2e\x93\x2e\xfd\x37\x00\x00\xff\xff\x12\xda\x00\x6c\x89\x63\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 25481, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

