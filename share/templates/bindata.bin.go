// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x7b\x73\xdb\x36\xb6\xff\x3f\x9f\x02\x97\x6d\xef\xdc\x76\x2a\xea\x26\xdb\xee\x66\x52\xdb\x33\x8e\xa5\xa4\x9a\xc6\x8f\xb5\xe5\xec\xf6\xaf\x0e\x25\x42\x12\x62\x8a\x64\x09\x50\x8e\xeb\xd1\x77\xdf\x73\xf0\xe0\x9b\x32\x29\x51\x8a\x67\x36\x99\x89\xc5\x07\x70\x5e\x38\xf8\xe1\x00\x38\xc4\xd1\xff\x0c\x2e\xcf\xc6\xbf\x5f\x0d\xc9\x42\x2c\xbd\x17\x27\x47\xf2\x87\x10\xb8\xa0\x8e\x0b\x17\x78\xb9\xa4\xc2\x21\xd3\x85\x13\x71\x2a\x8e\xad\x58\xcc\x7a\xaf\xad\xec\xab\x85\x10\x61\x8f\xfe\x19\xb3\xd5\xb1\xf5\xef\xde\xed\x69\xef\x2c\x58\x86\x8e\x60\x13\x8f\x5a\x64\x1a\xf8\x82\xfa\x50\x6f\x34\x3c\xa6\xee\x9c\xe6\x6a\xfa\xce\x92\x1e\x5b\x2b\x46\xef\xc3\x20\x12\x99\xc2\xf7\xcc\x15\x8b\x63\x97\xae\xd8\x94\xf6\xe4\xcd\x8f\x84\xf9\x4c\x30\xc7\xeb\xf1\xa9\xe3\xd1\xe3\x97\x86\x90\x60\xc2\xa3\xf2\x1a\xee\x1e\x1f\xed\x81\x23\x1c\xfb\xd7\x80\x0b\x24\xbe\x5e\x13\xb8\x02\x92\x47\xfd\xb4\xdc\xc9\x91\xc7\xfc\x3b\x12\x51\xef\xd8\x62\xc0\xd2\x22\xe2\x21\x04\x39\xd8\xd2\x99\xd3\x7e\xe8\xcf\x2d\xb2\x88\xe8\xec\xd8\xea\xcf\x9c\x15\x16\xb0\xf1\x59\xa9\x2a\x17\x0f\x1e\xe5\x0b\x4a\x85\x21\x20\xe8\x67\xd1\x9f\x72\x9e\xd4\x87\xeb\x3e\xf3\x5d\xfa\xd9\xc6\xa7\x9a\x02\x9f\x46\x2c\x14\xd9\x2a\x9f\x9c\x95\xa3\x9e\x5a\x45\x3b\x13\x1e\x4d\x81\xd0\x27\xde\x8f\xd0\xc2\x11\x85\xab\x57\xf6\x4b\xfb\xe5\x6b\xf3\xc0\x5e\x32\xdf\xfe\x04\x3c\x5d\x50\xbc\xb7\x74\x98\xaf\xca\x3f\x3e\xb2\x19\xb1\xc7\xa7\xef\xdf\x0f\x07\x13\xe6\xaf\xd7\x50\x4e\x0b\xa3\x6a\x3c\x3e\x52\x8f\x83\x85\x80\x43\x7f\xc9\xbc\x3b\xfd\x52\xbe\xf0\xdd\xf5\xda\x32\x46\x3d\xea\x2b\xe1\xb4\xfc\x7d\xed\x1a\x27\x47\x93\xc0\x7d\xd0\x0f\x7d\x67\x45\xa6\x9e\xc3\xf9\xb1\x05\x97\x13\x27\x22\xea\xa7\xe7\xd2\x99\x13\x7b\xc2\xdc\xce\xd8\x67\xea\xf6\x44\x10\x5a\x24\x0a\xa0\x19\xb1\x34\x9b\x83\xb3\x40\x33\x24\xfc\x5c\x96\x10\x43\x8f\x00\x95\x28\xd4\xf4\x62\xe6\x9a\x32\x85\x52\x6e\x14\x84\x6e\x70\xef\x1b\x2e\x28\x21\x8d\xd2\xc2\x52\xd8\x58\x88\xc0\xcf\x0b\x09\x82\xcc\xe7\x1e\x05\xbf\xf3\x3c\x27\xe4\xd4\x35\x2d\xa9\x0a\x6b\x9b\xaa\x42\x28\x8b\x2a\x65\x1e\x3b\xd1\x1c\x1b\xea\x1b\x4d\x2b\x79\x9d\x61\x2b\xdb\x3b\x74\x12\xb6\x3c\xea\x05\xbe\xf7\x90\x2f\x02\x85\xc6\x4a\x8e\xd4\x18\x60\x73\xa8\xb6\x81\x12\xfa\x65\x0f\xd8\x96\x48\x3d\x9b\x9a\x7d\x65\xc4\x5c\x23\x38\x84\xb9\x69\x73\x4d\x22\xc7\x07\x93\x17\x1a\xd1\x34\x8a\x36\xab\x2e\x94\x6b\x09\x53\xd4\x22\x4e\xc4\x9c\x1e\xfd\x0c\xdc\x5d\x0a\x94\x45\x14\xd3\xa4\xf7\x15\x1b\x02\x1d\x06\xd9\x2f\x34\x38\x94\xd4\x28\xa3\xc7\x51\x1f\x2a\x15\xf5\x72\x72\x2a\xc5\x5e\x49\x81\x25\xf5\x63\xe3\xdf\xea\x5a\x8a\xe9\x39\x13\xea\x79\xd4\x9d\x3c\x14\x4d\x50\xe0\xe0\xb1\x12\x49\xed\xd1\x9a\x68\x18\x51\x0e\xa0\x96\xeb\x36\x49\xf5\x28\xf6\x7d\xe6\xcf\x8f\xfa\x1e\x2b\xd3\x6d\x50\x1f\x1a\xa9\xd4\x22\x80\x52\xc5\x72\x19\x7b\x0d\x46\x37\xe3\xeb\xd1\x5b\x34\x97\x53\x76\x8d\x92\x18\xfd\xd8\xcb\x59\x30\x67\xe3\xb4\x99\x8a\xdd\x2a\x85\x04\xf5\x80\x6c\xe8\x77\xd9\x66\x41\x68\xd2\x45\xe1\xa7\xc2\xd6\xc8\x8c\x85\x56\x11\x1a\x2a\x74\x4e\x34\x1e\x5d\xa1\xb2\x55\x06\x2e\x98\xae\x6c\x5d\xa3\x9e\x29\xe1\x39\x55\x9c\x49\xa1\x37\xb4\xea\x00\xe5\x96\x4a\xb8\x02\xb7\xd2\xdb\x8c\x5e\x1f\x4e\xab\x7c\xbe\xa2\x99\xca\x66\xde\xc6\xfb\xab\xa4\xd9\xd1\xfd\x25\x89\x38\x14\x6c\x49\x4b\x0d\x94\x90\x6f\x48\x46\xc3\x95\xa2\x56\x81\x53\x95\xbd\x22\x67\xcf\x5b\x59\xb5\xaa\x63\x68\x9b\x56\x4a\x98\xef\x20\xd5\x25\xcb\xdd\xa8\xce\xe3\xcd\x65\xc4\xe6\x0b\x51\x0f\x35\x9b\xdc\x3e\x43\xdb\x63\x5c\xf4\x98\x0f\x61\x10\xad\xed\x55\x86\x74\x8d\x4d\x15\x3c\x7f\x83\x41\x40\xb5\xf5\xf0\x55\x3b\x8b\x3d\xc5\x2b\xe4\x75\xac\x42\xde\x2d\xa7\xd5\xbc\x8e\xd3\xca\x99\x03\xd8\x8b\x7d\xb8\x42\xb9\xc7\x10\x67\x2a\xd8\xaa\x3c\xc4\x15\x46\xe0\x15\x8d\x38\x7a\x7f\xcd\x18\xbc\xcd\xb0\x8b\xb3\x01\xfe\xa6\xdf\xbf\xbf\xbf\xb7\x61\x1c\x8d\xe0\xbf\x3d\x0d\x96\x7d\x15\x87\x43\xd4\xea\x51\x87\x53\xde\xf7\x1c\x41\x79\xd5\xa8\x72\x79\x33\x1e\x5e\x8c\xab\x86\x92\xdd\xc0\xc6\xe8\xba\x17\xc4\xd1\xc4\xbb\x80\x9c\x6e\xcc\x28\xa9\x19\x18\xfa\x38\xbc\xbe\x19\x5d\x5e\x1c\x06\x87\x0a\xc3\x79\xe6\x16\x6e\x00\x2b\xf4\x8c\xc1\x8c\x48\x72\x2e\x50\x1d\xed\x93\xd0\x71\x5d\x08\x65\x70\xbe\xc0\xe9\x0a\xf4\x7e\xe0\x8b\xca\x69\x42\x14\xdc\x17\xa7\x06\x48\x7b\x49\x97\x10\xa6\xab\x79\xa8\x2a\x38\xf1\x82\xe9\x1d\xc6\xfb\xbd\xa5\xdb\x7b\x65\x2e\x82\xd9\x0c\xe6\x5c\xbd\x97\xb9\x10\xe2\xf1\x51\xd0\x65\x88\xf6\x25\x16\xcc\x62\x40\x2c\xfe\xe6\x8d\xba\xf8\x03\x1c\x9f\x7a\x40\xdd\x22\x76\x71\xc0\x4c\xb9\xb3\xd9\x26\xe6\x7f\x6b\xc7\x8c\xcd\x36\xf2\x9a\x86\xf1\x46\x4d\xdb\x31\x03\x6a\x1b\xb9\xb9\x5d\x6a\xe6\x56\x6b\x96\xf7\x1b\x73\xd3\x64\x72\xd8\xc4\x33\x42\xbe\x49\x83\xd7\x05\xc7\x68\x69\x3e\x18\x6d\x0e\xaf\xd1\x6a\xbe\x47\x8d\x60\x54\x6b\xa3\xd1\xc6\x25\x0e\x53\x61\xe5\x44\x04\xd1\x89\x1c\x13\x8d\x53\xeb\xf5\x2f\xc5\xb5\x06\xbd\xc4\x80\xab\x0e\x72\x81\xea\xf1\xb1\xff\xc3\x8b\x1f\xfa\xeb\xf5\xe3\xa3\x92\x2f\x23\xb0\x83\xe0\x8d\xeb\x33\x16\x48\xaa\x71\x14\x28\xff\x0a\xbf\xb8\x0e\xe4\x9f\x79\x6c\x7a\x77\xfc\x28\x16\x8c\xdb\x0b\x18\xb9\x3c\x2a\x9f\xac\x5f\x28\xa4\x1c\x83\x9c\x0a\x21\x4f\xf4\x0a\xc8\x26\x66\xda\x3a\x53\x0f\x66\x0e\x50\x8b\xf9\x61\x2c\x50\x8f\xd1\xe0\x54\x88\x08\xf8\xc1\x8d\x6c\x88\xf5\x3a\x9d\xb2\xf4\xa6\x0b\x3a\xbd\x9b\x04\x9f\xcd\x3a\x43\x7a\x2f\x87\xad\x05\x73\x5d\xea\x27\xe3\xa9\xbc\x43\x69\x3e\xf1\xcf\x67\x5e\x00\x53\x1e\x4b\xf2\x41\x86\x72\x84\x43\x86\xef\x82\x48\x73\xcc\x32\x44\xb1\xf0\xed\xf9\xbf\x6e\x70\x99\x4a\x95\x28\x28\x2a\x49\xb4\x52\x36\x8c\xc1\xf9\xb8\x85\x65\xee\x99\x58\x10\xbc\x03\x6f\x42\xd7\x00\xba\xf8\x47\x2d\x29\x3d\x3e\x42\xa4\x33\xa7\xe4\x5b\xf6\x23\xf9\x76\x1a\x44\x94\xbc\x39\x26\x6a\x28\x3a\xbb\xba\xb5\x3f\x40\x0c\x09\x02\x88\x08\x24\x94\xaf\xed\x0b\xfb\x37\xfa\x80\x42\x12\x89\x64\x40\x77\xf2\xd0\xbb\xb0\x94\xc8\x47\xc2\x35\x3e\x8d\xbe\xa4\x02\x59\xe2\x07\xf7\x91\xa3\x23\xc8\x93\x84\x0e\xea\x25\xdc\xda\x5a\xc9\x1a\x1c\xae\x6a\xa4\xf6\x32\xd5\x6f\x39\x8d\xce\xd4\xb3\x74\x45\x31\x7d\x85\xc4\x93\x85\x8e\x93\x5d\x18\xdd\x3c\x70\xcd\x87\x14\x19\xc1\xab\xee\xf8\x8c\xa4\x93\x57\x2a\x84\xaf\x6a\x18\xf5\x45\x94\x71\x8b\xfc\x4f\x13\x27\x51\x38\x84\x2d\x8c\x17\x89\xd0\x78\xf3\x92\x40\x2c\xc3\x42\xaa\xb1\x4a\xe9\x95\x59\x6b\x06\xce\x06\x4f\xc4\x22\x8b\x34\xc9\x1d\xbe\x78\xc2\x1d\x64\x31\x6c\xb0\xdc\xea\x55\xec\xb3\x5c\x9c\x74\xf2\x5d\x61\xd9\x6a\x1b\x2e\xd0\x5a\xfb\x67\x82\x4d\xb5\x0b\x97\xbe\xb6\xaa\x7c\x6a\x16\x6f\x45\xba\x7a\xbb\x09\xfe\x4d\x9f\x57\xf0\x2f\x52\x3c\x96\x0d\xd8\x06\x3d\xdc\xd9\xe4\x01\x62\xd5\x3f\x5a\x42\x88\xcb\xf8\x5d\x0a\x1f\x83\x77\x92\x48\x1e\x42\xb0\x88\x3d\x60\xd1\x85\xb3\xa4\x29\x90\x68\x7e\x1a\x4c\x5c\x16\xc9\x35\xbf\x12\xa4\x14\x70\x64\x83\x25\x24\xa6\xfe\x9f\xe6\x46\x57\x92\x1b\x8c\x20\x21\x79\xf9\x0a\xb9\xf5\x14\x3b\x97\xae\x24\xa3\xef\x2b\xa1\x68\x4b\x6e\x5a\x37\xc9\xed\xef\x59\x66\x5a\xab\x6a\x66\x25\x98\x30\xb6\x3a\x5d\x39\xcc\x6b\x57\x05\xba\x13\x34\xf3\xff\xfa\x13\x1e\xfe\x72\xc4\xe3\x30\x85\x93\x7a\x1d\x62\x4e\x43\x1a\x4d\x21\x6e\x07\x4d\xd2\x1b\x92\x50\xbc\x52\x0f\xa4\xf4\x86\x66\x23\xbc\x33\x52\x8d\x03\xe1\x64\x15\xd9\x09\xb9\x8c\x83\x76\x02\x5f\x95\x76\x11\x8b\x24\x44\x21\xe6\x4a\x3b\xf6\x95\x13\x39\x4b\x6e\x0f\x2f\x6e\xcf\x6d\x77\x46\xac\x77\x37\x16\xb1\x64\x37\xd9\x8d\xce\xf9\x55\x37\x74\x4e\x3f\x9e\x8e\x3e\x74\x40\xe7\xf6\x66\x38\xe8\x80\xcc\xf8\x72\x7c\x8a\xe2\xec\x84\x6d\x39\x44\xea\x02\xe0\x98\x1f\xb8\xbb\x23\x9c\xa2\xd2\x0c\xe2\x54\xd9\xc3\x61\x9c\xe6\x77\x20\x90\x6b\xc4\xad\x16\x1c\x46\xb3\x88\xd2\x96\x55\xe2\xce\x61\x0e\x49\xee\x8c\x73\x23\x69\x88\xee\x80\x4e\x3b\x6a\x57\x81\x9a\xa9\x59\xdc\x77\x3d\x19\xc8\x1d\xfc\x9a\x90\xa7\x54\xfa\x3c\x88\x7d\x41\xdd\x8d\xc5\x49\xd1\x46\xb2\x98\x1c\xd0\xb6\xa8\x87\xa3\xda\x16\xd5\xe4\xb0\xd3\x59\x88\x95\xc7\x8d\xdd\x71\x88\x6d\x17\x68\xb1\x59\x0a\x42\xa3\xaa\x30\x8b\xcd\xec\x3c\xfc\xb0\x5c\x84\x95\x87\x9e\xe6\x9d\xdf\x90\x4d\x60\x86\x99\xe8\xa6\x65\xa7\x07\x42\x03\xea\x09\x67\xe4\xb7\xae\x72\x19\x8b\x36\x75\xda\x71\xc8\x13\xdf\xa9\xe7\xb2\x2e\x43\x94\xdc\x0c\x6b\x04\x3d\x2f\x9a\x39\xb5\x9d\xb5\x3c\x3f\x21\x32\xa3\xe6\xd8\x7a\x3b\x1a\xdf\x10\xc0\x3c\xc2\xe9\x34\xc8\x6e\x66\x03\xcd\xcd\xb3\x96\xa3\xc2\x52\xf2\xe4\xa8\x9f\x7d\x72\x82\x7b\x33\x5b\x4e\x9e\x9e\x16\x0e\x5a\xe5\x8b\x4b\x27\x10\x47\xc8\xdb\xdf\xc7\xc3\x1b\xb2\x0c\xdc\xd8\x0b\xc8\x4f\xef\x77\x30\xe0\xdb\x82\x88\xdf\xfd\xf4\x7e\xef\x32\xb6\xb6\x63\x5b\x21\x77\x81\x56\xd6\x6d\x84\xc7\x66\x34\x8a\x82\x68\x47\x68\x55\x34\x9e\xc4\x56\x55\x6c\x0f\xe0\xaa\x09\x7f\x45\xd7\xda\xe6\x7d\x4e\xf0\x5a\x83\xac\x26\x44\xdd\xd4\xf3\x3a\x40\xa8\x3a\xe8\x3c\x10\xfb\x6a\x50\x6c\xc2\xbc\x0b\xe8\xab\x81\xbb\x2e\xd8\xef\x06\x6a\x59\x14\xea\x02\xd5\x42\x67\x7a\x47\xc5\x8e\xb0\xa6\x89\x3c\x89\x6b\xba\xdc\x1e\x80\xcd\x50\xfe\x8a\x6c\xf5\x4d\xfc\x15\xda\x9e\x09\xb4\xa9\xb8\xea\xcb\x02\x5c\xbd\x0c\xcf\x02\xe6\x72\xb0\xb4\x3b\xce\x2d\xe9\x72\x8b\xed\x4b\xa8\x95\xa2\xdc\xf9\xf0\x3c\x8f\x6f\xf0\xd6\xfe\x8d\xf9\x6e\x0a\x70\x98\x73\xa2\xa0\xed\x0e\x9e\x97\xa1\x2d\xa9\xd2\x18\x0a\xb0\xc2\xbb\x36\x4b\x59\x58\xa1\xd3\xf5\x7a\x4d\x70\x97\x65\x2c\x24\xd1\xe9\x6a\x3d\x10\xfc\x02\xfb\x8c\x99\x2e\x82\x4d\xd2\xa6\xfc\x86\xb5\xa6\x03\x2c\x32\x19\xe7\xdf\xbd\x1b\x25\x19\x42\x40\x28\x93\x96\x22\x1f\xbf\x54\x96\x56\xc9\x09\xd9\x17\x32\x9f\x8e\xf9\x73\x32\x11\x7e\x4f\x66\xa6\x98\x9d\x6b\x87\xe0\x97\x2a\x6f\xaf\xe4\x36\xb5\xec\x42\xb9\x15\xff\xb7\x97\x97\x1f\x6c\x00\xe9\x19\x9b\x03\x4f\x62\x61\x7d\xb5\x34\xa7\xc8\x98\x44\xc7\xf2\x1b\x4b\xa6\x44\xa8\xdc\x45\xcc\x01\x79\x8a\x76\xba\x45\x7e\x76\x75\x6b\x12\xe5\x4e\x4c\x9a\x04\x5e\xe6\x53\x76\x74\xda\x95\xaa\x6f\xb5\xd3\x02\xc4\x4d\x72\x42\x54\x9a\x87\x95\xb2\x3f\x9a\x05\xd1\x32\x9b\xcd\xb1\x08\x22\xf6\x17\x66\x06\x79\x3d\xf9\x6a\x12\x44\x52\xcb\x40\x88\x60\x29\x1f\x59\x26\x85\xc6\x30\xfc\x67\x4c\xa3\x07\xcc\x0d\x59\x9e\x4e\x31\xd9\x30\x49\x00\x31\x3c\x54\xc2\x8a\x59\xeb\x94\x22\xf4\x78\x3c\x59\xb2\xe4\x6b\x26\x7d\x97\xa9\x93\x69\x6d\x64\xda\x9b\x47\x41\x1c\xf6\x30\x49\x8f\xba\xf9\x29\x7f\xa6\x24\x36\x8b\x2c\x48\x92\xab\x1e\x5f\x9a\xc4\x4a\x79\x5f\x4c\x4a\x6e\xe2\x12\x20\x32\x95\xa6\x4c\xda\x5f\xb9\x80\xe4\xa2\x3f\x3a\x6a\xe8\x01\x9a\x54\xc6\x3c\x5a\x90\x5f\xa5\x59\x8a\x39\x93\x89\x7c\x45\xf1\x30\xb5\x65\x28\x73\x62\xb1\x4b\xc1\x9d\x94\xc9\x65\x1c\x6f\xdd\xad\xc5\x53\x69\xb6\x95\x02\x9a\x46\x4f\x39\x23\x92\xc0\x5d\x39\xd3\xb3\x94\xbf\x5f\xf9\xdd\x45\xa3\xd6\xdd\x04\x33\xa0\x46\x44\xf9\xc2\xca\xeb\x71\x35\xbc\x1e\x5d\x0e\x6c\xfd\x52\xaa\x52\x4a\x25\x43\x9e\x2f\x4a\xa2\x25\x97\xc5\xde\xd7\xc2\x43\xea\x7b\xda\x13\x89\x0f\x3a\x9f\x2e\x97\xf8\x96\x11\x48\x5e\xb4\x05\x4e\x77\x76\x70\xdc\xc4\xfd\xd2\x3d\xc1\xa6\x3b\xcb\x1a\xb3\x6a\xab\x56\xd8\x63\x8c\x35\x53\x87\x7c\x02\x51\xdd\x59\x5b\x40\x45\xf5\x76\xc2\xd3\xff\x4e\xf0\x44\xb3\x75\x83\x9d\x19\x27\x48\xc4\x68\x09\x9d\x29\x6c\x0e\xde\x75\x89\x9a\x55\xa2\x99\xc6\x4e\x01\x73\xf0\xee\x59\xe3\x25\x2a\xb1\x19\x2e\x4b\x9f\xfe\x60\xd8\xcb\xb3\xde\xe7\x31\x69\x78\x31\xf4\xe3\x25\x5a\x8c\x57\xe6\x55\x08\x62\x8d\x2e\x2e\x07\x43\xcc\x3d\xd1\xbe\x91\xb3\x5f\xb5\x2a\x4e\xc3\xac\x8d\x94\x7a\xe1\xe3\xb9\x16\xe2\x0d\xde\xc9\x9d\x88\x7d\xc9\x67\xc8\x97\x04\x4c\x3f\x72\xe8\x6e\x70\xc2\x1e\xb8\x01\xb5\x52\x44\x54\xdb\xc3\x0a\x11\x2f\x68\x0d\xd9\x8a\x26\xac\x25\x8e\xe4\xe5\xbc\x3e\x4b\x3f\x9d\x2a\x35\xf2\xdc\x42\x12\x81\x1a\x25\x8b\x4b\x01\xd9\xfc\xf0\x54\x1f\xb9\x27\xd3\x58\x9d\xb4\xc9\x9b\xea\xa3\x76\x8f\xdb\xaa\x93\xdd\x59\x7d\x5a\x9b\xce\x02\x02\x76\xf8\x80\x80\xed\x2f\x20\x60\x4f\x04\x04\xac\x75\x40\xc0\x5a\x07\x04\xec\x6b\x40\x90\xad\xdd\x34\x20\x60\x9d\x05\x04\xac\xcb\x80\x60\xd4\x69\x40\x50\x25\x5a\x39\x20\x18\x3d\xef\x80\x80\x1d\x28\x20\x60\x08\xbf\x57\xa7\x67\xbf\x0d\xc7\xfb\x18\x71\x73\xe4\xb7\x0a\x09\x24\x85\xe1\xf5\xf5\xe5\xf5\xde\xe4\xd3\xd4\xb7\x17\x6f\xb4\xb7\x88\x25\x47\xfe\x20\x11\x0b\x6b\x16\xb1\x24\x2b\xf7\x4d\xc6\xf8\x82\x93\x35\x1b\xe3\xd3\x5d\xc4\x76\xa3\x7c\x71\x1f\xac\x79\xd4\x62\x36\x5d\x1b\xab\x94\xb8\x65\x53\x8d\x74\x5a\x46\x5b\x85\x72\x29\x0b\x6d\xf4\x69\x1c\x85\x15\xdc\xb8\xa9\x3e\xdb\x44\x61\xec\x4b\x45\x61\xf8\x2d\xef\xa1\xc3\x30\xdc\x59\xda\x57\x1c\x06\xb4\xd3\x8e\x79\x4e\x97\x41\xf4\xd0\x30\xde\x82\x9a\x6d\x03\x2e\xa9\xc8\xd7\x25\xed\x2e\x82\x30\x69\xca\x6e\xa2\xb0\xac\x0b\x24\x82\x3c\x11\x86\x3d\x29\x1f\xbf\x77\xc2\xae\x04\x44\x5a\xb2\x34\x9b\x0d\x74\x74\xb7\x85\x3a\x94\x20\x9d\x67\x1c\xad\x49\xc1\x0f\xb3\xdc\x2d\xbd\x67\xbb\xe5\xee\x64\x3b\xb5\xdb\xe5\xee\x90\x1f\x1c\x56\x43\xbe\x37\x54\x0d\x33\xdf\xd1\x5e\x45\xc1\x94\x72\x4e\x79\x43\x5c\x0d\x79\x5b\x58\x45\x45\xda\xa1\xaa\x3a\x97\xa7\x0e\x51\xb3\xdf\x32\x3c\x2f\x70\xdd\xb5\x8b\x85\xbc\xfa\xac\x8a\xe7\x84\xec\xd8\x9a\xdd\xe0\x66\xc6\x0b\xb3\x40\xd8\x66\x7a\x7d\x75\x23\x3b\x3b\xfc\xfa\x81\x18\xd0\x69\x44\x1d\x09\xc0\xb9\x79\x76\x9d\x90\x1e\xb8\x7d\xb5\x88\x1f\x46\xe7\xa3\xb1\x1d\x72\xbf\x2c\x60\x6f\x3b\xd9\xd2\x75\x80\x46\xa2\x41\x9c\x53\x63\xbd\x0d\xa2\x25\x5d\x21\x61\x1c\x7a\x31\x4f\x8f\x83\xc8\x4b\xfd\xd4\xb8\xb2\x1f\x64\x47\xef\xd9\x0e\xd8\x43\xbe\x0f\x5c\x5f\xcd\x0f\x8e\xeb\xab\xf9\xde\x70\x7d\x35\x4f\x6d\xf9\x51\x1d\xd3\x45\xe6\x5e\x30\xc1\xd3\x66\x85\x23\xe2\xa6\x18\xbf\x9a\xb7\xc5\x78\x54\xea\x2b\xc6\x37\xc1\x78\x6c\xa3\xe7\x8e\xf1\xd8\x9a\xdd\x60\x7c\xc6\x23\x13\x31\xea\x30\xfe\xcb\x20\x12\xea\xba\x1d\x22\xad\xe6\x5d\x23\x12\x6f\x99\xd7\x19\x42\xec\x96\x26\x75\x1a\xdc\xcf\x25\x76\x62\x11\xfb\x6a\x34\xc0\x34\x42\x7f\x9e\xa6\x77\x86\x26\x71\x3d\x64\xee\xa6\xf3\x69\x34\xbe\x65\x49\x35\xcb\xdf\x4c\x6a\xdc\x16\x6a\xe8\xd7\x99\x7f\x4d\xf2\xe4\x15\x29\x4e\xa3\x34\x53\x3e\xe4\x31\xdc\x4b\x05\x48\x41\xcf\x86\x49\xf3\xa9\x56\x11\x83\x89\xbc\x78\x68\x59\xed\x82\x4d\x1b\x66\xb3\x26\x55\x6e\xd8\x5f\x6d\xab\x5c\x53\x0e\x7e\xea\x6f\xc8\xd0\xc7\x6c\x56\xf3\x05\xf2\x89\xa9\x36\xd6\x27\x76\x6e\xfe\xac\xbd\x5d\x03\xa4\x9f\x2a\xfc\x24\x1b\x00\xbf\x50\x78\xb2\x01\x76\x4a\x8f\x35\xc3\x7e\x65\x76\xec\xab\x83\x1c\x63\x81\x31\x0b\x28\xb6\xe3\x69\x0f\x48\xe5\xb6\x1b\x2a\x37\xc3\xeb\xdd\x0f\xc3\x90\x5a\x5d\x8f\x3a\xa0\x72\x31\x3a\x1b\x76\x40\xe6\xe3\xe8\x7a\xdc\x01\x99\x6b\xb9\x89\xb0\x2b\x95\xf1\xe8\x7c\x88\xf1\x8c\xea\x58\x1d\xd8\xe8\x54\xd2\xdb\xf5\xa4\x0f\x3d\x42\xec\x9e\xfc\x6c\x22\x15\x1d\xfc\xc2\x88\xa2\x1e\xc8\xd1\x92\xd8\xfa\x80\x36\x1d\x5f\x64\xae\x21\xc2\x20\xba\xa8\x7a\x60\xc6\x8e\xdc\xf9\xea\x99\xf2\x10\xc3\x98\x23\x42\x4f\xae\x55\xc5\x64\x29\xfc\x24\x39\x6e\x2e\x89\x0a\x65\xf8\x83\xa7\x07\x42\x14\x93\x30\x52\x87\xc5\x65\x8e\xe1\xb3\x08\xd8\x67\x4a\x17\x81\x07\x61\x23\x9e\x8d\x77\x95\xde\xca\xd8\x24\xa4\x00\xe8\x2e\xa2\x95\x1a\xf9\x33\x0f\x3f\x3a\x5e\x9c\x3c\x7d\x21\xed\x5d\x71\x2c\x5d\xdb\xa1\x3b\xf3\xc9\x01\xd4\xd6\xa7\x98\xd9\x49\xec\x91\x9c\x59\x27\xb9\xaf\xd7\xe6\x9c\xab\x16\x1c\x56\x73\xb9\x43\x62\xa9\x91\xfd\x8e\x3e\x60\x98\xae\x1e\x19\x7c\x07\x3b\x06\x1e\xd2\x45\x4b\xfe\x9c\x0c\x07\xfa\xec\x54\x35\x1f\x18\x62\x8d\x5a\x70\x6e\x20\x45\x12\xa2\xe8\x18\x64\xe9\x4c\x17\x69\x0c\xa2\xb9\x9c\xc3\x43\xac\x57\xf8\xc8\x04\x9e\xda\xb7\x00\x82\x69\x18\xa2\x0f\x13\xd6\xb1\x48\x1c\xb3\xd2\x97\x26\x2d\x62\x84\x94\xbe\x1c\xa2\xfe\x91\x92\x97\x84\xbf\xaf\x0f\x43\x8c\x70\x17\x4e\x61\xcc\xac\x2c\x75\x15\x05\x2b\xe6\xd2\x68\x53\xc9\x86\xd2\x42\xc8\x26\xf4\x88\xfa\x3a\x15\x17\x27\x6b\x10\x57\xa6\x0a\x6d\x14\xbd\x21\x2b\xdd\x34\x33\xe6\xe1\xdc\x57\x2c\x14\xd7\x9f\xff\x3f\x65\x8b\xaf\xf0\x4d\x1d\xe7\xca\x81\xbc\x81\xcb\x70\x88\x66\xa7\x8b\x26\x71\x2d\x9b\x11\xfa\x27\x29\x3b\xac\x4b\xf0\x28\xc9\x1a\x18\x2e\x74\x10\x92\xa3\xb8\xa9\x7c\x82\xa5\xdb\x06\x27\x66\x06\x90\x04\x27\x6a\xf2\x9c\x3f\xbf\x74\x97\xef\x78\x58\xf1\x4b\x9b\xf4\x15\x86\x5e\xb5\x2f\x43\xed\xa1\xb5\x05\xa4\x87\xd5\xbe\x75\x59\x44\xa7\x42\xee\xb5\x75\xf4\xd9\x4e\xe2\x04\x3b\x0c\x5d\x99\xe1\x16\x0d\xbe\xc8\xed\xc3\xa9\x53\x6e\xc0\x9d\x4e\x3d\x36\xf7\xcf\xd4\x73\x65\xe7\xd2\x11\xaa\xd9\xf3\x25\x6d\x5d\x34\x01\x4b\xbd\x5e\x56\x3a\x88\xd2\x3e\x73\x22\x2a\xb2\xa5\xa5\xf8\xd9\x63\x27\x1d\xad\xd1\x22\x51\xe7\x3f\x01\x00\x00\xff\xff\x39\x8a\x57\xc8\x98\x68\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26776, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

