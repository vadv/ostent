// Generated by: main
// TypeWriter: slice
// Directive: +gen on MetricCPU

package types

import "sort"

// MetricCPUSlice is a slice of type MetricCPU. Use it where you would use []MetricCPU.
type MetricCPUSlice []MetricCPU

// MetricCPUOrder is an aux type for sorting.
type MetricCPUOrder struct {
	MetricCPUSlice
	LessFunc func(MetricCPU, MetricCPU) bool
}

// Len is there to satisfy sort.Interface.
func (xo MetricCPUOrder) Len() int {
	return len(xo.MetricCPUSlice)
}

// Swap is there to satisfy sort.Interface.
func (xo MetricCPUOrder) Swap(i, j int) {
	xo.MetricCPUSlice[i], xo.MetricCPUSlice[j] = xo.MetricCPUSlice[j], xo.MetricCPUSlice[i]
}

// Less is there to satisfy sort.Interface.
func (xo MetricCPUOrder) Less(i, j int) bool {
	return xo.LessFunc(xo.MetricCPUSlice[i], xo.MetricCPUSlice[j])
}

// SortSortBy sorts rcv doing sort.Sort.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv MetricCPUSlice) SortSortBy(less func(MetricCPU, MetricCPU) bool) {
	sort.Sort(MetricCPUOrder{rcv, less})
}

// StableSortBy sorts rcv doing sort.Stable.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv MetricCPUSlice) StableSortBy(less func(MetricCPU, MetricCPU) bool) {
	sort.Stable(MetricCPUOrder{rcv, less})
}
