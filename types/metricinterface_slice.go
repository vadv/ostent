// Generated by: main
// TypeWriter: slice
// Directive: +gen on MetricInterface

package types

import "sort"

// MetricInterfaceSlice is a slice of type MetricInterface. Use it where you would use []MetricInterface.
type MetricInterfaceSlice []MetricInterface

// MetricInterfaceOrder is an aux type for sorting.
type MetricInterfaceOrder struct {
	MetricInterfaceSlice
	LessFunc func(MetricInterface, MetricInterface) bool
}

// Len is there to satisfy sort.Interface.
func (xo MetricInterfaceOrder) Len() int {
	return len(xo.MetricInterfaceSlice)
}

// Swap is there to satisfy sort.Interface.
func (xo MetricInterfaceOrder) Swap(i, j int) {
	xo.MetricInterfaceSlice[i], xo.MetricInterfaceSlice[j] = xo.MetricInterfaceSlice[j], xo.MetricInterfaceSlice[i]
}

// Less is there to satisfy sort.Interface.
func (xo MetricInterfaceOrder) Less(i, j int) bool {
	return xo.LessFunc(xo.MetricInterfaceSlice[i], xo.MetricInterfaceSlice[j])
}

// SortSortBy sorts rcv doing sort.Sort.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv MetricInterfaceSlice) SortSortBy(less func(MetricInterface, MetricInterface) bool) {
	sort.Sort(MetricInterfaceOrder{rcv, less})
}

// StableSortBy sorts rcv doing sort.Stable.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv MetricInterfaceSlice) StableSortBy(less func(MetricInterface, MetricInterface) bool) {
	sort.Stable(MetricInterfaceOrder{rcv, less})
}
