// Generated by: main
// TypeWriter: slice
// Directive: +gen on MetricDF

package types

import "sort"

// MetricDFSlice is a slice of type MetricDF. Use it where you would use []MetricDF.
type MetricDFSlice []MetricDF

// MetricDFOrder is an aux type for sorting.
type MetricDFOrder struct {
	MetricDFSlice
	LessFunc func(MetricDF, MetricDF) bool
}

// Len is there to satisfy sort.Interface.
func (xo MetricDFOrder) Len() int {
	return len(xo.MetricDFSlice)
}

// Swap is there to satisfy sort.Interface.
func (xo MetricDFOrder) Swap(i, j int) {
	xo.MetricDFSlice[i], xo.MetricDFSlice[j] = xo.MetricDFSlice[j], xo.MetricDFSlice[i]
}

// Less is there to satisfy sort.Interface.
func (xo MetricDFOrder) Less(i, j int) bool {
	return xo.LessFunc(xo.MetricDFSlice[i], xo.MetricDFSlice[j])
}

// SortSortBy sorts rcv doing sort.Sort.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv MetricDFSlice) SortSortBy(less func(MetricDF, MetricDF) bool) {
	sort.Sort(MetricDFOrder{rcv, less})
}

// StableSortBy sorts rcv doing sort.Stable.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv MetricDFSlice) StableSortBy(less func(MetricDF, MetricDF) bool) {
	sort.Stable(MetricDFOrder{rcv, less})
}
