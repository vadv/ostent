// Generated by: main
// TypeWriter: slice
// Directive: +gen on ProcInfo

package types

import "sort"

// ProcInfoSlice is a slice of type ProcInfo. Use it where you would use []ProcInfo.
type ProcInfoSlice []ProcInfo

// ProcInfoOrder is an aux type for sorting.
type ProcInfoOrder struct {
	ProcInfoSlice
	LessFunc func(ProcInfo, ProcInfo) bool
}

// Len is there to satisfy sort.Interface.
func (xo ProcInfoOrder) Len() int {
	return len(xo.ProcInfoSlice)
}

// Swap is there to satisfy sort.Interface.
func (xo ProcInfoOrder) Swap(i, j int) {
	xo.ProcInfoSlice[i], xo.ProcInfoSlice[j] = xo.ProcInfoSlice[j], xo.ProcInfoSlice[i]
}

// Less is there to satisfy sort.Interface.
func (xo ProcInfoOrder) Less(i, j int) bool {
	return xo.LessFunc(xo.ProcInfoSlice[i], xo.ProcInfoSlice[j])
}

// SortSortBy sorts rcv doing sort.Sort.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv ProcInfoSlice) SortSortBy(less func(ProcInfo, ProcInfo) bool) {
	sort.Sort(ProcInfoOrder{rcv, less})
}

// StableSortBy sorts rcv doing sort.Stable.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv ProcInfoSlice) StableSortBy(less func(ProcInfo, ProcInfo) bool) {
	sort.Stable(ProcInfoOrder{rcv, less})
}
