// Generated by: main
// TypeWriter: slice
// Directive: +gen on MetricProc

package operating

import "sort"

// MetricProcSlice is a slice of type MetricProc. Use it where you would use []MetricProc.
type MetricProcSlice []MetricProc

// MetricProcOrder is an aux type for sorting.
type MetricProcOrder struct {
	MetricProcSlice
	LessFunc func(MetricProc, MetricProc) bool
}

// Len is there to satisfy sort.Interface.
func (xo MetricProcOrder) Len() int {
	return len(xo.MetricProcSlice)
}

// Swap is there to satisfy sort.Interface.
func (xo MetricProcOrder) Swap(i, j int) {
	xo.MetricProcSlice[i], xo.MetricProcSlice[j] = xo.MetricProcSlice[j], xo.MetricProcSlice[i]
}

// Less is there to satisfy sort.Interface.
func (xo MetricProcOrder) Less(i, j int) bool {
	return xo.LessFunc(xo.MetricProcSlice[i], xo.MetricProcSlice[j])
}

// SortSortBy sorts rcv doing sort.Sort.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv MetricProcSlice) SortSortBy(less func(MetricProc, MetricProc) bool) {
	sort.Sort(MetricProcOrder{rcv, less})
}

// StableSortBy sorts rcv doing sort.Stable.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv MetricProcSlice) StableSortBy(less func(MetricProc, MetricProc) bool) {
	sort.Stable(MetricProcOrder{rcv, less})
}
