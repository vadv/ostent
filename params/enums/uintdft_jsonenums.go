// generated by jsonenums -type=UintDFT; DO NOT EDIT

package enums

import (
	"encoding/json"
	"fmt"
)

var (
	_UintDFTNameToValue = map[string]UintDFT{
		"INODES":  INODES,
		"DFBYTES": DFBYTES,
	}

	_UintDFTValueToName = map[UintDFT]string{
		INODES:  "INODES",
		DFBYTES: "DFBYTES",
	}
)

func init() {
	var v UintDFT
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_UintDFTNameToValue = map[string]UintDFT{
			interface{}(INODES).(fmt.Stringer).String():  INODES,
			interface{}(DFBYTES).(fmt.Stringer).String(): DFBYTES,
		}
	}
}

// MarshalJSON is generated so UintDFT satisfies json.Marshaler.
func (r UintDFT) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _UintDFTValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid UintDFT: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so UintDFT satisfies json.Unmarshaler.
func (r *UintDFT) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("UintDFT should be a string, got %s", data)
	}
	v, ok := _UintDFTNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid UintDFT %q", s)
	}
	*r = v
	return nil
}
