// generated by jsonenums -type=UintIFT; DO NOT EDIT

package enums

import (
	"encoding/json"
	"fmt"
)

var (
	_UintIFTNameToValue = map[string]UintIFT{
		"PACKETS": PACKETS,
		"ERRORS":  ERRORS,
		"IFBYTES": IFBYTES,
	}

	_UintIFTValueToName = map[UintIFT]string{
		PACKETS: "PACKETS",
		ERRORS:  "ERRORS",
		IFBYTES: "IFBYTES",
	}
)

func init() {
	var v UintIFT
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_UintIFTNameToValue = map[string]UintIFT{
			interface{}(PACKETS).(fmt.Stringer).String(): PACKETS,
			interface{}(ERRORS).(fmt.Stringer).String():  ERRORS,
			interface{}(IFBYTES).(fmt.Stringer).String(): IFBYTES,
		}
	}
}

// MarshalJSON is generated so UintIFT satisfies json.Marshaler.
func (r UintIFT) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _UintIFTValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid UintIFT: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so UintIFT satisfies json.Unmarshaler.
func (r *UintIFT) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("UintIFT should be a string, got %s", data)
	}
	v, ok := _UintIFTNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid UintIFT %q", s)
	}
	*r = v
	return nil
}
