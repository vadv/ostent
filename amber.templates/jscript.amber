/** @jsx React.DOM */ [[/* -*- indent-tabs-mode: nil -*- */]]
script
  function emptyK(obj, key) {
  return (obj      === undefined ||
          obj      === null      ||
          obj[key] === undefined ||
          obj[key] === null);
  }

  var ifsTableClass = React.createClass({
    getInitialState: function() { return Data.InterfacesBytes; },

    render: function() {
      var Data = {InterfacesBytes: this.state};
      var ifs_rows = emptyK(Data.InterfacesBytes, 'List') ?'': Data.InterfacesBytes.List.map(function($if) {
        return ([[template "define_ifsrows" .]]);
      });
      [[SET "bracket_ifsrows" `{ifs_rows}`]]
      return ([[template "define_ifstable" .]]);
      [[DEL "bracket_ifsrows"]]
    }
  });

  var ifsErrorsTableClass = React.createClass({
    getInitialState: function() { return Data.InterfacesErrors; },

    render: function() {
      var Data = {InterfacesErrors: this.state};
      var ifs_rows = emptyK(Data.InterfacesErrors, 'List') ?'': Data.InterfacesErrors.List.map(function($if) {
        return ([[template "define_ifserrorsrows" .]]);
      });
      [[SET "bracket_ifsrows" `{ifs_rows}`]]
      return ([[template "define_ifserrorstable" .]]);
      [[DEL "bracket_ifsrows"]]
    }
  });

  var ifsPacketsTableClass = React.createClass({
    getInitialState: function() { return Data.InterfacesPackets; },

    render: function() {
      var Data = {InterfacesPackets: this.state};
      var ifs_rows = emptyK(Data.InterfacesPackets, 'List') ?'': Data.InterfacesPackets.List.map(function($if) {
        return ([[template "define_ifspacketsrows" .]]);
      });
      [[SET "bracket_ifsrows" `{ifs_rows}`]]
      return ([[template "define_ifspacketstable" .]]);
      [[DEL "bracket_ifsrows"]]
    }
  });

  var disksinBytesClass = React.createClass({
    getInitialState: function() { return {DiskLinks: Data.DiskLinks, DisksinBytes: Data.DisksinBytes}; },

    render: function() {
      var Data = this.state;
      var rows = emptyK(Data.DisksinBytes, 'List') ?'': Data.DisksinBytes.List.map(function($disk) {
        return ([[template "define_dfrows" .]]);
      });

      [[SET "bracket_dfrows" `{rows}`]]
      return ([[template "define_dftable" .]]);
      [[DEL "bracket_dfrows"]]
    }
  });

  var disksinInodesClass = React.createClass({
    getInitialState: function() { return {DiskLinks: Data.DiskLinks, DisksinInodes: Data.DisksinInodes}; },

    render: function() {
      var Data = this.state;
      var rows = emptyK(Data.DisksinInodes, 'List') ?'': Data.DisksinInodes.List.map(function($disk) {
        return ([[template "define_dirows" .]]);
      });

      [[SET "bracket_dirows" `{rows}`]]
      return ([[template "define_ditable" .]]);
      [[DEL "bracket_dirows"]]
    }
  });

  var cpuTableClass = React.createClass({
    getInitialState: function() { return Data.CPU; },

    render: function() {
      var Data = {CPU: this.state};
      var cpu_rows = Data.CPU.List.map(function($core) {
        return ([[template "define_cpurows" .]]);
      });
      [[SET "bracket_cpurows" `{cpu_rows}`]]
      return ([[template "define_cputable" .]]);
      [[DEL "bracket_cpurows"]]
    }
  });

  var procTableClass  = React.createClass({
    getInitialState: function() { return Data.ProcTable; },

    render: function() {
      var Data = {ProcTable: this.state};
      var ps_rows = Data.ProcTable.List.map(function($proc) {
        return ([[template "define_psrows" .]]);
      });
      [[SET "bracket_psrows" `{ps_rows}`]]
      return ([[template "define_pstable" .]]);
      [[DEL "bracket_psrows"]]
    }
  });
