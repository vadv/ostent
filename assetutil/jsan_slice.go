// Generated by: main
// TypeWriter: slice
// Directive: +gen on JSAN

package assetutil

import "sort"

// JSANSlice is a slice of type JSAN. Use it where you would use []JSAN.
type JSANSlice []JSAN

// SelectJSAN projects a slice of JSAN from JSANSlice, typically called a map in other frameworks. See: http://clipperhouse.github.io/gen/#Select
func (rcv JSANSlice) SelectJSAN(fn func(JSAN) JSAN) (result []JSAN) {
	for _, v := range rcv {
		result = append(result, fn(v))
	}
	return
}

// Where returns a new JSANSlice whose elements return true for func. See: http://clipperhouse.github.io/gen/#Where
func (rcv JSANSlice) Where(fn func(JSAN) bool) (result JSANSlice) {
	for _, v := range rcv {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// JSANOrder is an aux type for sorting.
type JSANOrder struct {
	JSANSlice
	LessFunc func(JSAN, JSAN) bool
}

// Len is there to satisfy sort.Interface.
func (xo JSANOrder) Len() int {
	return len(xo.JSANSlice)
}

// Swap is there to satisfy sort.Interface.
func (xo JSANOrder) Swap(i, j int) {
	xo.JSANSlice[i], xo.JSANSlice[j] = xo.JSANSlice[j], xo.JSANSlice[i]
}

// Less is there to satisfy sort.Interface.
func (xo JSANOrder) Less(i, j int) bool {
	return xo.LessFunc(xo.JSANSlice[i], xo.JSANSlice[j])
}

// SortSortBy sorts rcv doing sort.Sort.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv JSANSlice) SortSortBy(less func(JSAN, JSAN) bool) {
	sort.Sort(JSANOrder{rcv, less})
}

// StableSortBy sorts rcv doing sort.Stable.
// Order determined by a func defining ‘less’.
// See also: http://clipperhouse.github.io/gen/#SortBy
func (rcv JSANSlice) StableSortBy(less func(JSAN, JSAN) bool) {
	sort.Stable(JSANOrder{rcv, less})
}
